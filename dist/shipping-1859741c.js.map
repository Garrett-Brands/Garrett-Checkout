{"version":3,"file":"shipping-1859741c.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/common/form/connectFormik.tsx","webpack://checkout/./packages/core/src/app/common/utility/parseAnchor.ts","webpack://checkout/./packages/core/src/app/locale/TranslatedLink.tsx","webpack://checkout/./packages/core/src/app/shipping/errors/UnassignItemError.ts","webpack://checkout/./packages/core/src/app/shipping/getShippingMethodId.ts","webpack://checkout/./packages/core/src/app/address/AddressFormModal.tsx","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemInvalidAddressError.ts","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemFailedError.ts","webpack://checkout/./packages/core/src/app/shipping/findConsignment.ts","webpack://checkout/./packages/core/src/app/shipping/getShippableLineItems.ts","webpack://checkout/./packages/core/src/app/shipping/updateShippableItems.ts","webpack://checkout/./packages/core/src/app/shipping/ItemAddressSelect.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/shipDate/ShippingCalendar.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/shipDate/ShippingInfo.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/shipDate/DatesSummary.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/shipDate/ShippingBanner.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/shipDate/ShippingInfoBanner.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/shipDate/ShipDate.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/shipDate/ShipDateDisabled.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/giftOptions/GiftOptions.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/giftOptions/GiftMessageCollapsed.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/giftOptions/GiftMessageExpanded.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/giftOptions/GiftMessageToggle.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/giftOptions/GiftMessageForm.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/giftOptions/GiftMessage.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/giftOptions/GiftMessageDisabled.tsx","webpack://checkout/./packages/core/src/app/shipping/getRecommendedShippingOption.ts","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsList.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsForm.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptions.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/giftOptions/GiftMessageDestination.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/giftOptions/GiftMessageMulti.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingFormFooter.tsx","webpack://checkout/./packages/core/src/app/shipping/MultiShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/BillingSameAsShippingField.tsx","webpack://checkout/./packages/core/src/app/shipping/RemoteShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressForm.tsx","webpack://checkout/./packages/core/src/app/shipping/StaticAddressEditable.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressFields.ts","webpack://checkout/./packages/core/src/app/shipping/customComponents/giftOptions/GiftOrderForm.tsx","webpack://checkout/./packages/core/src/app/shipping/SingleShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingHeader.tsx","webpack://checkout/./packages/core/src/app/shipping/Shipping.tsx","webpack://checkout/./packages/core/src/app/ui/accordion/AccordionContext.tsx","webpack://checkout/./packages/core/src/app/ui/accordion/Accordion.tsx","webpack://checkout/./packages/core/src/app/ui/form/Checklist.tsx","webpack://checkout/./packages/core/src/app/ui/accordion/AccordionItem.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItemInput.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItem.tsx"],"sourcesContent":["import { connect } from 'formik';\nimport React, { memo, ComponentType, FunctionComponent } from 'react';\nimport shallowEqual from 'shallowequal';\n\nimport ConnectFormikProps from './ConnectFormikProps';\n\nexport default function connectFormik<\n    TProps extends ConnectFormikProps<TValues>,\n    TValues = any\n>(\n    OriginalComponent: ComponentType<TProps>\n): ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>> {\n    const InnerComponent: FunctionComponent<TProps> = memo(\n        props => <OriginalComponent { ...props } />,\n        ({ formik: prevFormik, ...prevProps }, { formik: nextFormik, ...nextProps }) => (\n            shallowEqual(prevFormik, nextFormik) && shallowEqual(prevProps, nextProps)\n        )\n    );\n\n    const DecoratedComponent = connect<TProps, TValues>(InnerComponent) as ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>>;\n\n    DecoratedComponent.displayName = `ConnectFormik(${OriginalComponent.displayName || OriginalComponent.name})`;\n\n    return DecoratedComponent;\n}\n","export default function parseAnchor(text: string): string[] {\n    const div = document.createElement('div');\n    div.innerHTML = text;\n\n    const anchor = div.querySelector('a');\n\n    if (!anchor) {\n        return [];\n    }\n\n    const anchorSiblings = div.innerHTML.split(anchor.outerHTML);\n\n    return [ anchorSiblings[0], anchor.text, anchorSiblings[1] ];\n}\n","import React, { FunctionComponent, MouseEventHandler } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { parseAnchor } from '../common/utility';\n\nimport withLanguage, { WithLanguageProps } from './withLanguage';\nimport { TranslatedStringProps } from './TranslatedString';\n\nexport type TranslatedLinkProps = TranslatedStringProps & {\n    testId?: string;\n    onClick: MouseEventHandler;\n};\n\nconst TranslatedLink: FunctionComponent<TranslatedLinkProps & WithLanguageProps> = ({\n    data,\n    id,\n    language,\n    onClick,\n    testId,\n}) => {\n    const translatedString = language.translate(id, data);\n    const parsedString = parseAnchor(translatedString);\n\n    return parsedString.length ?\n        <>\n            { parsedString[0] }\n            <a\n                data-test={ testId }\n                href=\"#\"\n                onClick={ preventDefault(onClick) }\n            >\n                { parsedString[1] }\n            </a>\n            { parsedString[2] }\n        </> :\n        <>{ translatedString }</>;\n};\n\nexport default withLanguage(TranslatedLink);\n","import { setPrototypeOf, CustomError } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class UnassignItemError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'UNASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.unassign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, UnassignItemError.prototype);\n    }\n}\n","import { Checkout } from '@bigcommerce/checkout-sdk';\n\nimport { getPreselectedPayment } from '../payment';\n\nexport default function getShippingMethodId(checkout: Checkout): string | undefined {\n    const SHIPPING_METHOD_IDS = ['amazon', 'amazonpay'];\n    const preselectedPayment = getPreselectedPayment(checkout);\n\n    return preselectedPayment && SHIPPING_METHOD_IDS.indexOf(preselectedPayment.providerId) > -1 ?\n        preselectedPayment.providerId :\n        undefined;\n}\n","import { Country, FormField } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport React, { FunctionComponent } from 'react';\nimport { lazy } from 'yup';\n\nimport { preventDefault } from '../common/dom';\nimport { withLanguage, TranslatedString, WithLanguageProps } from '../locale';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Form } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\nimport { Modal, ModalHeader } from '../ui/modal';\n\nimport getAddressFormFieldsValidationSchema from './getAddressFormFieldsValidationSchema';\nimport { AddressFormValues } from './mapAddressToFormValues';\nimport AddressForm from './AddressForm';\n\nexport interface AddressFormModalProps extends AddressFormProps {\n    isOpen: boolean;\n    onAfterOpen?(): void;\n}\n\nexport interface AddressFormProps {\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    shouldShowSaveAddress?: boolean;\n    defaultCountryCode?: string;\n    getFields(countryCode?: string): FormField[];\n    onSaveAddress(address: AddressFormValues): void;\n    onRequestClose?(): void;\n}\n\nconst SaveAddress: FunctionComponent<AddressFormProps & WithLanguageProps & FormikProps<AddressFormValues>> = ({\n    googleMapsApiKey,\n    getFields,\n    countriesWithAutocomplete,\n    countries,\n    values,\n    setFieldValue,\n    isLoading,\n    onRequestClose,\n}) => (\n    <Form autoComplete=\"on\">\n        <LoadingOverlay isLoading={ isLoading }>\n            <AddressForm\n                countries={ countries }\n                countriesWithAutocomplete={ countriesWithAutocomplete }\n                countryCode={ values.countryCode }\n                formFields={ getFields(values.countryCode) }\n                googleMapsApiKey={ googleMapsApiKey }\n                setFieldValue={ setFieldValue }\n                shouldShowSaveAddress={ false }\n            />\n            <div className=\"form-actions\">\n                <a\n                    className=\"button optimizedCheckout-buttonSecondary\"\n                    href=\"#\"\n                    onClick={ preventDefault(onRequestClose) }\n                >\n                    <TranslatedString id=\"common.cancel_action\" />\n                </a>\n\n                <Button\n                    disabled={ isLoading }\n                    id=\"checkout-save-address\"\n                    type=\"submit\"\n                    variant={ ButtonVariant.Primary }\n                >\n                    <TranslatedString id=\"address.save_address_action\" />\n                </Button>\n            </div>\n        </LoadingOverlay>\n    </Form>\n);\n\nconst SaveAddressForm = withLanguage(withFormik<AddressFormProps & WithLanguageProps, AddressFormValues>({\n    handleSubmit: (values, { props: { onSaveAddress } }) => {\n        onSaveAddress(values);\n    },\n    mapPropsToValues: ({ defaultCountryCode = '' }) => ({\n        firstName: '',\n        lastName: '',\n        address1: '',\n        address2: '',\n        customFields: {},\n        country: '',\n        countryCode: defaultCountryCode,\n        stateOrProvince: '',\n        stateOrProvinceCode: '',\n        postalCode: '',\n        phone: '',\n        city: '',\n        company: '',\n        shouldSaveAddress: false,\n    }),\n    validationSchema: ({\n        language,\n        getFields,\n    }: AddressFormProps & WithLanguageProps) => (\n        lazy<Partial<AddressFormValues>>(values => getAddressFormFieldsValidationSchema({\n            language,\n            formFields: getFields(values && values.countryCode),\n        }))\n    ),\n})(SaveAddress));\n\nconst AddressFormModal: FunctionComponent<AddressFormModalProps> = ({\n    isOpen,\n    onAfterOpen,\n    onRequestClose,\n    ...addressFormProps\n}) => (\n    <Modal\n        additionalModalClassName=\"modal--medium\"\n        header={\n            <ModalHeader>\n                <TranslatedString id=\"address.add_address_heading\" />\n            </ModalHeader>\n        }\n        isOpen={ isOpen }\n        onAfterOpen={ onAfterOpen }\n        onRequestClose={ onRequestClose }\n        shouldShowCloseButton={ true }\n    >\n        <SaveAddressForm\n            { ...addressFormProps }\n            onRequestClose={ onRequestClose }\n        />\n    </Modal>\n);\n\nexport default AddressFormModal;\n","import { setPrototypeOf, CustomError } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class AssignItemInvalidAddressError extends CustomError {\n    constructor(data?: Error) {\n        super({\n            name: 'ASSIGN_ITEM_INVALID_ADDRESS',\n            message: getLanguageService().translate('shipping.assign_item_invalid_address_error'),\n            title: getLanguageService().translate('shipping.assign_item_invalid_address_error_heading'),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemInvalidAddressError.prototype);\n    }\n}\n","import { setPrototypeOf, CustomError } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class AssignItemFailedError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'ASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.assign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemFailedError.prototype);\n    }\n}\n","import { Consignment } from '@bigcommerce/checkout-sdk';\nimport { find, includes } from 'lodash';\n\nexport default function findConsignment(\n    consignments: Consignment[],\n    itemId: string\n): Consignment | undefined {\n    return find(consignments, consignment => includes(consignment.lineItemIds, itemId));\n}\n","import { Cart, Consignment, PhysicalItem } from '@bigcommerce/checkout-sdk';\nimport { isNil, reduce } from 'lodash';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport default function getShippableLineItems(\n    cart: Cart,\n    consignments: Consignment[]\n): ShippableItem[] {\n    return reduce(\n        (cart && cart.lineItems.physicalItems) || [],\n        (result, item, i) => (\n            !item.addedByPromotion && isNil(item.parentId) ?\n                result.concat(...splitItem(item, consignments, i)) :\n                result\n        ),\n        [] as ShippableItem[]\n    );\n}\n\nfunction splitItem(\n    item: PhysicalItem,\n    consignments: Consignment[],\n    lineItemIndex: number\n): ShippableItem[] {\n    let splitItems: ShippableItem[] = [];\n    const consignment = findConsignment(consignments, item.id as string);\n\n    for (let i = 0; i < item.quantity; i++) {\n        splitItems = splitItems.concat({\n            ...item,\n            key: `${item.variantId}-${item.productId}-${lineItemIndex}-${i}`,\n            consignment,\n            quantity: 1,\n        });\n    }\n\n    return splitItems;\n}\n","import { Address, Cart, Consignment } from '@bigcommerce/checkout-sdk';\n\nimport { isEqualAddress } from '../address';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport interface UpdateItemParams {\n    updatedItemIndex: number;\n    address: Address;\n}\n\nexport default function updateShippableItems(\n    items: ShippableItem[],\n    { updatedItemIndex, address }: UpdateItemParams,\n    { cart, consignments }: { cart?: Cart; consignments?: Consignment[] }\n): ShippableItem[] | undefined {\n    if (updatedItemIndex < 0 || updatedItemIndex >= items.length || !cart) {\n        return;\n    }\n\n    const cartItemIds = cart.lineItems.physicalItems.map(({ id }) => id);\n\n    const updatedConsignment = (consignments || []).find(consignment =>\n        isEqualAddress(consignment.shippingAddress, address)\n    );\n\n    const newId = findNewItemId(items[updatedItemIndex], cart, updatedConsignment);\n\n    return items.map((item, i) => {\n        if (newId && !cartItemIds.includes(item.id) || i === updatedItemIndex) {\n            const itemId = newId ?? item.id;\n\n            return {\n                ...item,\n                id: itemId,\n                consignment: findConsignment(consignments || [], itemId as string),\n            };\n        } else {\n            return item;\n        }\n    });\n}\n\nfunction findNewItemId(item: ShippableItem, cart?: Cart, consignment?: Consignment): string | undefined {\n    if (!cart || !consignment) {\n        return;\n    }\n\n    const { physicalItems } = cart.lineItems;\n    const matchingCartItems = physicalItems.filter(\n        ({ productId, variantId }) => productId === item.productId && variantId === item.variantId\n    );\n\n    const matchingCartItemIds = matchingCartItems.map(({ id }) => id);\n\n    return consignment.lineItemIds.find(id => matchingCartItemIds.includes(id));\n}\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\n\nimport { AddressSelect } from '../address';\n\nimport ShippableItem from './ShippableItem';\n\nexport interface ItemAddressSelectProps {\n    item: ShippableItem;\n    addresses: CustomerAddress[];\n    onSelectAddress(address: Address, itemId: string, itemKey: string): void;\n    onUseNewAddress(address: Address | undefined, itemId: string, itemKey: string): void;\n}\n\nconst ItemAddressSelect: FunctionComponent<ItemAddressSelectProps> = ({\n    item: {\n        id,\n        key,\n        imageUrl,\n        quantity,\n        name,\n        options,\n        consignment,\n    },\n    addresses,\n    onSelectAddress,\n    onUseNewAddress,\n}) => {\n    const handleUseNewAddress = useCallback((address: Address) => {\n        onUseNewAddress(address, id as string, key);\n    }, [\n        id,\n        onUseNewAddress,\n        key,\n    ]);\n\n    const handleSelectAddress = useCallback((address: Address) => {\n        onSelectAddress(address, id as string, key);\n    }, [\n        id,\n        key,\n        onSelectAddress,\n    ]);\n\n    return <div className=\"consignment\">\n        <figure className=\"consignment-product-figure\">\n            { imageUrl &&\n                <img alt={ name } src={ imageUrl } /> }\n        </figure>\n\n        <div className=\"consignment-product-body\">\n            <h4 className=\"optimizedCheckout-contentPrimary\">\n                { `${quantity} x ${name}` }\n            </h4>\n\n            { (options || []).map(({ name: optionName, value, nameId }) =>\n                <ul\n                    className=\"product-options optimizedCheckout-contentSecondary\"\n                    data-test=\"consigment-item-product-options\"\n                    key={ nameId }\n                >\n                    <li className=\"product-option\">\n                        { `${optionName } ${value}` }\n                    </li>\n                </ul>\n            ) }\n\n            <AddressSelect\n                addresses={ addresses }\n                onSelectAddress={ handleSelectAddress }\n                onUseNewAddress={ handleUseNewAddress }\n                selectedAddress={ consignment && consignment.shippingAddress }\n            />\n        </div>\n    </div>;\n};\n\nexport default memo(ItemAddressSelect);\n","import React from \"react\"\n\nfunction ShippingCalendar(props: any) {\n    const className = () => {\n        return props.disabled\n        ? 'shipping-calendar-container-disabled'\n        : 'shipping-calendar-container'\n    }\n    return(\n        <div className={className()}>{props.children}</div>\n    )\n}\n\nexport default ShippingCalendar","import React from \"react\";\n\nfunction ShippingInfo(props: any) {\n    return(\n        <div className=\"shipping-info-container\">{props.children}</div>\n    )\n}\n\nexport default ShippingInfo","import React from \"react\";\n\nfunction DatesSummary(props: any) {\n    return(\n        <div className=\"dates-summary-container\">{props.children}</div>\n    )\n}\n\nexport default DatesSummary","import React from \"react\";\nimport CustomIcon from \"../CustomIcon\";\nimport IconContainer from \"../IconContainer\";\n\nconst ShippingBanner = (props: any) => {\n    const { mainMessage, mainMessageIcon, secondMessage, secondMessageIcon, className, listItems } = props\n\n    const renderIcon = (source: String) => {\n        return(\n            <IconContainer className='banner-icon-container'>\n                <CustomIcon imageSource={source} />\n            </IconContainer>\n        )\n    }\n\n    const IconsContainer =  () => {\n        return (\n            <div className=\"banner-icons-container\">\n                { mainMessageIcon && renderIcon(mainMessageIcon) }\n                { secondMessageIcon && renderIcon(secondMessageIcon) }\n            </div>\n        )\n    }\n\n    const ListItem = (item: { message: string}) => {\n        return (\n            <p className=\"banner-second-message\">{ item.message }</p>\n        )\n    }\n\n    const MessageContainer = () => {\n        return (\n            <div className=\"banner-message-container\">\n                { mainMessage && <p className=\"banner-main-message\">{ mainMessage }</p> }\n                { secondMessage && <p className=\"banner-second-message\">{ secondMessage }</p> }\n                { listItems && listItems.length > 0 && listItems.map((item: any, index: number) => <ListItem key={index} {...item} /> ) }\n            </div>\n        )\n    }\n\n    return(\n        <div className={className}>\n            { mainMessageIcon && <IconsContainer /> }\n            { mainMessage && <MessageContainer /> }\n        </div>\n    )\n}\n\nexport default ShippingBanner","import React from \"react\";\nimport CookAndShipIcon from \"../CustomIcon\";\nimport EstimatedArrivalIcon from \"../CustomIcon\";\nimport IconContainer from \"../IconContainer\";\n\nconst ShippingInfoBanner = (props: any) => {\n    const { mainMessage, secondMessage } = props\n    return(\n        <div className=\"shipping-info-banner\">\n            <div className=\"banner-icons-container\">\n                    <IconContainer className='banner-icon-container'>\n                        <CookAndShipIcon imageSource='https://res.cloudinary.com/garrett-brands/image/upload/v1665017783/Garrett-Website/2022/9-September/Checkout%20Icons/cook-date.svg' />\n                    </IconContainer>\n                    <IconContainer className='banner-icon-container'>\n                        <EstimatedArrivalIcon imageSource='https://res.cloudinary.com/garrett-brands/image/upload/v1663968753/Garrett-Website/2022/9-September/Checkout%20Icons/arrival-estimate.svg' />\n                    </IconContainer>\n                </div>\n            <div className=\"banner-message-container\">\n                <p className=\"banner-main-message\">{ mainMessage }</p>\n                <p className=\"banner-second-message\">{ secondMessage }</p>\n            </div>\n        </div>\n    )\n}\n\nexport default ShippingInfoBanner","import React, { useEffect, useState } from \"react\";\nimport { Legend, Fieldset } from \"../../../ui/form\";\nimport ShippingCalendar from \"./ShippingCalendar\";\nimport DatePicker from 'react-datepicker'\nimport ShippingInfo from \"./ShippingInfo\";\nimport DatesSummary from \"./DatesSummary\";\nimport SelectedShipDate from \"./SelectedShipDate\";\nimport ArrivalDate from \"./ArrivalDate\";\nimport ShippingBanner from \"./ShippingBanner\";\nimport ShippingInfoBanner from \"./ShippingInfoBanner\";\n\nconst ShipDate = (props: any) => {\n    \n    const {\n        cart,\n        isMultiShippingMode,\n        consignments, \n        shipDate, \n        setShipDate, \n        arrivalDate, \n        setArrivalDate,\n        isActiveCart,\n        setUnavailableItems,\n        itemsUnavailableToShip,\n        setItemsUnavailableToShip,\n    } = props\n\n    const today = new Date()\n    const todayReset = today.setHours(0,0,0,0)\n    const advanceShippingMessage = \"Ordering to enjoy at a later date? Schedule your shipping date up to 25 days in advance. Available on select items.\"\n    const shipDateMessage = 'Cook and ship date is when your order is cooked, it leaves our kitchen on the same day.'\n    const arrivalDateMessage = 'Estimated arrival date depends on the ship date and UPS shipping method chosen.'\n    const arrivalDateMessageMulti = 'Arrival date depends on the ship date, destination, and UPS shipping method chosen.'\n    const customFields = consignments[0]?.shippingAddress.customFields.length > 0\n    \n    const [address, setAddress] = useState(Object)\n    const [selectedShippingOption, setSelectedShippingOption] = useState(Object)\n    const [availableDates, setAvailableDates] = useState(new Array)\n    const [blackoutDates, setBlackoutDates] = useState(new Array)\n    const [promotionalItems, setPromotionalItems] = useState(new Array)\n    const [nextAvailableDate, setNextAvailableDate] = useState(today)\n    const [inventoryData, setInventoryData] = useState(new Array)\n\n    useEffect(() => {\n        fetchBlackoutDates()\n        fetchShipByDates()\n        fetchInventoryData()\n    }, [])\n\n    useEffect(() => {\n        setAvailableDates(getAvailableDates(today, maxDate()))\n    }, [blackoutDates])\n\n    useEffect(() => {\n        if (availableDates.length > 0) {\n            setNextAvailableDate(availableDates[0])\n        }\n    }, [availableDates])\n    \n    useEffect(() => {\n        const currentShipDate = shipDate\n        var savedShipDate\n        if (customFields && isActiveCart) {\n            savedShipDate = consignments[0].shippingAddress.customFields.find((customField: { fieldId: string; }) => customField.fieldId === 'field_30')\n            savedShipDate = new Date(savedShipDate.fieldValue)\n        }\n        savedShipDate && isAfterNextAvailable(savedShipDate) && filterDates(savedShipDate) \n        ? setShipDate(savedShipDate)\n        : ( currentShipDate.getYear() !== 69 && filterDates(currentShipDate)\n        ? setShipDate(currentShipDate)\n        : setShipDate(nextAvailableDate) )\n    }, [nextAvailableDate])\n\n    useEffect(() => {\n        if (props.consignments[0]) {\n            const { address, selectedShippingOption } = props.consignments[0]\n            setAddress(address)\n            setSelectedShippingOption(selectedShippingOption)\n        }\n    }, [props])\n\n    useEffect(() => {\n        if (Object.keys(address).length > 0 && selectedShippingOption && !isMultiShippingMode) {\n            fetchUPSEstimate()\n        }\n    }, [shipDate, address, selectedShippingOption])\n\n    useEffect(() => {\n        var itemsUnavailableToShip = new Array\n        if (promotionalItems.length > 0) {\n            promotionalItems.map(item => {\n                if (endsAfterShipDate(shipDate, item)) {\n                    itemsUnavailableToShip.push(item)\n                }\n            })\n            setItemsUnavailableToShip(itemsUnavailableToShip)\n        }\n    }, [shipDate, promotionalItems])\n\n    useEffect(() => {\n        window.scroll(0, 0)\n        const calendarDays: NodeListOf<HTMLDivElement> | null = document.querySelectorAll('.react-datepicker__day')\n        if (calendarDays instanceof NodeList) {\n            calendarDays.forEach(day => day.removeAttribute('tabIndex'))\n        }\n    }, [])\n\n    useEffect(() => {\n        var unavailableItems = new Array\n        inventoryData.map(item => {\n            if (item.quantity > item.qty_available || item.status === 'OOS') {\n                unavailableItems.push(item)\n            }\n        })\n        if (unavailableItems.length > 0) {\n            setUnavailableItems(unavailableItems)\n        }\n    }, [inventoryData.length > 0])\n\n    const getAvailableDates = (start: Date, end: Date) => {\n        var dates = new Array\n        var date = new Date(start);\n        while (date <= end) {\n            if (filterDates(date)) {\n                dates.push(new Date(date))\n            }\n            date.setDate(date.getDate() + 1)\n        }\n        return dates\n    }\n\n    const filterDates = (date: Date) => {\n        return !isToday(date) && isWeekday(date) && !isBlackoutDate(date)\n    }\n\n    const isAfterNextAvailable = (date: Date) => {\n        return date.getTime() > nextAvailableDate.getTime()\n    }\n\n    const isToday = (date: Date) => {\n        return date.getTime() === today.getTime()\n    }\n\n    const isWeekday = (date: Date) => {\n        const day = date.getDay()\n        return day !== 0 && day !== 6;\n    }\n\n    const isBlackoutDate = (date: Date) => {\n        const year = date.getFullYear()\n        const month = String(date.getMonth() + 1).padStart(2, '0')\n        const day = String(date.getDate()).padStart(2, '0')\n        const formattedDate = [year, month, day].join('-')\n        return blackoutDates.includes(formattedDate)\n    }\n\n    const endsAfterShipDate = (date: Date, item: { mustShipDate: String }) => {\n        var isAfter = false\n            const shipByDate = item.mustShipDate\n            const [day, month, year] = shipByDate.split('-')\n            const formattedDate = new Date([month, day, year].join('/'))\n            if (date.getTime() > formattedDate.getTime()) {\n                isAfter = true\n            }\n        return isAfter\n    }\n\n    const maxDate = () => {\n        const maxDate = new Date(todayReset)\n        maxDate.setDate(maxDate.getDate() + 25)\n        return maxDate\n    }\n\n    const fetchUPSEstimate = () => {\n\n        const year = shipDate.getFullYear()\n        const month = String(shipDate.getMonth() + 1).padStart(2, '0')\n        const date = String(shipDate.getDate()).padStart(2, '0')\n        const formattedDate = [year, month, date].join('')\n\n        var body = {\n            \"to\": {\n                \"city\": address.city,\n                \"state\": address.stateOrProvince,\n                \"postal_code\": address.postalCode,\n                \"country\": address.country\n            },\n            \"pickup_date\": formattedDate,\n            \"shipping_method\": selectedShippingOption.description\n        }\n        \n        var reqObj = {\n            method: 'POST',\n            headers: {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\",\n              \"x-access-key\": \"XM9xCpdv7TC1ZrzZ3ZeNYKUoCK1GHbZw\"\n            },\n            body: JSON.stringify(body)\n          }\n\n        fetch(`https://api.gbdev.cloud/v1/shipping/expected-date`, reqObj)\n        .then(resp => resp.json())\n        .then(estimate => {\n            const estimatedArrival = new Date(estimate.data.EstimatedArrival.Date.replaceAll('-', '/'))\n            setArrivalDate(estimatedArrival)\n        })\n        .catch(error => {\n            console.log('UPS ESTIMATED ARRIVAL ERROR =>', error)\n        })\n\n    }\n\n    const fetchBlackoutDates = () => {\n\n        const year = today.getFullYear()\n        const month = String(today.getMonth() + 1).padStart(2, '0')\n        const date = String(today.getDate()).padStart(2, '0')\n        const formattedDate = [date, month, year].join('-')\n\n        fetch(`https://api.gbdev.cloud/v1/ship-dates/blackout-dates?afterDate=${formattedDate}`, {\n            method: 'GET',\n            headers: {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\",\n              \"x-access-key\": \"XM9xCpdv7TC1ZrzZ3ZeNYKUoCK1GHbZw\"\n            }\n        })\n        .then(resp => resp.json())\n        .then(({results}) => {\n            const dates = results.map((result: any) => result.blackoutDate.split('-'))\n            const formattedDates = dates.map((date: string) => [date[2], date[1], date[0]].join('-'))\n            setBlackoutDates(formattedDates)\n        })\n        .catch(error => {\n            console.log('BLACKOUT DATES ERROR =>', error)\n        })\n    }\n\n    const fetchShipByDates = () => {\n\n        // PRODUCTION\n        // fetch(`https://api.gbdev.cloud/v1/ship-dates/must-ship-dates/`, reqObj)\n        fetch(`https://api-dev.gbdev.cloud/v1/ship-dates/must-ship-dates/`, {\n            method: 'GET',\n            headers: {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\",\n              \"x-access-key\": \"XM9xCpdv7TC1ZrzZ3ZeNYKUoCK1GHbZw\"\n            }\n        })\n        .then(resp => resp.json())\n        .then(({results}) => {\n            var productIds = new Array\n            var productSKUs = new Array\n            var promotionalItems = new Array\n            cart.lineItems.physicalItems.map((item: { productId: Number, sku: String }) => {\n                productIds.push(item.productId.toString())\n                productSKUs.push(item.sku)\n            })\n            results.map((item: { productSKU: String, productName: String, mustShipDate: String }) => {\n                if (productIds.includes(item.productSKU) || productSKUs.includes(item.productSKU)) {\n                    promotionalItems.push(item)\n                }\n            } )\n            setPromotionalItems(promotionalItems)\n        })\n        .catch(error => {\n            console.log('SHIP BY DATES ERROR =>', error)\n        })\n    }\n\n    const fetchInventoryData = () => {\n        var skus = new Array\n        cart.lineItems.physicalItems.map((item: {sku: String, quantity: String, name: String, options: Object}) => {\n            skus.push({\n                'sku': item.sku, \n                'quantity': item.quantity,\n                'name': item.name,\n                'options': item.options\n            })\n        })\n\n        var body = {\n            \"inventoryList\": skus\n        }\n\n        const reqObj = {\n            method: 'POST',\n            headers: {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\",\n              \"x-access-key\": \"XM9xCpdv7TC1ZrzZ3ZeNYKUoCK1GHbZw\"\n            },\n            body: JSON.stringify(body)\n          }\n\n        fetch(`https://api.gbdev.cloud/v1/client/inventory/check-quantities`, reqObj)\n        .then(resp => resp.json())\n        .then(({data}) => {\n            data.map((item: {qty_available: Number, status: String, variant_sku: string}) => {\n                skus.find(sku => {\n                    if (sku.sku === item.variant_sku) {\n                        sku.qty_available = item.qty_available\n                        sku.status = item.status\n                    }\n                })\n            })\n            setInventoryData(skus)\n        })\n        .catch(error => {\n            console.log('INVENTORY REQUEST ERROR =>', error)\n        })\n    }\n    \n    const renderUnavailableToShipMessage = (type: string) => {\n        var products = new Array\n        itemsUnavailableToShip.map((item: { productName: string, mustShipDate: any }) => {\n            const shipByDate = item.mustShipDate\n            const [day, month, year] = shipByDate.split('-')\n            const formattedShipDate = new Date([month, day, year].join('/')).toLocaleDateString('en-us', { weekday:\"short\", month:\"short\", day:\"numeric\"})\n            var productDetails = { message: `${item.productName} must ship by ${formattedShipDate}` }\n            products.push(productDetails)\n        })\n        var message = [`Selected Cook and Ship date (${shipDate.toLocaleDateString('en-us', { weekday:\"short\", month:\"short\", day:\"numeric\"})}) is not available for ${products.length} ${products.length > 1 ? 'promotional or seasonal items in your cart.': 'promotional or seasonal item in your cart.' } Please select an earlier date or choose a different item.`]\n        return type === 'main'\n        ? message\n        : products\n    }\n\n    const highlightDates = () => {\n        if (!isMultiShippingMode) {\n            return [arrivalDate]\n        }\n        else {\n            return []\n        }\n    }\n\n    return(\n        <Fieldset id='ship-date'>\n            <Legend testId=\"ship-date-form-heading\">Cooking and Shipping Date</Legend>\n                    <ShippingBanner\n                        className='advance-shipping-banner'\n                        mainMessage={advanceShippingMessage} \n                    />\n                <ShippingCalendar>\n                        <DatePicker \n                            calendarClassName=\"ship-date-calendar\"\n                            selected={shipDate}\n                            onChange={(date:Date) => setShipDate(date)}\n                            minDate={today}\n                            maxDate={maxDate()}\n                            filterDate={filterDates}\n                            highlightDates={highlightDates()}\n                            inline \n                        />\n                </ShippingCalendar>\n                    { itemsUnavailableToShip.length > 0 &&\n                        <ShippingBanner\n                            className='unavailable-date-alert-banner'\n                            mainMessage={renderUnavailableToShipMessage('main')}\n                            listItems={renderUnavailableToShipMessage('second')}/>\n                    }\n            { itemsUnavailableToShip.length === 0 &&\n                <ShippingInfo>\n                    <DatesSummary>\n                        <SelectedShipDate shipDate={shipDate} />\n                        { !isMultiShippingMode && <ArrivalDate arrivalDate={arrivalDate} /> }\n                    </DatesSummary>\n                        <ShippingInfoBanner\n                            mainMessage={shipDateMessage}\n                            secondMessage={ isMultiShippingMode ? arrivalDateMessageMulti : arrivalDateMessage}\n                        />\n                </ShippingInfo>\n            }\n        </Fieldset>\n    )\n}\n\nexport default ShipDate","import React from \"react\";\nimport { Fieldset, Legend } from \"../../../ui/form\";\nimport ShippingCalendar from \"./ShippingCalendar\";\nimport DatePicker from 'react-datepicker'\nimport ShippingBanner from \"./ShippingBanner\";\n\nconst ShipDateDisabled = () => {\n    const bannerMessage = 'Please enter a valid shipping address and phone number in order to select a ship date.'\n    return(\n        <Fieldset id='ship-date'>\n            <Legend testId=\"ship-date-form-heading\">Cooking and Shipping Date</Legend>\n                <ShippingBanner bannerMessage={bannerMessage} />\n                <ShippingCalendar disabled={true}>\n                        <DatePicker \n                            calendarClassName=\"ship-date-calendar\"\n                            onChange={() => alert(bannerMessage)}\n                            filterDate={() => false}\n                            minDate={new Date()}\n                            maxDate={new Date()}\n                            inline />\n                </ShippingCalendar>\n        </Fieldset>\n    )\n}\n\nexport default ShipDateDisabled","import React from \"react\";\n\nconst GiftOptions = (props: any) => {\n    const { className } = props\n    return(\n        <div className={className}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default GiftOptions","import React from \"react\";\nimport IconContainer from \"../IconContainer\";\nimport ExpandCircleDownRoundedIcon from '@mui/icons-material/ExpandCircleDownRounded';\nimport GiftMessageIcon from \"../CustomIcon\";\n\nconst GiftMessageCollapsed = (props: any) => {\n    const { giftMessageLength } = props\n    return(\n        <div className=\"toggle-content-container\">\n            { giftMessageLength > 0 ? <p>Gift Message Included</p> : <p>Add a Gift Message!</p> }\n                <IconContainer className='icon-container-gift-header'>\n                    <GiftMessageIcon imageSource='https://res.cloudinary.com/garrett-brands/image/upload/v1662682064/Garrett-Website/2022/2-February/Promo%20Details/gift-icon-white-cropped.png' />\n                </IconContainer>\n                <IconContainer className='icon-container-expand'>\n                    <ExpandCircleDownRoundedIcon />\n                </IconContainer>\n        </div>\n    )\n}\n\nexport default GiftMessageCollapsed","import React from \"react\";\nimport IconContainer from \"../IconContainer\";\nimport ExpandCircleDownRoundedIcon from '@mui/icons-material/ExpandCircleDownRounded';\nimport DeleteForeverRoundedIcon from '@mui/icons-material/DeleteForeverRounded';\n\nconst GiftMessageExpanded = (props: any) => {\n    const { giftMessageLength, clearGiftMessage } = props\n    return(\n        <div className=\"toggle-content-container\">\n            { giftMessageLength > 0 ? <p>Gift Message Included</p> : <p>Add a Gift Message!</p> }\n            <p className=\"gift-message-length\">{giftMessageLength} / 350</p>\n            { giftMessageLength > 0 && \n            <IconContainer className='icon-container-delete' onClick={ clearGiftMessage }>\n                <DeleteForeverRoundedIcon />\n            </IconContainer>\n            }\n            <IconContainer className='icon-container-collapse'>\n                <ExpandCircleDownRoundedIcon />\n            </IconContainer>\n        </div>\n    )\n}\n\nexport default GiftMessageExpanded","import React, { useEffect, useState } from \"react\";\nimport GiftMessageCollapsed from \"./GiftMessageCollapsed\";\nimport GiftMessageExpanded from \"./GiftMessageExpanded\";\n\nconst GiftMessageToggle = (props: any) => {\n    const { giftMessageToggle, toggleGiftMessage, giftMessageLength, clearGiftMessage } = props\n    const [className, setClassName] = useState(String)\n\n    useEffect(() => {\n        setClassName(() => {\n            return giftMessageToggle\n            ? 'toggle-gift-message-collapse'\n            : 'toggle-gift-message-expand'\n        })\n    }, [giftMessageToggle])\n\n    return(\n        <div className={className} onClick={toggleGiftMessage}>\n            { giftMessageToggle \n            ? <GiftMessageExpanded \n                giftMessageLength={ giftMessageLength } \n                clearGiftMessage={ clearGiftMessage } />\n            : <GiftMessageCollapsed \n                giftMessageLength={ giftMessageLength } /> }\n        </div>\n    )\n}\n\nexport default GiftMessageToggle","import React from \"react\";\nimport IconContainer from \"../IconContainer\";\nimport GiftMessageIcon from \"../CustomIcon\";\n\nconst GiftMessageForm = (props: any) => {\n    const { giftMessage, setGiftMessage } = props\n    const maxLength = 350\n    const maxRows = 10\n    const placeholder = \"Include up to 350 characters and 10 lines, please do not use emojis or special characters. Don't forget to sign your name!\"\n    \n    const renderGiftMessage = () => {\n        if (giftMessage.length > 0) {\n            return giftMessage\n        }\n    }\n\n    return(\n        <>\n            <IconContainer className='icon-container-gift-form'>\n               <GiftMessageIcon imageSource='https://res.cloudinary.com/garrett-brands/image/upload/v1662682064/Garrett-Website/2022/2-February/Promo%20Details/gift-icon-gold-cropped.png' />\n            </IconContainer>\n            <textarea\n                className=\"gift-message-input\" \n                maxLength={maxLength} \n                rows={maxRows} \n                placeholder={placeholder} \n                onChange={event => setGiftMessage(event.target.value)}\n                defaultValue={renderGiftMessage()}>\n            </textarea>\n        </>\n    )\n}\n\nexport default GiftMessageForm","import React, { useEffect, useState } from \"react\";\nimport { Fieldset, Legend } from \"../../../ui/form\";\nimport GiftOptions from \"./GiftOptions\";\nimport GiftMessageToggle from \"./GiftMessageToggle\";\nimport GiftMessageForm from \"./GiftMessageForm\";\n\nconst GiftMessage = (props: any) => {\n\n    const {\n        consignments, \n        giftMessage, \n        setGiftMessage,\n        isActiveCart\n     } = props\n\n    const customFields = consignments[0]?.shippingAddress.customFields.length > 0\n    const [giftMessageToggle, setGiftMessageToggle] = useState(false)\n\n    useEffect(() => {\n        var savedGiftMessage\n        if (customFields && isActiveCart) {\n            savedGiftMessage = consignments[0].shippingAddress.customFields.find((customField: { fieldId: string, fieldValue: string }) => customField.fieldId === 'field_32')\n            savedGiftMessage = savedGiftMessage.fieldValue\n            setGiftMessage(savedGiftMessage)\n            setGiftMessageToggle(savedGiftMessage.length > 0)\n        }\n    }, [])\n    \n    // useEffect(() => {\n    //     setGiftMessageToggle(giftMessage.length > 0)\n    // }, [])\n\n    const handleToggle = () => {\n        setGiftMessageToggle(!giftMessageToggle)\n    }\n\n    const handleClear = () => {\n        setGiftMessage('')\n        setGiftMessageToggle(true)\n    }\n\n    return(\n        <Fieldset id='gift-message'>\n            <Legend testId=\"gift-message-form-heading\"><span>Gift Options</span></Legend>\n            <GiftOptions className='gift-options-container'>\n                <GiftMessageToggle \n                    toggleGiftMessage={ handleToggle } \n                    giftMessageToggle={ giftMessageToggle }\n                    giftMessageLength={ giftMessage.length }\n                    clearGiftMessage={ handleClear } />\n\n                { giftMessageToggle && \n                <GiftMessageForm \n                    setGiftMessage={ setGiftMessage }\n                    giftMessage={ giftMessage } /> }\n            </GiftOptions>\n        </Fieldset>\n    )\n}\n\nexport default GiftMessage","import React from \"react\";\nimport { Fieldset, Legend } from \"../../../ui/form\";\nimport GiftOptions from \"./GiftOptions\";\nimport AddGiftMessage from \"./GiftMessageCollapsed\";\n\nconst GiftMessageDisabled = () => {\n    return(\n        <Fieldset id='gift-message'>\n            <Legend testId=\"gift-message-form-heading\"><span>Gift Options</span></Legend>\n            <GiftOptions>\n                <div className='toggle-gift-message-expand-disabled'>\n                    <AddGiftMessage />\n                </div>\n            </GiftOptions>\n        </Fieldset>\n    )\n}\n\nexport default GiftMessageDisabled","import { ShippingOption } from '@bigcommerce/checkout-sdk';\n\nexport default function getRecommendedShippingOption(availableShippingOptions: ShippingOption[]): ShippingOption | undefined {\n    if (!availableShippingOptions) {\n        return;\n    }\n\n    return availableShippingOptions.find(({ isRecommended }: { isRecommended: any }) => isRecommended);\n}\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\n\nimport { EMPTY_ARRAY } from '../../common/utility';\nimport { Checklist, ChecklistItem } from '../../ui/form';\nimport { LoadingOverlay } from '../../ui/loading';\n\nimport StaticShippingOption from './StaticShippingOption';\n\ninterface ShippingOptionListItemProps {\n    consignmentId: string;\n    shippingOption: ShippingOption;\n}\n\nconst ShippingOptionListItem: FunctionComponent<ShippingOptionListItemProps> = ({\n    consignmentId,\n    shippingOption,\n}) => {\n    const renderLabel = useCallback(() => (\n        <div className=\"shippingOptionLabel\">\n            <StaticShippingOption displayAdditionalInformation={ true } method={ shippingOption } />\n        </div>\n    ), [shippingOption]);\n\n    return <ChecklistItem\n        htmlId={ `shippingOptionRadio-${consignmentId}-${shippingOption.id}` }\n        label={ renderLabel }\n        value={ shippingOption.id }\n    />;\n};\n\nexport interface ShippingOptionListProps {\n    consignmentId: string;\n    inputName: string;\n    isLoading: boolean;\n    selectedShippingOptionId?: string;\n    shippingOptions?: ShippingOption[];\n    onSelectedOption(consignmentId: string, shippingOptionId: string): void;\n}\n\nconst ShippingOptionsList: FunctionComponent<ShippingOptionListProps> = ({\n    consignmentId,\n    inputName,\n    isLoading,\n    shippingOptions = EMPTY_ARRAY,\n    selectedShippingOptionId,\n    onSelectedOption,\n }) => {\n    const handleSelect = useCallback((value: string) => {\n        onSelectedOption(consignmentId, value);\n    }, [\n        consignmentId,\n        onSelectedOption,\n    ]);\n\n    if (!shippingOptions.length) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay isLoading={ isLoading }>\n            <Checklist\n                aria-live=\"polite\"\n                defaultSelectedItemId={ selectedShippingOptionId }\n                name={ inputName }\n                onSelect={ handleSelect }\n            >\n                { shippingOptions.map(shippingOption => (\n                    <ShippingOptionListItem\n                        consignmentId={ consignmentId }\n                        key={ shippingOption.id }\n                        shippingOption={ shippingOption }\n                    />\n                )) }\n            </Checklist>\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(ShippingOptionsList);\n","import { CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { StaticAddress } from '../../address';\nimport { TranslatedString } from '../../locale';\nimport { LoadingOverlay } from '../../ui/loading';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport StaticConsignmentItemList from '../StaticConsignmentItemList';\n\nimport { ShippingOptionsProps, WithCheckoutShippingOptionsProps } from './ShippingOptions';\nimport './ShippingOptionsForm.scss';\nimport ShippingOptionsList from './ShippingOptionsList';\n\nexport type ShippingOptionsFormProps = ShippingOptionsProps & WithCheckoutShippingOptionsProps;\n\nclass ShippingOptionsForm extends PureComponent<ShippingOptionsFormProps & FormikProps<ShippingOptionsFormValues>> {\n    private unsubscribe?: () => void;\n\n    componentDidMount(): void {\n        const { subscribeToConsignments } = this.props;\n        this.unsubscribe = subscribeToConsignments(this.selectDefaultShippingOptions);\n    }\n\n    componentWillUnmount(): void {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n            this.unsubscribe = undefined;\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            consignments,\n            isMultiShippingMode,\n            selectShippingOption,\n            isLoading,\n            shouldShowShippingOptions,\n            invalidShippingMessage,\n            methodId,\n        } = this.props;\n\n        if (!consignments ||\n            !consignments.length ||\n            !shouldShowShippingOptions\n        ) {\n            return (\n                <LoadingOverlay isLoading={ isLoading() }>\n                    { this.renderNoShippingOptions(\n                        <TranslatedString\n                            id={ methodId || isMultiShippingMode ?\n                                'shipping.select_shipping_address_text' :\n                                'shipping.enter_shipping_address_text' }\n                        />\n                    ) }\n                </LoadingOverlay>\n            );\n        }\n\n        return <>\n            { consignments\n                .map(consignment => (\n                <div className=\"shippingOptions-container form-fieldset\" key={ consignment.id }>\n                        { isMultiShippingMode && this.renderConsignment(consignment) }\n\n                        <ShippingOptionsList\n                            consignmentId={ consignment.id }\n                            inputName={ getRadioInputName(consignment.id) }\n                            isLoading={ isLoading(consignment.id) }\n                            onSelectedOption={ selectShippingOption }\n                            selectedShippingOptionId={ consignment.selectedShippingOption && consignment.selectedShippingOption.id }\n                            shippingOptions={ consignment.availableShippingOptions }\n                        />\n\n                        { (!consignment.availableShippingOptions || !consignment.availableShippingOptions.length) &&\n                            <LoadingOverlay hideContentWhenLoading isLoading={ isLoading(consignment.id) }>\n                                { this.renderNoShippingOptions(invalidShippingMessage) }\n                            </LoadingOverlay> }\n\n                    </div>\n                )) }\n        </>;\n    }\n\n    private selectDefaultShippingOptions: (state: CheckoutSelectors) => void = async ({ data }) => {\n        const { selectShippingOption, setFieldValue } = this.props;\n\n        const consignment = (data.getConsignments() || []).find(({\n            selectedShippingOption,\n            availableShippingOptions: shippingOptions,\n        }) => !selectedShippingOption && shippingOptions);\n\n        if (!consignment || !consignment.availableShippingOptions) {\n            return;\n        }\n\n        const { availableShippingOptions, id } = consignment;\n        const recommendedOption = getRecommendedShippingOption(availableShippingOptions);\n        const singleShippingOption = availableShippingOptions.length === 1 && availableShippingOptions[0];\n        const defaultShippingOption = recommendedOption || singleShippingOption;\n\n        if (!defaultShippingOption) {\n            return;\n        }\n\n        await selectShippingOption(id, defaultShippingOption.id);\n        setFieldValue(`shippingOptionIds.${id}`, defaultShippingOption.id);\n    };\n\n    private renderNoShippingOptions(message: ReactNode): ReactNode {\n        return (\n            <div className=\"shippingOptions-panel optimizedCheckout-overlay\">\n                <p className=\"shippingOptions-panel-message optimizedCheckout-primaryContent\">\n                    { message }\n                </p>\n            </div>\n        );\n    }\n\n    private renderConsignment(consignment: Consignment): ReactNode {\n        const { cart } = this.props;\n\n        return (\n            <div className=\"staticConsignment\">\n                <strong>\n                    <TranslatedString id=\"shipping.shipping_address_heading\" />\n                </strong>\n\n                <StaticAddress address={ consignment.shippingAddress } />\n\n                <StaticConsignmentItemList\n                    cart={ cart }\n                    consignment={ consignment }\n                />\n            </div>\n        );\n    }\n}\n\nfunction getRadioInputName(consignmentId: string): string {\n    return `shippingOptionIds.${consignmentId}`;\n}\n\nexport interface ShippingOptionsFormValues {\n    shippingOptionIds: {\n        [shippingOptionIds: string]: string;\n    };\n}\n\nexport default withFormik<ShippingOptionsFormProps, ShippingOptionsFormValues>({\n    handleSubmit: noop,\n    mapPropsToValues({ consignments }) {\n        const shippingOptionIds: { [id: string]: string } = {};\n\n        (consignments || []).forEach(consignment => {\n            shippingOptionIds[consignment.id] = consignment.selectedShippingOption ?\n                consignment.selectedShippingOption.id :\n                '';\n        });\n\n        return { shippingOptionIds };\n    },\n})(ShippingOptionsForm);\n","import { Cart, CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { map, sortBy, uniq } from 'lodash';\nimport { createSelector } from 'reselect';\n\nimport { withCheckout, CheckoutContextProps } from '../../checkout';\nimport getShippableLineItems from '../getShippableLineItems';\nimport getShippingMethodId from '../getShippingMethodId';\n\nimport ShippingOptionsForm from './ShippingOptionsForm';\n\nexport interface ShippingOptionsProps {\n    isMultiShippingMode: boolean;\n    isUpdatingAddress?: boolean;\n    shouldShowShippingOptions: boolean;\n}\n\nexport interface WithCheckoutShippingOptionsProps {\n    invalidShippingMessage: string;\n    methodId?: string;\n    consignments?: Consignment[];\n    cart: Cart;\n    isSelectingShippingOption(consignmentId?: string): boolean;\n    subscribeToConsignments(subscriber: (state: CheckoutSelectors) => void): () => void;\n    selectShippingOption(consignmentId: string, optionId: string): Promise<CheckoutSelectors>;\n    isLoading(consignmentId?: string): boolean;\n}\n\nconst subscribeToConsignmentsSelector = createSelector(\n    ({ checkoutService }: CheckoutContextProps) => checkoutService.subscribe,\n    subscribe => (subscriber: (state: CheckoutSelectors) => void) => {\n        return subscribe(subscriber, ({ data }) => data.getConsignments());\n    }\n);\n\nconst isLoadingSelector = createSelector(\n    (_: CheckoutSelectors, { isUpdatingAddress }: ShippingOptionsProps) => isUpdatingAddress,\n    ({ statuses }: CheckoutSelectors) => statuses.isLoadingShippingOptions,\n    ({ statuses }: CheckoutSelectors) => statuses.isSelectingShippingOption,\n    ({ statuses }: CheckoutSelectors) => statuses.isUpdatingConsignment,\n    ({ statuses }: CheckoutSelectors) => statuses.isCreatingConsignments,\n    (isUpdatingAddress, isLoadingShippingOptions, isSelectingShippingOption, isUpdatingConsignment, isCreatingConsignments) => {\n        return (consignmentId?: string) => {\n            return (\n                isUpdatingAddress ||\n                isLoadingShippingOptions() ||\n                isSelectingShippingOption(consignmentId) ||\n                isUpdatingConsignment(consignmentId) ||\n                isCreatingConsignments()\n            );\n        };\n    }\n);\n\nconst sortConsignments = (cart: Cart, unsortedConsignments: Consignment[]): Consignment[] => {\n    if (unsortedConsignments.length < 2) {\n        return unsortedConsignments;\n    }\n    const shippableItems = getShippableLineItems(cart, unsortedConsignments);\n    const consignmentsOrder = uniq(map(shippableItems, 'consignment.id'));\n\n    return sortBy(unsortedConsignments, consignment => consignmentsOrder.indexOf(consignment.id));\n};\n\nexport function mapToShippingOptions(\n    { checkoutService, checkoutState }: CheckoutContextProps,\n    props: ShippingOptionsProps\n): WithCheckoutShippingOptionsProps | null {\n    const {\n        data: {\n            getCart,\n            getConsignments,\n            getConfig,\n            getCustomer,\n            getCheckout,\n        },\n        statuses: {\n            isSelectingShippingOption,\n        },\n    } = checkoutState;\n\n    const customer = getCustomer();\n    const cart = getCart();\n    const config = getConfig();\n    const checkout = getCheckout();\n\n    if (!config || !checkout || !customer || !cart) {\n        return null;\n    }\n\n    const consignments = sortConsignments(cart, getConsignments() ||  []);\n    const methodId = getShippingMethodId(checkout);\n    const { shippingQuoteFailedMessage } = config.checkoutSettings;\n\n    return {\n        cart,\n        consignments,\n        invalidShippingMessage: shippingQuoteFailedMessage,\n        isLoading: isLoadingSelector(checkoutState, props),\n        isSelectingShippingOption,\n        methodId,\n        selectShippingOption: checkoutService.selectConsignmentShippingOption,\n        subscribeToConsignments: subscribeToConsignmentsSelector({ checkoutService, checkoutState }),\n    };\n}\n\nexport default withCheckout(mapToShippingOptions)(ShippingOptionsForm);\n","import React from \"react\";\n\nconst GiftMessageDestination = (props: any) => {\n    const { shippingAddress } = props\n    \n    const renderRecipient = () =>{\n        if (shippingAddress.firstName && shippingAddress.lastName) {\n            return <p className=\"gift-message-recipient\">{shippingAddress.firstName} {shippingAddress.lastName}</p>\n        }\n    }\n\n    const renderShippingAddress = () => {\n        if (shippingAddress) {\n            return <p className=\"gift-message-address\">{shippingAddress.address1} {shippingAddress.address2} {shippingAddress.city}, {shippingAddress.stateOrProvinceCode} {shippingAddress.countryCode} {shippingAddress.postalCode}</p>\n        }\n    }\n\n    const renderRecipientCompany = () => {\n        if (shippingAddress.company) {\n            return <p className=\"gift-message-recipient-company\">{shippingAddress.company}</p>\n        }\n    }\n    \n    return(\n        <div className=\"gift-message-destination-container\">\n            {renderRecipient()}\n            {renderRecipientCompany()}\n            {renderShippingAddress()}\n        </div>\n    )\n}\n\nexport default GiftMessageDestination","import React, { useEffect, useState } from \"react\";\n// import { Fieldset, Legend } from \"../../../ui/form\";\nimport GiftOptions from \"./GiftOptions\";\nimport GiftMessageToggle from \"./GiftMessageToggle\";\nimport GiftMessageForm from \"./GiftMessageForm\";\nimport GiftMessageDestination from \"./GiftMessageDestination\";\n\nconst GiftMessageMulti = (props: any) => {\n\n    const {\n        consignment,\n        giftMessages,\n        setGiftMessages,\n        isActiveCart\n     } = props\n\n    const [giftMessageToggle, setGiftMessageToggle] = useState(false)\n    const [giftMessage, setGiftMessage] = useState('')\n\n    // useEffect(() => {\n    //     var savedGiftMessage\n    //     if (customFields && isActiveCart) {\n    //         savedGiftMessage = consignment.shippingAddress.customFields.find((customField: { fieldId: string, fieldValue: string }) => customField.fieldId === 'field_32')\n    //         if (savedGiftMessage) {\n    //             savedGiftMessage = savedGiftMessage.fieldValue\n    //             setGiftMessage(savedGiftMessage)\n    //         }\n    //     }\n    // }, [])\n\n    useEffect(() => {\n        giftMessages.map((item: any) => {\n            if (item.consignmentId === consignment.id && isActiveCart) {\n                setGiftMessage(item.giftMessage)\n                setGiftMessageToggle(item.giftMessage.length > 0)\n            }\n        })\n    }, [])\n\n    useEffect(() => {\n        setGiftMessages({\n            consignmentId: consignment.id,\n            giftMessage: giftMessage\n        })\n    }, [giftMessage])\n    \n    // useEffect(() => {\n    //     setGiftMessageToggle(giftMessage.length > 0)\n    // }, [])\n\n    const handleToggle = () => {\n        setGiftMessageToggle(!giftMessageToggle)\n    }\n\n    const handleClear = () => {\n        setGiftMessage('')\n        setGiftMessageToggle(true)\n    }\n\n    return(\n        <GiftOptions className='gift-options-multi-container'>\n            <GiftMessageDestination shippingAddress={ consignment.shippingAddress } />\n            <GiftMessageToggle \n                toggleGiftMessage={ handleToggle }\n                giftMessageToggle={ giftMessageToggle }\n                giftMessageLength={ giftMessage.length }\n                clearGiftMessage={ handleClear } />\n            { giftMessageToggle &&\n            <GiftMessageForm\n                setGiftMessage={ setGiftMessage }\n                giftMessage={ giftMessage } /> }\n        </GiftOptions>\n    )\n}\n\nexport default GiftMessageMulti","import React, { PureComponent, ReactNode } from 'react';\nimport { Consignment, Cart } from '@bigcommerce/checkout-sdk';\n\nimport { TranslatedString } from '../locale';\nimport { OrderComments } from '../orderComments';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Legend } from '../ui/form';\nimport ShipDate from './customComponents/shipDate/ShipDate';\nimport ShipDateDisabled from './customComponents/shipDate/ShipDateDisabled';\nimport GiftMessage from './customComponents/giftOptions/GiftMessage';\nimport GiftMessageDisabled from './customComponents/giftOptions/GiftMessageDisabled';\nimport ShippingBanner from './customComponents/shipDate/ShippingBanner';\n\nimport { ShippingOptions } from './shippingOption';\nimport GiftMessageMulti from './customComponents/giftOptions/GiftMessageMulti';\n\nexport interface ShippingFormFooterProps {\n    cart: Cart;\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    shouldShowOrderComments: boolean;\n    shouldShowShippingOptions?: boolean;\n    shouldDisableSubmit: boolean;\n    isLoading: boolean;\n    consignments: Consignment[];\n    shipDate: Date;\n    setShipDate: Function;\n    arrivalDate: Date;\n    setArrivalDate: Function;\n    giftMessage: String;\n    setGiftMessage: Function;\n    giftMessages: Array<any>;\n    setGiftMessages: Function;\n}\n\ninterface ShippingFormFooterState {\n    unavailableItems: Array<any>;\n    itemsUnavailableToShip: Array<any>;\n}\n\nclass ShippingFormFooter extends PureComponent<ShippingFormFooterProps, ShippingFormFooterState> {\n    constructor(props: ShippingFormFooterProps) {\n        super(props);\n        this.state = {\n            unavailableItems: [],\n            itemsUnavailableToShip: []\n        };\n    }\n\n    render(): ReactNode {\n        const {\n            cart,\n            cartHasChanged,\n            isMultiShippingMode,\n            shouldShowOrderComments,\n            shouldShowShippingOptions = true,\n            shouldDisableSubmit,\n            isLoading,\n            consignments,\n            shipDate,\n            setShipDate,\n            arrivalDate,\n            setArrivalDate,\n            giftMessage,\n            setGiftMessage,\n        } = this.props;\n\n        if (cart && consignments[0]) {\n            var isActiveCart\n            var savedCartID\n            savedCartID = consignments[0].shippingAddress.customFields.find((customField: { fieldId: string; }) => customField.fieldId === 'field_36')\n            isActiveCart = cart.id === savedCartID?.fieldValue\n        }\n\n        const { unavailableItems, itemsUnavailableToShip } = this.state;\n\n        const setUnavailableItems = (unavailableItems: Array<any>) => {\n            this.setState({unavailableItems: unavailableItems})\n        }\n\n        const setItemsUnavailableToShip = (unavailableItems: Array<any>) => {\n            this.setState({itemsUnavailableToShip: unavailableItems})\n        }\n\n        const renderItemAvailabilityMessage = (type: string) => {\n            var message = ['no longer available. Please update your cart to complete checkout.']\n            var products = new Array\n            unavailableItems.map((item: { name: string, options: any }) => {\n                var options = new Array\n                if (item.options.length > 0) {\n                    item.options.map((option: any) => options.push(option.value))\n                }\n                options.unshift(item.name)\n                var productDetails = { message: options.join(' - ') }\n                products.push(productDetails)\n            })\n            message.unshift(products.length > 1 ? ' products are ' : ' product is ')\n            message.unshift(products.length.toString())\n            return type === 'main'\n            ? message\n            : products\n        }\n\n        return <>\n            <Fieldset\n                id=\"checkout-shipping-options\"\n                legend={\n                    <>\n                        <Legend>\n                            <TranslatedString id=\"shipping.shipping_method_label\" />\n                        </Legend>\n\n                        { cartHasChanged &&\n                            <Alert type={ AlertType.Error }>\n                                <strong>\n                                    <TranslatedString id=\"shipping.cart_change_error\" />\n                                </strong>\n                            </Alert> }\n                    </>\n                }\n            >\n                <ShippingOptions\n                    isMultiShippingMode={ isMultiShippingMode }\n                    isUpdatingAddress={ isLoading }\n                    shouldShowShippingOptions={ shouldShowShippingOptions }\n                />\n            </Fieldset>\n\n            { shouldShowShippingOptions && unavailableItems.length === 0\n            ?   <ShipDate\n                    cart={ cart }\n                    isMultiShippingMode={ isMultiShippingMode }\n                    consignments={ consignments }\n                    shipDate={ shipDate }\n                    setShipDate={ setShipDate }\n                    arrivalDate={ arrivalDate }\n                    setArrivalDate={ setArrivalDate }\n                    isActiveCart={ isActiveCart }\n                    itemsUnavailableToShip={ itemsUnavailableToShip }\n                    setItemsUnavailableToShip={ setItemsUnavailableToShip }\n                    unavailableItems={ unavailableItems }\n                    setUnavailableItems={ setUnavailableItems } /> \n            : <ShipDateDisabled /> }\n\n            { unavailableItems.length > 0 &&\n                <ShippingBanner\n                    className='unavailable-items-alert-banner'\n                    mainMessage={renderItemAvailabilityMessage('main')}\n                    listItems={renderItemAvailabilityMessage('second')} />\n            }\n\n            { shouldShowShippingOptions \n            && unavailableItems.length === 0 \n            && itemsUnavailableToShip.length === 0\n            && !isMultiShippingMode\n            ?   <GiftMessage\n                    consignments={ consignments }\n                    giftMessage={ giftMessage }\n                    setGiftMessage={ setGiftMessage }\n                    isActiveCart={ isActiveCart } />\n            : ( isMultiShippingMode\n            ? <>\n                <Fieldset id='gift-message'>\n                    <Legend testId=\"gift-message-form-heading\"><span>Gift Options</span></Legend>\n                </Fieldset>\n                    {consignments.map((consignment, index) => this.renderGiftMessageMulti(consignment, index))}\n              </>\n            : <GiftMessageDisabled /> ) }\n\n            { shouldShowOrderComments &&\n                <OrderComments /> }\n\n            <div className=\"form-actions\">\n                <Button\n                    disabled={ shouldDisableSubmit || unavailableItems.length > 0 || itemsUnavailableToShip.length > 0 }\n                    id=\"checkout-shipping-continue\"\n                    isLoading={ isLoading }\n                    type=\"submit\"\n                    variant={ ButtonVariant.Primary }\n                >\n                    <TranslatedString id=\"common.continue_action\" />\n                </Button>\n            </div>\n        </>;\n    }\n\n    private renderGiftMessageMulti(consignment: Consignment, index: number): ReactNode {\n        const { \n            cart,\n            giftMessages,\n            setGiftMessages\n        } = this.props;\n\n        if (cart && consignment) {\n            var isActiveCart\n            var savedCartID\n            savedCartID = consignment.shippingAddress.customFields.find((customField: { fieldId: string; }) => customField.fieldId === 'field_36')\n            isActiveCart = cart.id === savedCartID?.fieldValue\n        }\n\n        return (\n            <GiftMessageMulti\n                key={index}\n                consignment={ consignment }\n                isActiveCart={ isActiveCart }\n                giftMessages={ giftMessages }\n                setGiftMessages={ setGiftMessages } />\n        );\n    }\n}\n\nexport default ShippingFormFooter;\n","import { Address, AddressRequestBody, Cart, CheckoutSelectors, CheckoutStoreSelector, Consignment, ConsignmentAssignmentRequestBody, Country, CustomerAddress, FormField } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport React, { Fragment, PureComponent, ReactNode } from 'react';\n\nimport { isValidAddress, mapAddressFromFormValues, AddressFormModal, AddressFormValues } from '../address';\nimport { preventDefault } from '../common/dom';\nimport { ErrorModal } from '../common/error';\nimport { withLanguage, TranslatedLink, TranslatedString, WithLanguageProps } from '../locale';\nimport { Form } from '../ui/form';\n\nimport { AssignItemFailedError, AssignItemInvalidAddressError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippableLineItems from './getShippableLineItems';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport hasUnassignedLineItems from './hasUnassignedLineItems';\nimport updateShippableItems from './updateShippableItems';\nimport ItemAddressSelect from './ItemAddressSelect';\nimport ShippableItem from './ShippableItem';\nimport ShippingFormFooter from './ShippingFormFooter';\n\nexport interface MultiShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    customerMessage: string;\n    isGuest: boolean;\n    isLoading: boolean;\n    shouldShowOrderComments: boolean;\n    defaultCountryCode?: string;\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    shouldShowAddAddressInCheckout: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    onCreateAccount(): void;\n    createCustomerAddress(address: AddressRequestBody): void;\n    onSignIn(): void;\n    getFields(countryCode?: string): FormField[];\n    onSubmit(values: MultiShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n    shipDate: Date;\n    setShipDate: Function;\n    arrivalDate: Date;\n    setArrivalDate: Function;\n    giftMessages: Array<any>;\n    setGiftMessages: Function;\n    loadGiftMessages: Function;\n}\n\ninterface ShippableItemId {\n    key: string;\n    itemId: string;\n}\n\nexport interface MultiShippingFormState {\n    items: ShippableItem[];\n    itemAddingAddress?: ShippableItemId;\n    createCustomerAddressError?: Error;\n}\n\nclass MultiShippingForm extends PureComponent<MultiShippingFormProps & WithLanguageProps & FormikProps<MultiShippingFormValues>, MultiShippingFormState> {\n    static getDerivedStateFromProps(\n        { cart, consignments }: MultiShippingFormProps,\n        state: MultiShippingFormState\n    ) {\n        if (!state || !state.items || getShippableItemsCount(cart) !== state.items.length) {\n            return { items: getShippableLineItems(cart, consignments) };\n        }\n\n        return null;\n    }\n\n    state: MultiShippingFormState = { items: [] };\n\n    render(): ReactNode {\n        const {\n            addresses,\n            consignments,\n            cart,\n            isGuest,\n            onSignIn,\n            onCreateAccount,\n            cartHasChanged,\n            shouldShowOrderComments,\n            isLoading,\n            getFields,\n            defaultCountryCode,\n            countries,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n            shipDate,\n            setShipDate,\n            arrivalDate,\n            setArrivalDate,\n            giftMessages,\n            setGiftMessages,\n        } = this.props;\n\n        const { items, itemAddingAddress, createCustomerAddressError } = this.state;\n\n        const giftMessage = ''\n\n        const setGiftMessage = (giftMessage: String) => {\n            console.log('Multiship - Gift Message Set =>', giftMessage)\n        }\n\n        if (isGuest) {\n            return (\n                <div className=\"checkout-step-info\">\n                    <TranslatedString id=\"shipping.multishipping_guest_intro\" />\n                    { ' ' }\n                    <a data-test=\"shipping-sign-in-link\" href=\"#\" onClick={ preventDefault(onSignIn) }>\n                        <TranslatedString id=\"shipping.multishipping_guest_sign_in\" />\n                    </a>\n                    { ' ' }\n                    <TranslatedLink\n                        id=\"shipping.multishipping_guest_create\"\n                        onClick={ onCreateAccount }\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <Fragment>\n                <ErrorModal\n                    error={ createCustomerAddressError }\n                    message={\n                        <>\n                            <TranslatedString id=\"address.consignment_address_updated_text\" />\n                            { ' ' }\n                            <TranslatedString id=\"customer.create_address_error\" />\n                        </>\n                    }\n                    onClose={ this.handleCloseErrorModal }\n                    shouldShowErrorCode={ false }\n                />\n                { <AddressFormModal\n                    countries={ countries }\n                    countriesWithAutocomplete={ countriesWithAutocomplete }\n                    defaultCountryCode={ defaultCountryCode }\n                    getFields={ getFields }\n                    googleMapsApiKey={ googleMapsApiKey }\n                    isLoading={ isLoading }\n                    isOpen={ !!itemAddingAddress }\n                    onRequestClose={ this.handleCloseAddAddressForm }\n                    onSaveAddress={ this.handleSaveAddress }\n                /> }\n\n                <Form>\n                    <ul className=\"consignmentList\">\n                        { items.map(item => (\n                            <li key={ item.key }>\n                                <ItemAddressSelect\n                                    addresses={ addresses }\n                                    item={ item }\n                                    onSelectAddress={ this.handleSelectAddress }\n                                    onUseNewAddress={ this.handleUseNewAddress }\n                                />\n                            </li>\n                        )) }\n                    </ul>\n\n                    <ShippingFormFooter\n                        cart={ cart }\n                        cartHasChanged={ cartHasChanged }\n                        isLoading={ isLoading }\n                        isMultiShippingMode={ true }\n                        shouldDisableSubmit={ this.shouldDisableSubmit() }\n                        shouldShowOrderComments={ shouldShowOrderComments }\n                        shouldShowShippingOptions={ !hasUnassignedLineItems(consignments, cart.lineItems) }\n                        consignments={ consignments }\n                        shipDate={ shipDate }\n                        setShipDate={ setShipDate }\n                        arrivalDate={ arrivalDate }\n                        setArrivalDate={ setArrivalDate }\n                        giftMessage={ giftMessage }\n                        setGiftMessage={ setGiftMessage }\n                        giftMessages={ giftMessages }\n                        setGiftMessages={ setGiftMessages }\n                    />\n                </Form>\n            </Fragment>\n        );\n    }\n\n    private handleCloseErrorModal: () => void = () => {\n        this.setState({ createCustomerAddressError: undefined });\n    };\n\n    private handleSaveAddress: (address: AddressFormValues) => void = async address => {\n        const { createCustomerAddress } = this.props;\n        const { itemAddingAddress } = this.state;\n\n        if (!itemAddingAddress) {\n            return;\n        }\n\n        const shippingAddress = mapAddressFromFormValues(address);\n\n        await this.handleSelectAddress(shippingAddress, itemAddingAddress.itemId, itemAddingAddress.key);\n\n        try {\n            await createCustomerAddress(shippingAddress);\n        } catch (e) {\n            this.setState({ createCustomerAddressError: e });\n        }\n\n        this.setState({\n            itemAddingAddress: undefined,\n        });\n    };\n\n    private handleUseNewAddress: (address: Address, itemId: string, itemKey: string) => void = (address, itemId, itemKey) => {\n        const { onUseNewAddress, shouldShowAddAddressInCheckout, loadGiftMessages } = this.props;\n\n        if (!shouldShowAddAddressInCheckout) {\n            onUseNewAddress(address, itemId);\n            loadGiftMessages()\n            return;\n        }\n\n        this.setState({\n            itemAddingAddress: {\n                key: itemKey,\n                itemId,\n            },\n        });\n    };\n\n    private handleCloseAddAddressForm: () => void = () => {\n        this.setState({\n            itemAddingAddress: undefined,\n        });\n    };\n\n    private handleSelectAddress: (address: Address, itemId: string, itemKey: string) => Promise<void> = async (address, itemId, itemKey) => {\n        const {\n            assignItem,\n            onUnhandledError,\n            getFields,\n            loadGiftMessages\n        } = this.props;\n\n        if (!isValidAddress(address, getFields(address.countryCode))) {\n            return onUnhandledError(new AssignItemInvalidAddressError());\n        }\n\n        try {\n            const { data } = await assignItem({\n                address,\n                lineItems: [{\n                    itemId,\n                    quantity: 1,\n                }],\n            });\n\n            this.syncItems(itemKey, address, data);\n            loadGiftMessages()\n        } catch (e) {\n            onUnhandledError(new AssignItemFailedError(e));\n        }\n    };\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments } = this.props;\n\n        return isLoading || !hasSelectedShippingOptions(consignments);\n    };\n\n    private syncItems: (\n        key: string,\n        address: Address,\n        data: CheckoutStoreSelector\n    ) => void = (key, address, data) => {\n        const { items: currentItems } = this.state;\n        const items = updateShippableItems(\n            currentItems,\n            {\n                updatedItemIndex: currentItems.findIndex(item => item.key === key),\n                address,\n            },\n            {\n                cart: data.getCart(),\n                consignments: data.getConsignments(),\n            }\n        );\n\n        if (items) {\n            this.setState({ items });\n        }\n    };\n}\n\nexport interface MultiShippingFormValues {\n    orderComment: string;\n}\n\nexport default withLanguage(withFormik<MultiShippingFormProps & WithLanguageProps, MultiShippingFormValues>({\n    handleSubmit: (values, { props: { onSubmit } }) => {\n        onSubmit(values);\n    },\n    mapPropsToValues: ({ customerMessage }) => ({\n        orderComment: customerMessage,\n    }),\n    enableReinitialize: true,\n})(MultiShippingForm));\n","import React, { memo, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { CheckboxFormField } from '../ui/form';\n\nexport interface BillingSameAsShippingFieldProps {\n    onChange?(isChecked: boolean): void;\n}\n\nconst BillingSameAsShippingField: FunctionComponent<BillingSameAsShippingFieldProps>  = ({\n    onChange,\n}) => {\n    const labelContent = useMemo(() => (\n        <TranslatedString id=\"billing.use_shipping_address_label\" />\n    ), []);\n\n    return <CheckboxFormField\n        id=\"sameAsBilling\"\n        labelContent={ labelContent }\n        name=\"billingSameAsShipping\"\n        onChange={ onChange }\n    />;\n};\n\nexport default memo(BillingSameAsShippingField);\n","import { CheckoutSelectors, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { DynamicFormField, Fieldset } from '../ui/form';\n\nexport interface RemoteShippingAddressProps {\n    containerId: string;\n    methodId: string;\n    formFields: FormField[];\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n    onFieldChange(fieldName: string, value: string): void;\n}\n\nclass RemoteShippingAddress extends PureComponent<RemoteShippingAddressProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            containerId,\n            formFields,\n            methodId,\n        } = this.props;\n\n        return (\n            <>\n                <div\n                    className={ `widget address-widget widget--${methodId}` }\n                    id={ containerId }\n                    tabIndex={ -1 }\n                />\n                <Fieldset>\n                {\n                    formFields.filter(({ custom }) => custom).map(field => (\n                        <DynamicFormField\n                            field={ field }\n                            key={ `${field.id}-${field.name}` }\n                            onChange={ this.handleFieldValueChange(field.name) }\n                            parentFieldName=\"shippingAddress.customFields\"\n                        />\n                    ))\n                }\n                </Fieldset>\n            </>\n        );\n    }\n\n    private handleFieldValueChange: (name: string) => (value: string) => void = name => value => {\n        const { onFieldChange } = this.props;\n        onFieldChange(name, value);\n    };\n}\n\nexport default RemoteShippingAddress;\n","import { Address, Consignment, Country, CustomerAddress, FormField } from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport {  isValidCustomerAddress, AddressForm, AddressSelect } from '../address';\nimport { connectFormik, ConnectFormikProps } from '../common/form';\nimport { Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingAddressFormProps {\n    addresses: CustomerAddress[];\n    address?: Address;\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    formFields: FormField[];\n    shouldShowSaveAddress?: boolean;\n    onUseNewAddress(): void;\n    onFieldChange(fieldName: string, value: string): void;\n    onAddressSelect(address: Address): void;\n}\n\nconst addressFieldName = 'shippingAddress';\n\nclass ShippingAddressForm extends Component<ShippingAddressFormProps & ConnectFormikProps<SingleShippingFormValues>> {\n    render(): ReactNode {\n        const {\n            addresses,\n            address: shippingAddress,\n            onAddressSelect,\n            onUseNewAddress,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            formFields,\n            isLoading,\n            googleMapsApiKey,\n            formik: {\n                values: {\n                    shippingAddress: formAddress,\n                },\n            },\n        } = this.props;\n\n        const hasAddresses = addresses && addresses.length > 0;\n        const hasValidCustomerAddress = isValidCustomerAddress(shippingAddress, addresses, formFields);\n\n        return (\n            <Fieldset id=\"checkoutShippingAddress\">\n                { hasAddresses &&\n                    <Fieldset id=\"shippingAddresses\">\n                        <LoadingOverlay isLoading={ isLoading }>\n                            <AddressSelect\n                                addresses={ addresses }\n                                onSelectAddress={ onAddressSelect }\n                                onUseNewAddress={ onUseNewAddress }\n                                selectedAddress={ hasValidCustomerAddress ? shippingAddress : undefined }\n                            />\n                        </LoadingOverlay>\n                    </Fieldset> }\n\n                { !hasValidCustomerAddress &&\n                    <LoadingOverlay isLoading={ isLoading } unmountContentWhenLoading>\n                        <AddressForm\n                            countries={ countries }\n                            countriesWithAutocomplete={ countriesWithAutocomplete }\n                            countryCode={ formAddress && formAddress.countryCode }\n                            fieldName={ addressFieldName }\n                            formFields={ formFields }\n                            googleMapsApiKey={ googleMapsApiKey }\n                            onAutocompleteToggle={ this.handleAutocompleteToggle }\n                            onChange={ this.handleChange }\n                            setFieldValue={ this.setFieldValue }\n                            shouldShowSaveAddress={ shouldShowSaveAddress }\n                        />\n                    </LoadingOverlay> }\n            </Fieldset>\n        );\n    }\n\n    private setFieldValue: (fieldName: string, fieldValue: string) => void = (fieldName, fieldValue) => {\n        const {\n            formik: { setFieldValue },\n            formFields,\n        } = this.props;\n\n        const customFormFieldNames = formFields\n            .filter(field => field.custom)\n            .map(field => field.name);\n\n        const formFieldName = customFormFieldNames.includes(fieldName) ?\n            `customFields.${fieldName}` :\n            fieldName;\n\n        setFieldValue(`${addressFieldName}.${formFieldName}`, fieldValue);\n    };\n\n    private handleChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        const {\n            onFieldChange,\n        } = this.props;\n\n        onFieldChange(fieldName, value);\n    };\n\n    private handleAutocompleteToggle: (state: { inputValue: string; isOpen: boolean }) => void = ({ isOpen, inputValue }) => {\n        const { onFieldChange } = this.props;\n\n        if (!isOpen) {\n            onFieldChange('address1', inputValue);\n        }\n    };\n}\n\nexport default connectFormik(ShippingAddressForm);\n","import { Address, CheckoutSelectors, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { StaticAddress } from '../address/';\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString } from '../locale';\nimport { Button, ButtonSize, ButtonVariant } from '../ui/button';\nimport { DynamicFormField, Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport './StaticAddressEditable.scss';\n\nexport interface StaticAddressEditableProps {\n    address: Address;\n    buttonId: string;\n    formFields: FormField[];\n    isLoading: boolean;\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onFieldChange(fieldName: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n}\n\nclass StaticAddressEditable extends PureComponent<StaticAddressEditableProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            address,\n            buttonId,\n            formFields,\n            isLoading,\n        } = this.props;\n\n        const customFormFields = formFields.filter(({ custom }) => custom);\n        const shouldShowCustomFormFields = customFormFields.length > 0;\n\n        return (\n            <LoadingOverlay isLoading={ isLoading }>\n                <div className=\"stepHeader\" style={ { padding: 0 } }>\n                    <div className=\"stepHeader-body subheader\">\n                        <StaticAddress\n                            address={ address }\n                        />\n                    </div>\n\n                    <div className=\"stepHeader-actions subheader\">\n                        <Button\n                            id={ buttonId }\n                            onClick={ preventDefault() }\n                            size={ ButtonSize.Tiny }\n                            testId=\"step-edit-button\"\n                            variant={ ButtonVariant.Secondary }\n                        >\n                            <TranslatedString id=\"common.edit_action\" />\n                        </Button>\n                    </div>\n                </div>\n\n                { shouldShowCustomFormFields && <Fieldset id=\"customFieldset\">\n                    {\n                        customFormFields.map(field => (\n                            <DynamicFormField\n                                field={ field }\n                                key={ `${field.id}-${field.name}` }\n                                onChange={ this.handleFieldValueChange(field.name) }\n                                parentFieldName=\"shippingAddress.customFields\"\n                            />\n                        ))\n                    }\n                </Fieldset> }\n            </LoadingOverlay>\n        );\n    }\n\n    private handleFieldValueChange: (name: string) => (value: string) => void = name => value => {\n        const { onFieldChange } = this.props;\n        onFieldChange(name, value);\n    };\n}\n\nexport default StaticAddressEditable;\n","import { Address, CheckoutSelectors, Consignment, Country, CustomerAddress, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { noop } from 'lodash';\nimport React, { memo, useCallback, useContext, FunctionComponent } from 'react';\n\nimport { FormContext } from '../ui/form';\n\nimport RemoteShippingAddress from './RemoteShippingAddress';\nimport ShippingAddressForm from './ShippingAddressForm';\nimport StaticAddressEditable from './StaticAddressEditable';\n\nexport interface ShippingAddressProps {\n    addresses: CustomerAddress[];\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    formFields: FormField[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    hasRequestedShippingOptions: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onFieldChange(name: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n    onUseNewAddress(): void;\n}\n\nconst ShippingAddress: FunctionComponent<ShippingAddressProps> = props => {\n    const {\n        methodId,\n        formFields,\n        countries,\n        countriesWithAutocomplete,\n        consignments,\n        googleMapsApiKey,\n        onAddressSelect,\n        onFieldChange,\n        onUseNewAddress,\n        initialize,\n        deinitialize,\n        isLoading,\n        shippingAddress,\n        hasRequestedShippingOptions,\n        addresses,\n        shouldShowSaveAddress,\n        onUnhandledError = noop,\n        isShippingStepPending,\n    } = props;\n\n    const { setSubmitted } = useContext(FormContext);\n\n    const initializeShipping = useCallback(memoizeOne((defaultOptions: ShippingInitializeOptions) => (\n        (options?: ShippingInitializeOptions) => initialize({\n            ...defaultOptions,\n            ...options,\n        })\n    )), []);\n\n    const handleFieldChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        if (hasRequestedShippingOptions) {\n            setSubmitted(true);\n        }\n        onFieldChange(fieldName, value);\n    };\n\n    if (methodId) {\n        const containerId = 'addressWidget';\n        let options: ShippingInitializeOptions = {};\n\n        if (methodId === 'amazon') {\n            options = {\n                amazon: {\n                    container: containerId,\n                    onError: onUnhandledError,\n                },\n            };\n\n            return (\n                <RemoteShippingAddress\n                    containerId={ containerId }\n                    deinitialize={ deinitialize }\n                    formFields={ formFields }\n                    initialize={ initializeShipping(options) }\n                    methodId={ methodId }\n                    onFieldChange={ onFieldChange }\n                />\n            );\n        }\n\n        if (methodId === 'amazonpay' && shippingAddress) {\n            const editAddressButtonId = 'edit-ship-button';\n\n            options = {\n                amazonpay: {\n                    editAddressButtonId,\n                },\n            };\n\n            return (\n                <StaticAddressEditable\n                    address={ shippingAddress }\n                    buttonId={ editAddressButtonId }\n                    deinitialize={ deinitialize }\n                    formFields={ formFields }\n                    initialize={ initializeShipping(options) }\n                    isLoading={ isShippingStepPending }\n                    methodId={ methodId }\n                    onFieldChange={ onFieldChange }\n                />\n            );\n        }\n    }\n\n    return (\n        <ShippingAddressForm\n            address={ shippingAddress }\n            addresses={ addresses }\n            consignments={ consignments }\n            countries={ countries }\n            countriesWithAutocomplete={ countriesWithAutocomplete }\n            formFields={ formFields }\n            googleMapsApiKey={ googleMapsApiKey }\n            isLoading={ isLoading }\n            onAddressSelect={ onAddressSelect }\n            onFieldChange={ handleFieldChange }\n            onUseNewAddress={ onUseNewAddress }\n            shouldShowSaveAddress={ shouldShowSaveAddress }\n        />\n    );\n};\n\nexport default memo(ShippingAddress);\n","export const SHIPPING_ADDRESS_FIELDS = [\n    'address1',\n    'postalCode',\n    'countryCode',\n    'city',\n    'stateOrProvince',\n    'stateOrProvinceCode',\n];\n","import React from \"react\";\nimport { CheckboxFormField } from \"../../../ui/form\";\n\nconst GiftOrderForm = (props: any) => {\n    const { setIsGiftOrder, additionalClassName } = props\n    const labelContent = 'This order is a gift.'\n    return(\n        <CheckboxFormField\n            id=\"isGiftOrder\"\n            additionalClassName={ additionalClassName }\n            labelContent={ labelContent }\n            name=\"isGiftOrder\"\n            onChange={ setIsGiftOrder } />\n    )\n}\n\nexport default GiftOrderForm","import { Address, Cart, CheckoutParams, CheckoutSelectors, Consignment, Country, CustomerAddress, CustomerRequestOptions, FormField, RequestOptions, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport { debounce, noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport { getAddressFormFieldsValidationSchema, getTranslateAddressError, isEqualAddress, mapAddressFromFormValues, mapAddressToFormValues, AddressFormValues } from '../address';\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\nimport { withLanguage, WithLanguageProps } from '../locale';\nimport { Fieldset, Form, FormContext } from '../ui/form';\n\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport BillingSameAsShippingField from './BillingSameAsShippingField';\nimport ShippingAddress from './ShippingAddress';\nimport { SHIPPING_ADDRESS_FIELDS } from './ShippingAddressFields';\nimport ShippingFormFooter from './ShippingFormFooter';\nimport GiftOrderForm from './customComponents/giftOptions/GiftOrderForm';\n\nexport interface SingleShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError?(error: Error): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(address: Partial<Address>, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors>;\n    shipDate: Date;\n    setShipDate: Function;\n    arrivalDate: Date;\n    setArrivalDate: Function;\n    giftMessage: String;\n    setGiftMessage: Function;\n    giftMessages: Array<any>;\n    setGiftMessages: Function;\n    isGiftOrder: boolean;\n    setIsGiftOrder: Function;\n}\n\nexport interface SingleShippingFormValues {\n    billingSameAsShipping: boolean;\n    shippingAddress?: AddressFormValues;\n    orderComment: string;\n}\n\ninterface SingleShippingFormState {\n    isResettingAddress: boolean;\n    isUpdatingShippingData: boolean;\n    hasRequestedShippingOptions: boolean;\n}\n\nexport const SHIPPING_AUTOSAVE_DELAY = 1700;\n\nclass SingleShippingForm extends PureComponent<SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>> {\n    static contextType = FormContext;\n\n    state: SingleShippingFormState = {\n        isResettingAddress: false,\n        isUpdatingShippingData: false,\n        hasRequestedShippingOptions: false,\n    };\n\n    private debouncedUpdateAddress: any;\n\n    constructor(props: SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>) {\n        super(props);\n\n        const { updateAddress } = this.props;\n\n        this.debouncedUpdateAddress = debounce(async (address: Address, includeShippingOptions: boolean) => {\n            try {\n                await updateAddress(address, {\n                    params: {\n                        include: {\n                            'consignments.availableShippingOptions': includeShippingOptions,\n                        },\n                    },\n                });\n                if (includeShippingOptions) {\n                    this.setState({ hasRequestedShippingOptions: true });\n                }\n            } finally {\n                this.setState({ isUpdatingShippingData: false });\n            }\n        }, SHIPPING_AUTOSAVE_DELAY);\n    }\n\n    render(): ReactNode {\n        const {\n            addresses,\n            cart,\n            cartHasChanged,\n            isLoading,\n            onUnhandledError,\n            methodId,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n            shippingAddress,\n            consignments,\n            shouldShowOrderComments,\n            initialize,\n            isValid,\n            deinitialize,\n            values: { shippingAddress: addressForm },\n            isShippingStepPending,\n            shipDate,\n            setShipDate,\n            arrivalDate,\n            setArrivalDate,\n            giftMessage,\n            setGiftMessage,\n            giftMessages,\n            setGiftMessages,\n            isGiftOrder,\n            setIsGiftOrder\n        } = this.props;\n\n        const {\n            isResettingAddress,\n            isUpdatingShippingData,\n            hasRequestedShippingOptions,\n        } = this.state;\n\n        const PAYMENT_METHOD_VALID = ['amazon', 'amazonpay'];\n        const shouldShowBillingSameAsShipping = !PAYMENT_METHOD_VALID.some(method => method === methodId);\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset>\n                    <ShippingAddress\n                        addresses={ addresses }\n                        consignments={ consignments }\n                        countries={ countries }\n                        countriesWithAutocomplete={ countriesWithAutocomplete }\n                        deinitialize={ deinitialize }\n                        formFields={ this.getFields(addressForm && addressForm.countryCode) }\n                        googleMapsApiKey={ googleMapsApiKey }\n                        hasRequestedShippingOptions={ hasRequestedShippingOptions }\n                        initialize={ initialize }\n                        isLoading={ isResettingAddress }\n                        isShippingStepPending={ isShippingStepPending }\n                        methodId={ methodId }\n                        onAddressSelect={ this.handleAddressSelect }\n                        onFieldChange={ this.handleFieldChange }\n                        onUnhandledError={ onUnhandledError }\n                        onUseNewAddress={ this.onUseNewAddress }\n                        shippingAddress={ shippingAddress }\n                        shouldShowSaveAddress={ shouldShowSaveAddress }\n                    />\n                    {\n                        shouldShowBillingSameAsShipping && <div className=\"form-body\">\n                            <BillingSameAsShippingField />\n                        </div>\n                    }\n\n                    <GiftOrderForm\n                        isGiftOrder={ isGiftOrder} \n                        setIsGiftOrder={ setIsGiftOrder }\n                        additionalClassName='form-isGiftOrder' />\n                </Fieldset>\n\n                <ShippingFormFooter\n                    cart={ cart }\n                    cartHasChanged={ cartHasChanged }\n                    isLoading={ isLoading || isUpdatingShippingData }\n                    isMultiShippingMode={ false }\n                    shouldDisableSubmit={ this.shouldDisableSubmit() }\n                    shouldShowOrderComments={ shouldShowOrderComments }\n                    shouldShowShippingOptions={ isValid }\n                    consignments={ consignments }\n                    shipDate={ shipDate }\n                    setShipDate={ setShipDate }\n                    arrivalDate={ arrivalDate }\n                    setArrivalDate={ setArrivalDate }\n                    giftMessage={ giftMessage }\n                    setGiftMessage={ setGiftMessage }\n                    giftMessages={ giftMessages }\n                    setGiftMessages={ setGiftMessages }\n                />\n\n            </Form>\n        );\n    }\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const {\n            isLoading,\n            consignments,\n            isValid,\n        } = this.props;\n\n        const {\n            isUpdatingShippingData,\n        } = this.state;\n\n        if (!isValid) {\n            return false;\n        }\n\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\n    };\n\n    private handleFieldChange: (name: string) => void = async name => {\n        \n        const {\n            setFieldValue,\n        } = this.props;\n\n        if (name === 'countryCode') {\n            setFieldValue('shippingAddress.stateOrProvince', '');\n            setFieldValue('shippingAddress.stateOrProvinceCode', '');\n        }\n\n        // Enqueue the following code to run after Formik has run validation\n        await new Promise(resolve => setTimeout(resolve));\n\n        const isShippingField = SHIPPING_ADDRESS_FIELDS.includes(name);\n\n        const { hasRequestedShippingOptions } = this.state;\n\n        const { isValid } = this.props;\n\n        if (!isValid) {\n            return;\n        }\n\n        this.updateAddressWithFormData(isShippingField || !hasRequestedShippingOptions);\n    };\n\n    private updateAddressWithFormData(includeShippingOptions: boolean) {\n        const {\n            shippingAddress,\n            values: { shippingAddress: addressForm },\n        } = this.props;\n\n        const updatedShippingAddress = addressForm && mapAddressFromFormValues(addressForm);\n\n        if (!updatedShippingAddress || isEqualAddress(updatedShippingAddress, shippingAddress)) {\n            return;\n        }\n\n        this.setState({ isUpdatingShippingData: true });\n        this.debouncedUpdateAddress(updatedShippingAddress, includeShippingOptions);\n    }\n\n    private handleAddressSelect: (\n        address: Address\n    ) => void = async address => {\n        const {\n            updateAddress,\n            onUnhandledError = noop,\n            values,\n            setValues,\n        } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            await updateAddress(address);\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address.countryCode),\n                    address\n                ),\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private onUseNewAddress: () => void = async () => {\n        const {\n            deleteConsignments,\n            onUnhandledError = noop,\n            setValues,\n            values,\n        } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            const address = await deleteConsignments();\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address && address.countryCode),\n                    address\n                ),\n            });\n        } catch (e) {\n            onUnhandledError(e);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private getFields(countryCode: string | undefined): FormField[] {\n        const {\n            getFields,\n        } = this.props;\n\n        return getFields(countryCode);\n    }\n}\n\nexport default withLanguage(withFormik<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n    handleSubmit: (values, { props: { onSubmit } }) => {\n        onSubmit(values);\n    },\n    mapPropsToValues: ({ getFields, shippingAddress, isBillingSameAsShipping, customerMessage }) => ({\n        billingSameAsShipping: isBillingSameAsShipping,\n        orderComment: customerMessage,\n        shippingAddress: mapAddressToFormValues(\n            getFields(shippingAddress && shippingAddress.countryCode),\n            shippingAddress\n        ),\n    }),\n    isInitialValid: ({\n        shippingAddress,\n        getFields,\n        language,\n    }) => (\n        !!shippingAddress && getAddressFormFieldsValidationSchema({\n            language,\n            formFields: getFields(shippingAddress.countryCode),\n        }).isValidSync(shippingAddress)\n    ),\n    validationSchema: ({\n        language,\n        getFields,\n        methodId,\n    }: SingleShippingFormProps & WithLanguageProps) => methodId ?\n        object({\n            shippingAddress: lazy<Partial<AddressFormValues>>(formValues =>\n                getCustomFormFieldsValidationSchema({\n                    translate: getTranslateAddressError(language),\n                    formFields: getFields(formValues && formValues.countryCode),\n                })\n            ),\n        }) :\n        object({\n            shippingAddress: lazy<Partial<AddressFormValues>>(formValues =>\n                getAddressFormFieldsValidationSchema({\n                    language,\n                    formFields: getFields(formValues && formValues.countryCode),\n                })\n            ),\n        }),\n    enableReinitialize: false,\n})(SingleShippingForm));\n","import { Address, AddressRequestBody, Cart, CheckoutParams, CheckoutSelectors, Consignment, ConsignmentAssignmentRequestBody, Country, CustomerAddress, CustomerRequestOptions, FormField, RequestOptions, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { withLanguage, WithLanguageProps } from '../locale';\n\nimport MultiShippingForm, { MultiShippingFormValues } from './MultiShippingForm';\nimport SingleShippingForm, { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isBillingSameAsShipping: boolean;\n    isGuest: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    shouldShowAddAddressInCheckout: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onCreateAccount(): void;\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n    onMultiShippingSubmit(values: MultiShippingFormValues): void;\n    onSignIn(): void;\n    onSingleShippingSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(address: Partial<Address>, options: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors>;\n    shipDate: Date;\n    setShipDate: Function;\n    arrivalDate: Date;\n    setArrivalDate: Function;\n    giftMessage: String;\n    setGiftMessage: Function;\n    giftMessages: Array<any>;\n    setGiftMessages: Function;\n    loadGiftMessages: Function;\n    isGiftOrder: boolean;\n    setIsGiftOrder: Function;\n}\n\nclass ShippingForm extends Component<ShippingFormProps & WithLanguageProps> {\n    render(): ReactNode {\n        const {\n            addresses,\n            assignItem,\n            cart,\n            cartHasChanged,\n            createCustomerAddress,\n            consignments,\n            countries,\n            countriesWithAutocomplete,\n            onCreateAccount,\n            customerMessage,\n            deinitialize,\n            deleteConsignments,\n            getFields,\n            googleMapsApiKey,\n            initialize,\n            isBillingSameAsShipping,\n            isGuest,\n            isLoading,\n            isMultiShippingMode,\n            methodId,\n            onMultiShippingSubmit,\n            onSignIn,\n            onSingleShippingSubmit,\n            onUnhandledError,\n            onUseNewAddress,\n            shippingAddress,\n            shouldShowOrderComments,\n            shouldShowSaveAddress,\n            shouldShowAddAddressInCheckout,\n            signOut,\n            updateAddress,\n            isShippingStepPending,\n            shipDate,\n            setShipDate,\n            arrivalDate,\n            setArrivalDate,\n            giftMessage,\n            setGiftMessage,\n            giftMessages,\n            setGiftMessages,\n            loadGiftMessages,\n            isGiftOrder,\n            setIsGiftOrder\n        } = this.props;\n\n        return isMultiShippingMode ?\n            <MultiShippingForm\n                addresses={ addresses }\n                assignItem={ assignItem }\n                cart={ cart }\n                cartHasChanged={ cartHasChanged }\n                consignments={ consignments }\n                countries={ countries }\n                countriesWithAutocomplete={ countriesWithAutocomplete }\n                createCustomerAddress={ createCustomerAddress }\n                customerMessage={ customerMessage }\n                defaultCountryCode={ shippingAddress?.countryCode }\n                getFields={ getFields }\n                googleMapsApiKey={ googleMapsApiKey }\n                isGuest={ isGuest }\n                isLoading={ isLoading }\n                onCreateAccount={ onCreateAccount }\n                onSignIn={ onSignIn }\n                onSubmit={ onMultiShippingSubmit }\n                onUnhandledError={ onUnhandledError }\n                onUseNewAddress={ onUseNewAddress }\n                shouldShowAddAddressInCheckout={ shouldShowAddAddressInCheckout }\n                shouldShowOrderComments={ shouldShowOrderComments }\n                shipDate={ shipDate }\n                setShipDate={ setShipDate }\n                arrivalDate={ arrivalDate }\n                setArrivalDate={ setArrivalDate }\n                giftMessages={ giftMessages }\n                setGiftMessages={ setGiftMessages }\n                loadGiftMessages={ loadGiftMessages }\n            /> :\n            <SingleShippingForm\n                addresses={ addresses }\n                cart={ cart }\n                cartHasChanged={ cartHasChanged }\n                consignments={ consignments }\n                countries={ countries }\n                countriesWithAutocomplete={ countriesWithAutocomplete }\n                customerMessage={ customerMessage }\n                deinitialize={ deinitialize }\n                deleteConsignments={ deleteConsignments }\n                getFields={ getFields }\n                googleMapsApiKey={ googleMapsApiKey }\n                initialize={ initialize }\n                isBillingSameAsShipping={ isBillingSameAsShipping }\n                isLoading={ isLoading }\n                isMultiShippingMode={ isMultiShippingMode }\n                isShippingStepPending={ isShippingStepPending }\n                methodId={ methodId }\n                onSubmit={ onSingleShippingSubmit }\n                onUnhandledError={ onUnhandledError }\n                shippingAddress={ shippingAddress }\n                shouldShowOrderComments={ shouldShowOrderComments }\n                shouldShowSaveAddress={ shouldShowSaveAddress }\n                signOut={ signOut }\n                updateAddress={ updateAddress }\n                shipDate={ shipDate }\n                setShipDate={ setShipDate }\n                arrivalDate={ arrivalDate }\n                setArrivalDate={ setArrivalDate }\n                giftMessage={ giftMessage }\n                setGiftMessage={ setGiftMessage }\n                isGiftOrder={ isGiftOrder }\n                setIsGiftOrder={ setIsGiftOrder }\n                giftMessages={ giftMessages }\n                setGiftMessages={ setGiftMessages }\n            />;\n    }\n}\n\nexport default withLanguage(ShippingForm);\n","import React, { memo, FunctionComponent } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString } from '../locale';\nimport { Legend } from '../ui/form';\n\ninterface ShippingHeaderProps {\n    isMultiShippingMode: boolean;\n    isGuest: boolean;\n    shouldShowMultiShipping: boolean;\n    onMultiShippingChange(): void;\n}\n\nconst ShippingHeader: FunctionComponent<ShippingHeaderProps> = ({\n    isMultiShippingMode,\n    isGuest,\n    onMultiShippingChange,\n    shouldShowMultiShipping,\n}) => (\n    <div className=\"form-legend-container\">\n        { shouldShowMultiShipping &&\n            <a\n                data-test=\"shipping-mode-toggle\"\n                href=\"#\"\n                onClick={ preventDefault(onMultiShippingChange) }\n            >\n                <TranslatedString id={ isMultiShippingMode ?\n                    'shipping.ship_to_single' :\n                    'shipping.ship_to_multi' }\n                />\n            </a> }\n        <Legend testId=\"shipping-address-heading\">\n            <TranslatedString\n                id={ isMultiShippingMode ?\n                    (isGuest ?\n                        'shipping.multishipping_address_heading_guest' :\n                        'shipping.multishipping_address_heading') :\n                    'shipping.shipping_address_heading' }\n            />\n        </Legend>\n\n    </div>\n);\n\nexport default memo(ShippingHeader);\n","import { Address, AddressRequestBody, Cart, CheckoutRequestBody, CheckoutSelectors, Consignment, ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody, Country, Customer, CustomerRequestOptions, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { createSelector } from 'reselect';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { withCheckout, CheckoutContextProps } from '../checkout';\nimport { EMPTY_ARRAY } from '../common/utility';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport { UnassignItemError } from './errors';\nimport findLineItems from './findLineItems';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippingMethodId from './getShippingMethodId';\nimport { MultiShippingFormValues } from './MultiShippingForm';\nimport ShippingForm from './ShippingForm';\nimport ShippingHeader from './ShippingHeader';\nimport { SingleShippingFormValues } from './SingleShippingForm';\nimport ShippingBanner from './customComponents/shipDate/ShippingBanner';\n\nexport interface ShippingProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    onCreateAccount(): void;\n    onToggleMultiShipping(): void;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onSignIn(): void;\n    navigateNextStep(isBillingSameAsShipping: boolean): void;\n    shipDate: Date;\n    setShipDate: Function;\n    arrivalDate: Date;\n    setArrivalDate: Function;\n    giftMessage: String;\n    setGiftMessage: Function;\n}\n\nexport interface WithCheckoutShippingProps {\n    billingAddress?: Address;\n    cart: Cart;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isGuest: boolean;\n    isInitializing: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowAddAddressInCheckout: boolean;\n    shouldShowMultiShipping: boolean;\n    shouldShowOrderComments: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitializeShippingMethod(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initializeShippingMethod(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\n    loadShippingOptions(): Promise<CheckoutSelectors>;\n    signOut(options?: CustomerRequestOptions): void;\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n    unassignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    updateBillingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n    updateShippingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateConsignment(consignment: ConsignmentUpdateRequestBody): Promise<CheckoutSelectors>;\n}\n\ninterface ShippingState {\n    isInitializing: boolean;\n    isGiftOrder: boolean;\n    giftMessages: Array<any>;\n}\n\nclass Shipping extends Component<ShippingProps & WithCheckoutShippingProps, ShippingState> {\n    constructor(props: ShippingProps & WithCheckoutShippingProps) {\n        super(props);\n\n        this.state = {\n            isInitializing: true,\n            isGiftOrder: false,\n            giftMessages: new Array\n        };\n    }\n\n    async componentDidMount(): Promise<void> {\n        const {\n            loadShippingAddressFields,\n            loadShippingOptions,\n            onReady = noop,\n            onUnhandledError = noop,\n        } = this.props;\n\n        var toggleMulti = false\n        this.loadGiftMessages(toggleMulti)\n\n        try {\n            await Promise.all([\n                loadShippingAddressFields(),\n                loadShippingOptions(),\n            ]);\n\n            onReady();\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isInitializing: false });\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            isBillingSameAsShipping,\n            isGuest,\n            shouldShowMultiShipping,\n            customer,\n            unassignItem,\n            updateShippingAddress,\n            updateConsignment,\n            initializeShippingMethod,\n            deinitializeShippingMethod,\n            isMultiShippingMode,\n            onToggleMultiShipping,\n            shipDate,\n            setShipDate,\n            arrivalDate,\n            setArrivalDate,\n            giftMessage,\n            setGiftMessage,\n            ...shippingFormProps\n        } = this.props;\n\n        const {\n            isInitializing,\n            isGiftOrder,\n            giftMessages\n        } = this.state;\n\n        const setIsGiftOrder = (isGiftOrder: boolean) => {\n            this.setState({isGiftOrder: isGiftOrder})\n        }\n\n        const setGiftMessages = (giftMessage: any) => {\n            var updatedGiftMessages = giftMessages\n            updatedGiftMessages.map(item => {\n                if (item.consignmentId === giftMessage.consignmentId) {\n                    item.giftMessage = giftMessage.giftMessage\n                }\n            })\n            this.setState({ giftMessages: updatedGiftMessages })\n        }\n\n        return (\n            <div className=\"checkout-form\">\n                { isMultiShippingMode && !isGuest &&\n                    <ShippingBanner\n                        className='multi-ship-alert-banner'\n                        mainMessage={'You may experience increased screen loading times for orders with multiple destinations.'}\n                    />\n                }\n                <ShippingHeader\n                    isGuest={ isGuest }\n                    isMultiShippingMode={ isMultiShippingMode }\n                    onMultiShippingChange={ this.handleMultiShippingModeSwitch }\n                    shouldShowMultiShipping={ shouldShowMultiShipping }\n                />\n\n                <LoadingOverlay\n                    isLoading={ isInitializing }\n                    unmountContentWhenLoading\n                >\n                    <ShippingForm\n                        { ...shippingFormProps }\n                        addresses={ customer.addresses }\n                        deinitialize={ deinitializeShippingMethod }\n                        initialize={ initializeShippingMethod }\n                        isBillingSameAsShipping = { isBillingSameAsShipping }\n                        isGuest={ isGuest }\n                        isMultiShippingMode={ isMultiShippingMode }\n                        onMultiShippingSubmit={ this.handleMultiShippingSubmit }\n                        onSingleShippingSubmit={ this.handleSingleShippingSubmit }\n                        onUseNewAddress={ this.handleUseNewAddress }\n                        shouldShowSaveAddress={ !isGuest }\n                        updateAddress={ updateShippingAddress }\n                        shipDate={ shipDate }\n                        setShipDate={ setShipDate }\n                        arrivalDate={ arrivalDate }\n                        setArrivalDate={ setArrivalDate }\n                        giftMessage={ giftMessage }\n                        setGiftMessage={ setGiftMessage }\n                        isGiftOrder={ isGiftOrder }\n                        setIsGiftOrder={ setIsGiftOrder }\n                        giftMessages={ giftMessages }\n                        setGiftMessages={ setGiftMessages }\n                        loadGiftMessages={ this.loadGiftMessages }\n                    />\n                    \n                </LoadingOverlay>\n            </div>\n        );\n    }\n\n    private loadGiftMessages: (toggleMulti: boolean) => void = async (toggleMulti: boolean) => {\n        const {\n            consignments,\n            isMultiShippingMode\n        } = this.props\n\n        var giftMessages = new Array\n\n        if (isMultiShippingMode || toggleMulti) {\n            consignments.map((consignment: Consignment) => {\n                var giftMessage\n                var consignmentId\n                giftMessage = consignment.shippingAddress.customFields.find(customField => customField.fieldId === 'field_32')\n                consignmentId = consignment.id\n                if (consignmentId) {\n                    giftMessages.push({\n                        consignmentId: consignmentId,\n                        giftMessage: giftMessage && giftMessage.fieldValue || ''\n                    })\n                }\n            })\n    \n            this.setState({ giftMessages: giftMessages })\n        }\n    }\n\n    private handleMultiShippingModeSwitch: () => void = async () => {\n        const {\n            consignments,\n            isMultiShippingMode,\n            onToggleMultiShipping = noop,\n            onUnhandledError = noop,\n            updateShippingAddress,\n        } = this.props;\n\n        if (isMultiShippingMode && consignments.length > 1) {\n            this.setState({ isInitializing: true });\n\n            try {\n                // Collapse all consignments into one\n                await updateShippingAddress(consignments[0].shippingAddress);\n            } catch (error) {\n                onUnhandledError(error);\n            } finally {\n                this.setState({ isInitializing: false });\n            }\n        }\n        \n        var toggleMulti = true\n        this.loadGiftMessages(toggleMulti)\n        onToggleMultiShipping();\n    };\n\n    private handleSingleShippingSubmit: (values: SingleShippingFormValues) => void = async ({\n        billingSameAsShipping,\n        shippingAddress: addressValues,\n        orderComment,\n    }) => {\n        const {\n            cart,\n            customerMessage,\n            updateCheckout,\n            updateShippingAddress,\n            updateBillingAddress,\n            navigateNextStep,\n            onUnhandledError,\n            shippingAddress,\n            billingAddress,\n            methodId,\n            shipDate,\n            arrivalDate,\n            giftMessage,\n        } = this.props;\n\n        const { isGiftOrder } = this.state;\n\n        // CHECKOUT CUSTOM FIELDS\n        // Update Ship Date, Arrival Date, Gift Message, Gift Order custom fields when shipping step is completed.\n\n        if (addressValues) {\n            const shipDateValue = shipDate.toLocaleDateString('en-US')\n            const arrivalDateValue = arrivalDate.toLocaleDateString('en-US')\n            const giftMessageValue = giftMessage.toString()\n            const cartID = cart.id\n            addressValues.customFields.field_30 = shipDateValue\n            addressValues.customFields.field_38 = arrivalDateValue\n            addressValues.customFields.field_32 = giftMessageValue\n            isGiftOrder ? addressValues.customFields.field_34 = ['0'] : addressValues.customFields.field_34 = []\n            addressValues.customFields.field_36 = cartID\n        }\n\n        const updatedShippingAddress = addressValues && mapAddressFromFormValues(addressValues);\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n        const hasRemoteBilling = this.hasRemoteBilling(methodId);\n\n        if (!isEqualAddress(updatedShippingAddress, shippingAddress)) {\n            promises.push(updateShippingAddress(updatedShippingAddress || {}));\n        }\n\n        if (billingSameAsShipping &&\n            updatedShippingAddress &&\n            !isEqualAddress(updatedShippingAddress, billingAddress) &&\n            !hasRemoteBilling\n        ) {\n            promises.push(updateBillingAddress(updatedShippingAddress));\n        }\n\n        if (customerMessage !== orderComment) {\n            promises.push(updateCheckout({ customerMessage: orderComment }));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            navigateNextStep(billingSameAsShipping);\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n\n    private hasRemoteBilling: (methodId?: string) => boolean = methodId => {\n        const PAYMENT_METHOD_VALID = ['amazonpay'];\n\n        return PAYMENT_METHOD_VALID.some(method => method === methodId);\n    };\n\n    private handleUseNewAddress: (address: Address, itemId: string) => void = async (address, itemId) => {\n        const { unassignItem, onUnhandledError, isMultiShippingMode } = this.props;\n\n        try {\n            await unassignItem({\n                address,\n                lineItems: [{\n                    quantity: 1,\n                    itemId,\n                }],\n            });\n\n            location.href = '/account.php?action=add_shipping_address&from=checkout';\n        } catch (e) {\n            onUnhandledError(new UnassignItemError(e));\n        }\n\n        this.loadGiftMessages(isMultiShippingMode)\n    };\n\n    private handleMultiShippingSubmit: (values: MultiShippingFormValues) => void = async ({ orderComment }) => {\n        const {\n            consignments,\n            customerMessage,\n            updateCheckout,\n            updateConsignment,\n            navigateNextStep,\n            onUnhandledError,\n            shipDate,\n            cart\n        } = this.props;\n\n        const { giftMessages } = this.state;\n\n        interface ConsignmentUpdateRequestBody {\n            id: string;\n            shippingAddress?: AddressRequestBody;\n            lineItems?: Array<any>;\n        }\n\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n\n        // CHECKOUT CUSTOM FIELDS\n        // Update Ship Date, Arrival Date, Gift Message, Gift Order custom fields when shipping step is completed.\n        \n        const updateConsignmentCustomFields = async (consignment: Consignment) => {\n\n            if (giftMessages.length > 0) {\n                var giftMessage\n                giftMessage = giftMessages.find(item => item.consignmentId === consignment.id).giftMessage\n            }\n            const shipDateValue = shipDate.toLocaleDateString('en-US')\n            const cartID = cart.id.toString()\n\n            var customFields = [\n                { fieldId: \"field_30\", fieldValue: shipDateValue },\n                { fieldId: \"field_36\", fieldValue: cartID },\n                { fieldId: \"field_32\", fieldValue: giftMessage && giftMessage || '' }\n            ]\n\n            consignment.shippingAddress.customFields = customFields\n            var consignmentLineItems: { itemId: string | number; quantity: number; }[] = []\n            const lineItems = findLineItems(cart, consignment)\n            lineItems.map(lineItem => consignmentLineItems.push({ itemId: lineItem.id, quantity: lineItem.quantity}))\n\n            const payload: ConsignmentUpdateRequestBody = {\n                id: consignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: consignmentLineItems\n            };\n\n            await promises.push(updateConsignment(payload || {}))\n        }\n\n        if (consignments.length > 1) {\n            consignments.map((consignment) => {\n                updateConsignmentCustomFields(consignment)\n            })\n        }\n\n        try {\n            await Promise.all(promises);\n\n            if (customerMessage !== orderComment) {\n                await updateCheckout({ customerMessage: orderComment });\n            }\n\n            navigateNextStep(false);\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n}\n\nconst deleteConsignmentsSelector = createSelector(\n    ({ checkoutService: { deleteConsignment } }: CheckoutContextProps) => deleteConsignment,\n    ({ checkoutState: { data } }: CheckoutContextProps) => data.getConsignments(),\n    (deleteConsignment, consignments) => async () => {\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        const [{ data }] = await Promise.all(consignments.map(({ id }) =>\n            deleteConsignment(id)\n        ));\n\n        return data.getShippingAddress();\n    }\n);\n\nexport function mapToShippingProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutShippingProps | null {\n    const {\n        data: {\n            getCart,\n            getCheckout,\n            getConfig,\n            getCustomer,\n            getConsignments,\n            getShippingAddress,\n            getBillingAddress,\n            getShippingAddressFields,\n            getShippingCountries,\n        },\n        statuses: {\n            isShippingStepPending,\n            isSelectingShippingOption,\n            isLoadingShippingOptions,\n            isUpdatingConsignment,\n            isCreatingConsignments,\n            isCreatingCustomerAddress,\n            isLoadingShippingCountries,\n            isUpdatingBillingAddress,\n            isUpdatingCheckout,\n        },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const config = getConfig();\n    const consignments = getConsignments() || [];\n    const customer = getCustomer();\n    const cart = getCart();\n\n    if (!checkout || !config || !customer || !cart) {\n        return null;\n    }\n\n    const {\n        checkoutSettings: {\n            enableOrderComments,\n            features,\n            hasMultiShippingEnabled,\n            googleMapsApiKey,\n        },\n    } = config;\n\n    const methodId = getShippingMethodId(checkout);\n    const shippableItemsCount = getShippableItemsCount(cart);\n    const isLoading = (\n        isLoadingShippingOptions() ||\n        isSelectingShippingOption() ||\n        isUpdatingConsignment() ||\n        isCreatingConsignments() ||\n        isUpdatingBillingAddress() ||\n        isUpdatingCheckout() ||\n        isCreatingCustomerAddress()\n    );\n    const shouldShowMultiShipping = (\n        hasMultiShippingEnabled &&\n        !methodId &&\n        shippableItemsCount > 1 &&\n        shippableItemsCount < 50\n    );\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ'];\n\n    if (features['CHECKOUT-4183.checkout_google_address_autocomplete_uk']) {\n        countriesWithAutocomplete.push('GB');\n    }\n\n    const shippingAddress = !shouldShowMultiShipping && consignments.length > 1 ? undefined : getShippingAddress();\n\n    return {\n        assignItem: checkoutService.assignItemsToAddress,\n        billingAddress: getBillingAddress(),\n        cart,\n        consignments,\n        countries: getShippingCountries() || EMPTY_ARRAY,\n        countriesWithAutocomplete,\n        customer,\n        customerMessage: checkout.customerMessage,\n        createCustomerAddress: checkoutService.createCustomerAddress,\n        deinitializeShippingMethod: checkoutService.deinitializeShipping,\n        deleteConsignments: deleteConsignmentsSelector({ checkoutService, checkoutState }),\n        getFields: getShippingAddressFields,\n        googleMapsApiKey,\n        initializeShippingMethod: checkoutService.initializeShipping,\n        isGuest: customer.isGuest,\n        isInitializing: isLoadingShippingCountries() || isLoadingShippingOptions(),\n        isLoading,\n        isShippingStepPending: isShippingStepPending(),\n        loadShippingAddressFields: checkoutService.loadShippingAddressFields,\n        loadShippingOptions: checkoutService.loadShippingOptions,\n        methodId,\n        shippingAddress,\n        shouldShowMultiShipping,\n        shouldShowAddAddressInCheckout: features['CHECKOUT-4726.add_address_in_multishipping_checkout'],\n        shouldShowOrderComments: enableOrderComments,\n        signOut: checkoutService.signOutCustomer,\n        unassignItem: checkoutService.unassignItemsToAddress,\n        updateBillingAddress: checkoutService.updateBillingAddress,\n        updateCheckout: checkoutService.updateCheckout,\n        updateShippingAddress: checkoutService.updateShippingAddress,\n        updateConsignment: checkoutService.updateConsignment,\n    };\n}\n\nexport default withCheckout(mapToShippingProps)(Shipping);\n","import { noop } from 'lodash';\nimport { createContext } from 'react';\n\nexport interface AccordionContextProps {\n    selectedItemId?: string;\n    onToggle(id: string): void;\n}\n\nconst AccordionContext = createContext<AccordionContextProps>({ onToggle: noop });\n\nexport default AccordionContext;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionProps {\n    children: ReactNode;\n    className?: string;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    onSelect?(id: string): void;\n}\n\nexport interface AccordionState {\n    selectedItemId?: string;\n}\n\nexport default class Accordion extends Component<AccordionProps, AccordionState> {\n    state: AccordionState = {};\n\n    private getContextValue = memoizeOne(selectedItemId => {\n        return {\n            onToggle: this.handleToggleItem,\n            selectedItemId,\n        };\n    });\n\n    render(): ReactNode {\n        const {\n            children,\n            className = 'accordion',\n            defaultSelectedItemId,\n        } = this.props;\n\n        const { selectedItemId = defaultSelectedItemId } = this.state;\n\n        return (\n            <AccordionContext.Provider value={ this.getContextValue(selectedItemId) }>\n                <ul className={ className }>\n                    { children }\n                </ul>\n            </AccordionContext.Provider>\n        );\n    }\n\n    private handleToggleItem: (id: string) => void = id => {\n        const { isDisabled, onSelect = noop } = this.props;\n\n        if (isDisabled) {\n            return;\n        }\n\n        this.setState({ selectedItemId: id });\n        onSelect(id);\n    };\n}\n","import { noop } from 'lodash';\nimport React, { createContext, memo, useCallback, useMemo, FunctionComponent, ReactNode } from 'react';\n\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { Accordion } from '../accordion';\n\nexport interface ChecklistProps {\n    children: ReactNode;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    name: string;\n    onSelect?(value: string): void;\n}\n\nexport interface ChecklistContextProps {\n    name: string;\n}\n\nexport const ChecklistContext = createContext<ChecklistContextProps | undefined>(undefined);\n\nconst Checklist: FunctionComponent<\n    ChecklistProps &\n    ConnectFormikProps<{ [key: string]: string }>\n> = ({\n    formik: { setFieldValue },\n    name,\n    onSelect = noop,\n    ...props\n}) => {\n    const handleSelect = useCallback((value: string) => {\n        setFieldValue(name, value);\n        onSelect(value);\n    }, [\n        name,\n        onSelect,\n        setFieldValue,\n    ]);\n\n    const contextValue = useMemo(() => ({ name }), [name]);\n\n    return (\n        <ChecklistContext.Provider value={ contextValue }>\n            <Accordion\n                { ...props }\n                className=\"form-checklist optimizedCheckout-form-checklist\"\n                onSelect={ handleSelect }\n            />\n        </ChecklistContext.Provider>\n    );\n};\n\nexport default connectFormik(memo(Checklist));\n","import classNames from 'classnames';\nimport React, { memo, useCallback, useContext, FunctionComponent, ReactNode } from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionItemProps {\n    bodyClassName?: string;\n    children?: ReactNode;\n    className?: string;\n    classNameSelected?: string;\n    headerClassName?: string;\n    headerClassNameSelected?: string;\n    itemId: string;\n    headerContent(props: AccordionItemHeaderProps): ReactNode;\n}\n\nexport interface AccordionItemHeaderProps {\n    isSelected: boolean;\n    onToggle(id: string): void;\n}\n\nconst AccordionItem: FunctionComponent<AccordionItemProps> = ({\n    bodyClassName = 'accordion-item-body',\n    children,\n    className = 'accordion-item',\n    classNameSelected = 'accordion-item--selected',\n    headerClassName = 'accordion-item-header',\n    headerClassNameSelected = 'accordion-item-header--selected',\n    headerContent,\n    itemId,\n}) => {\n    const { onToggle, selectedItemId } = useContext(AccordionContext);\n    const isSelected = selectedItemId === itemId;\n\n    const transitionEndListener = useCallback((node, done) => {\n        node.addEventListener('transitionend', ({ target }: Event) => {\n            if (target === node) {\n                done();\n            }\n        });\n    }, []);\n\n    return (\n        <li className={ classNames(\n            className,\n            { [classNameSelected]: isSelected }\n        ) }\n        data-test={ `accordion-item_${itemId}` }\n        >\n            <div className={ classNames(\n                headerClassName,\n                { [headerClassNameSelected]: isSelected }\n            ) }\n            >\n                { headerContent({ isSelected, onToggle }) }\n            </div>\n\n            { children && <CSSTransition\n                addEndListener={ transitionEndListener }\n                classNames={ bodyClassName }\n                in={ isSelected }\n                mountOnEnter\n                timeout={ {} }\n                unmountOnExit\n            >\n                <div className={ bodyClassName }>\n                    { children }\n                </div>\n            </CSSTransition> }\n        </li>\n    );\n};\n\nexport default memo(AccordionItem);\n","import React, { FunctionComponent, InputHTMLAttributes } from 'react';\n\nimport Input from './Input';\nimport Label from './Label';\n\nexport interface ChecklistItemInputProps extends InputHTMLAttributes<HTMLInputElement> {\n    isSelected: boolean;\n}\n\nconst ChecklistItemInput: FunctionComponent<ChecklistItemInputProps> = ({\n    id,\n    isSelected,\n    children,\n    ...props\n}) => (\n    <>\n        <Input\n            { ...props }\n            checked={ isSelected }\n            className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\n            id={ id }\n            type=\"radio\"\n        />\n\n        <Label htmlFor={ id }>\n            { children }\n        </Label>\n    </>\n);\n\nexport default ChecklistItemInput;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { memo, useCallback, useContext, FunctionComponent, ReactNode } from 'react';\n\nimport { AccordionItem, AccordionItemHeaderProps } from '../accordion';\n\nimport BasicFormField from './BasicFormField';\nimport { ChecklistContext } from './Checklist';\nimport ChecklistItemInput from './ChecklistItemInput';\n\nexport interface ChecklistItemProps {\n    content?: ReactNode;\n    htmlId?: string;\n    isDisabled?: boolean;\n    label: ReactNode | ((isSelected: boolean) => ReactNode);\n    value: string;\n}\n\nconst ChecklistItem: FunctionComponent<ChecklistItemProps> = ({\n    isDisabled,\n    value,\n    content,\n    htmlId = kebabCase(value),\n    label,\n    ...rest\n}) => {\n    const { name = '' } = useContext(ChecklistContext) || {};\n\n    const renderInput = useCallback(memoizeOne((isSelected: boolean) => ({ field }: FieldProps) => (\n        <ChecklistItemInput\n            { ...field }\n            disabled={ isDisabled }\n            id={ htmlId }\n            isSelected={ field.value === value }\n            value={ value }\n        >\n            { label instanceof Function ?\n                label(isSelected) :\n                label }\n        </ChecklistItemInput>\n    )), [\n        htmlId,\n        isDisabled,\n        label,\n        value,\n    ]);\n\n    const handleChange = useCallback(memoizeOne((onToggle: (id: string) => void) => (selectedValue: string) => {\n        if (value === selectedValue) {\n            onToggle(value);\n        }\n    }), []);\n\n    const renderHeaderContent = useCallback(({\n        isSelected,\n        onToggle,\n    }: AccordionItemHeaderProps) => (\n        <BasicFormField\n            className=\"form-checklist-option\"\n            name={ name }\n            onChange={ handleChange(onToggle) }\n            render={ renderInput(isSelected) }\n        />\n    ), [\n        handleChange,\n        name,\n        renderInput,\n    ]);\n\n    return (\n        <AccordionItem\n            { ...rest }\n            bodyClassName=\"form-checklist-body\"\n            className=\"form-checklist-item optimizedCheckout-form-checklist-item\"\n            classNameSelected=\"form-checklist-item--selected optimizedCheckout-form-checklist-item--selected\"\n            headerClassName=\"form-checklist-header\"\n            headerClassNameSelected=\"form-checklist-header--selected\"\n            headerContent={ renderHeaderContent }\n            itemId={ value }\n        >\n            { content }\n        </AccordionItem>\n    );\n};\n\nexport default memo(ChecklistItem);\n"],"names":["connectFormik","OriginalComponent","InnerComponent","memo","props","prevFormik","prevProps","nextFormik","nextProps","DecoratedComponent","connect","displayName","name","parseAnchor","text","div","document","createElement","innerHTML","anchor","querySelector","anchorSiblings","split","outerHTML","data","id","language","onClick","testId","translatedString","translate","parsedString","length","href","message","getLanguageService","UnassignItemError","prototype","CustomError","getShippingMethodId","checkout","preselectedPayment","getPreselectedPayment","indexOf","providerId","undefined","SaveAddressForm","withLanguage","withFormik","handleSubmit","values","onSaveAddress","mapPropsToValues","defaultCountryCode","firstName","lastName","address1","address2","customFields","country","countryCode","stateOrProvince","stateOrProvinceCode","postalCode","phone","city","company","shouldSaveAddress","validationSchema","getFields","getAddressFormFieldsValidationSchema","formFields","googleMapsApiKey","countriesWithAutocomplete","countries","setFieldValue","isLoading","onRequestClose","Form","autoComplete","LoadingOverlay","AddressForm","shouldShowSaveAddress","className","preventDefault","TranslatedString","Button","disabled","type","variant","isOpen","onAfterOpen","addressFormProps","Modal","additionalModalClassName","header","ModalHeader","shouldShowCloseButton","title","AssignItemInvalidAddressError","AssignItemFailedError","findConsignment","consignments","itemId","find","consignment","includes","lineItemIds","getShippableLineItems","cart","reduce","lineItems","physicalItems","result","item","i","addedByPromotion","isNil","parentId","concat","lineItemIndex","splitItems","quantity","key","variantId","productId","splitItem","updateShippableItems","items","updatedItemIndex","address","cartItemIds","map","updatedConsignment","isEqualAddress","shippingAddress","newId","matchingCartItems","filter","matchingCartItemIds","findNewItemId","imageUrl","options","addresses","onSelectAddress","onUseNewAddress","handleUseNewAddress","useCallback","handleSelectAddress","alt","src","optionName","value","nameId","AddressSelect","selectedAddress","children","mainMessage","mainMessageIcon","secondMessage","secondMessageIcon","listItems","renderIcon","source","IconContainer","CustomIcon","imageSource","ListItem","index","isMultiShippingMode","shipDate","setShipDate","arrivalDate","setArrivalDate","isActiveCart","setUnavailableItems","itemsUnavailableToShip","setItemsUnavailableToShip","today","Date","todayReset","setHours","useState","Object","setAddress","selectedShippingOption","setSelectedShippingOption","Array","availableDates","setAvailableDates","blackoutDates","setBlackoutDates","promotionalItems","setPromotionalItems","nextAvailableDate","setNextAvailableDate","inventoryData","setInventoryData","useEffect","fetchBlackoutDates","fetchShipByDates","fetchInventoryData","getAvailableDates","maxDate","savedShipDate","currentShipDate","customField","fieldId","fieldValue","isAfterNextAvailable","filterDates","getYear","keys","fetchUPSEstimate","endsAfterShipDate","push","window","scroll","calendarDays","querySelectorAll","NodeList","forEach","day","removeAttribute","unavailableItems","qty_available","status","start","end","dates","date","setDate","getDate","isToday","isWeekday","isBlackoutDate","getTime","getDay","formattedDate","getFullYear","String","getMonth","padStart","join","isAfter","mustShipDate","month","year","body","description","reqObj","method","headers","JSON","stringify","fetch","then","resp","json","estimate","estimatedArrival","EstimatedArrival","replaceAll","catch","error","console","log","formattedDates","blackoutDate","results","productIds","productSKUs","toString","sku","productSKU","skus","variant_sku","renderUnavailableToShipMessage","products","formattedShipDate","toLocaleDateString","weekday","productDetails","productName","Fieldset","Legend","calendarClassName","selected","onChange","minDate","filterDate","highlightDates","inline","SelectedShipDate","ArrivalDate","bannerMessage","alert","giftMessageLength","ExpandCircleDownRounded","clearGiftMessage","DeleteForeverRounded","giftMessageToggle","toggleGiftMessage","setClassName","giftMessage","setGiftMessage","maxLength","rows","placeholder","event","target","defaultValue","renderGiftMessage","setGiftMessageToggle","savedGiftMessage","getRecommendedShippingOption","availableShippingOptions","ShippingOptionListItem","consignmentId","shippingOption","renderLabel","StaticShippingOption","displayAdditionalInformation","ChecklistItem","htmlId","label","inputName","shippingOptions","selectedShippingOptionId","onSelectedOption","handleSelect","Checklist","defaultSelectedItemId","onSelect","selectDefaultShippingOptions","this","selectShippingOption","getConsignments","recommendedOption","singleShippingOption","defaultShippingOption","componentDidMount","subscribeToConsignments","unsubscribe","componentWillUnmount","render","shouldShowShippingOptions","invalidShippingMessage","methodId","renderConsignment","hideContentWhenLoading","renderNoShippingOptions","StaticAddress","StaticConsignmentItemList","PureComponent","noop","shippingOptionIds","ShippingOptionsForm","subscribeToConsignmentsSelector","createSelector","subscribe","subscriber","isLoadingSelector","_","isLoadingShippingOptions","isSelectingShippingOption","isUpdatingConsignment","isCreatingConsignments","isUpdatingAddress","withCheckout","checkoutService","checkoutState","getCart","getConfig","getCustomer","getCheckout","customer","config","unsortedConsignments","shippableItems","consignmentsOrder","uniq","sortBy","sortConsignments","checkoutSettings","selectConsignmentShippingOption","renderRecipient","renderRecipientCompany","renderShippingAddress","giftMessages","setGiftMessages","state","savedCartID","cartHasChanged","shouldShowOrderComments","shouldDisableSubmit","renderItemAvailabilityMessage","option","unshift","legend","Alert","ShippingOptions","setState","renderGiftMessageMulti","OrderComments","handleCloseErrorModal","createCustomerAddressError","handleSaveAddress","createCustomerAddress","itemAddingAddress","mapAddressFromFormValues","itemKey","shouldShowAddAddressInCheckout","loadGiftMessages","handleCloseAddAddressForm","assignItem","onUnhandledError","isValidAddress","syncItems","hasSelectedShippingOptions","currentItems","findIndex","getDerivedStateFromProps","getShippableItemsCount","isGuest","onSignIn","onCreateAccount","TranslatedLink","Fragment","ErrorModal","onClose","shouldShowErrorCode","hasUnassignedLineItems","onSubmit","orderComment","enableReinitialize","MultiShippingForm","labelContent","useMemo","CheckboxFormField","handleFieldValueChange","onFieldChange","initialize","deinitialize","containerId","tabIndex","field","DynamicFormField","parentFieldName","addressFieldName","fieldName","custom","handleChange","handleAutocompleteToggle","inputValue","onAddressSelect","formAddress","hasAddresses","hasValidCustomerAddress","isValidCustomerAddress","unmountContentWhenLoading","onAutocompleteToggle","Component","ShippingAddressForm","buttonId","customFormFields","shouldShowCustomFormFields","style","padding","size","hasRequestedShippingOptions","isShippingStepPending","setSubmitted","useContext","initializeShipping","memoizeOne","defaultOptions","amazon","container","onError","editAddressButtonId","amazonpay","SHIPPING_ADDRESS_FIELDS","setIsGiftOrder","additionalClassName","isResettingAddress","isUpdatingShippingData","isValid","handleFieldChange","Promise","resolve","setTimeout","isShippingField","updateAddressWithFormData","handleAddressSelect","updateAddress","setValues","mapAddressToFormValues","deleteConsignments","debouncedUpdateAddress","debounce","includeShippingOptions","params","include","addressForm","isGiftOrder","shouldShowBillingSameAsShipping","some","updatedShippingAddress","contextType","billingSameAsShipping","isInitialValid","isValidSync","formValues","getCustomFormFieldsValidationSchema","SingleShippingForm","customerMessage","isBillingSameAsShipping","onMultiShippingSubmit","onSingleShippingSubmit","signOut","ShippingForm","onMultiShippingChange","shouldShowMultiShipping","toggleMulti","handleMultiShippingModeSwitch","onToggleMultiShipping","updateShippingAddress","isInitializing","handleSingleShippingSubmit","addressValues","updateCheckout","updateBillingAddress","navigateNextStep","billingAddress","shipDateValue","arrivalDateValue","giftMessageValue","cartID","field_30","field_38","field_32","field_34","field_36","promises","hasRemoteBilling","all","unassignItem","location","handleMultiShippingSubmit","updateConsignment","updateConsignmentCustomFields","consignmentLineItems","findLineItems","lineItem","payload","loadShippingAddressFields","loadShippingOptions","onReady","initializeShippingMethod","deinitializeShippingMethod","shippingFormProps","updatedGiftMessages","deleteConsignmentsSelector","deleteConsignment","getShippingAddress","mapToShippingProps","getBillingAddress","getShippingAddressFields","getShippingCountries","isCreatingCustomerAddress","isLoadingShippingCountries","isUpdatingBillingAddress","isUpdatingCheckout","enableOrderComments","features","hasMultiShippingEnabled","shippableItemsCount","assignItemsToAddress","deinitializeShipping","signOutCustomer","unassignItemsToAddress","Shipping","createContext","onToggle","getContextValue","selectedItemId","handleToggleItem","isDisabled","AccordionContext","ChecklistContext","contextValue","Provider","bodyClassName","classNameSelected","headerClassName","headerClassNameSelected","headerContent","isSelected","transitionEndListener","node","done","addEventListener","CSSTransition","addEndListener","classNames","in","mountOnEnter","timeout","unmountOnExit","Input","checked","Label","htmlFor","content","kebabCase","rest","renderInput","Function","selectedValue","renderHeaderContent","BasicFormField"],"sourceRoot":""}