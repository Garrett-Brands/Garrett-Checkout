{"version":3,"file":"cart-summary-drawer-f7548a09.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/cart/CartSummaryDrawer.tsx","webpack://checkout/./packages/core/src/app/order/getLineItemsCount.ts","webpack://checkout/./packages/core/src/app/order/OrderSummaryModal.tsx","webpack://checkout/./packages/core/src/app/order/OrderSummaryDrawer.tsx","webpack://checkout/./packages/core/src/app/ui/modal/ModalTrigger.tsx"],"sourcesContent":["import React, { FunctionComponent, memo } from 'react';\n\nimport { withCheckout } from '../checkout';\nimport OrderSummaryDrawer from '../order/OrderSummaryDrawer';\n\nimport { WithCheckoutCartSummaryProps } from './CartSummary';\nimport EditLink from './EditLink';\nimport mapToCartSummaryProps from './mapToCartSummaryProps';\nimport withRedeemable from './withRedeemable';\n\nconst CartSummaryDrawer: FunctionComponent<WithCheckoutCartSummaryProps> = ({\n    cartUrl,\n    ...props\n}) =>\n    withRedeemable(OrderSummaryDrawer)({\n        ...props,\n        cartUrl,\n        headerLink: <EditLink className=\"modal-header-link cart-modal-link\" url={cartUrl} />,\n    });\n\nexport default withCheckout(mapToCartSummaryProps)(memo(CartSummaryDrawer));\n","import { LineItemMap } from '@bigcommerce/checkout-sdk';\n\nexport default function getLineItemsCount({\n    physicalItems,\n    digitalItems,\n    giftCertificates,\n    customItems,\n}: LineItemMap): number {\n    return (\n        physicalItems.length +\n        digitalItems.length +\n        giftCertificates.length +\n        (customItems || []).length\n    );\n}\n","import {\n    LineItemMap,\n    ShopperCurrency as ShopperCurrencyType,\n    StoreCurrency,\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, ReactNode } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString } from '../locale';\nimport { IconClose } from '../ui/icon';\nimport { Modal, ModalHeader } from '../ui/modal';\n\nimport OrderSummaryItems from './OrderSummaryItems';\nimport OrderSummaryPrice from './OrderSummaryPrice';\nimport OrderSummarySection from './OrderSummarySection';\nimport OrderSummarySubtotals, { OrderSummarySubtotalsProps } from './OrderSummarySubtotals';\nimport OrderSummaryTotal from './OrderSummaryTotal';\n\nexport interface OrderSummaryDrawerProps {\n    additionalLineItems?: ReactNode;\n    lineItems: LineItemMap;\n    total: number;\n    storeCurrency: StoreCurrency;\n    shopperCurrency: ShopperCurrencyType;\n    isOpen: boolean;\n    headerLink?: ReactNode;\n    onRequestClose?(): void;\n    onAfterOpen?(): void;\n}\n\nconst OrderSummaryModal: FunctionComponent<\n    OrderSummaryDrawerProps & OrderSummarySubtotalsProps\n> = ({\n    additionalLineItems,\n    children,\n    isTaxIncluded,\n    taxes,\n    onRequestClose,\n    onAfterOpen,\n    storeCurrency,\n    shopperCurrency,\n    isOpen,\n    headerLink,\n    lineItems,\n    total,\n    ...orderSummarySubtotalsProps\n}) => {\n    const displayInclusiveTax = isTaxIncluded && taxes && taxes.length > 0;\n\n    return <Modal\n        additionalBodyClassName=\"cart-modal-body optimizedCheckout-orderSummary\"\n        additionalHeaderClassName=\"cart-modal-header optimizedCheckout-orderSummary\"\n        header={renderHeader({ headerLink, onRequestClose })}\n        isOpen={isOpen}\n        onAfterOpen={onAfterOpen}\n        onRequestClose={onRequestClose}\n    >\n        <OrderSummarySection>\n            <OrderSummaryItems items={lineItems} />\n        </OrderSummarySection>\n        <OrderSummarySection>\n            <OrderSummarySubtotals isTaxIncluded={isTaxIncluded} taxes={taxes} {...orderSummarySubtotalsProps} />\n            {additionalLineItems}\n        </OrderSummarySection>\n        <OrderSummarySection>\n            <OrderSummaryTotal\n                orderAmount={total}\n                shopperCurrencyCode={shopperCurrency.code}\n                storeCurrencyCode={storeCurrency.code}\n            />\n        </OrderSummarySection>\n        {displayInclusiveTax && <OrderSummarySection>\n                <h5\n                    className=\"cart-taxItem cart-taxItem--subtotal optimizedCheckout-contentPrimary\"\n                    data-test=\"tax-text\"\n                >\n                    <TranslatedString\n                        id=\"tax.inclusive_label\"\n                    />\n                </h5>\n                {(taxes || []).map((tax, index) => (\n                    <OrderSummaryPrice\n                        amount={tax.amount}\n                        key={index}\n                        label={tax.name}\n                        testId=\"cart-taxes\"\n                    />\n                ))}\n            </OrderSummarySection>}\n    </Modal>\n};\n\nconst renderHeader: FunctionComponent<{\n    headerLink: ReactNode;\n    onRequestClose?(): void;\n}> = ({ onRequestClose, headerLink }) => (\n    <>\n        <a className=\"cart-modal-close\" href=\"#\" onClick={preventDefault(onRequestClose)}>\n            <span className=\"is-srOnly\">\n                <TranslatedString id=\"common.close_action\" />\n            </span>\n            <IconClose />\n        </a>\n        <ModalHeader additionalClassName=\"cart-modal-title\">\n            <TranslatedString id=\"cart.cart_heading\" />\n        </ModalHeader>\n\n        {headerLink}\n    </>\n);\n\nexport default OrderSummaryModal;\n","import {\n    LineItemMap,\n    ShopperCurrency as ShopperCurrencyType,\n    StoreCurrency,\n} from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { FunctionComponent, memo, ReactNode, useCallback } from 'react';\n\nimport { ShopperCurrency } from '../currency';\nimport { TranslatedString } from '../locale';\nimport { IconGiftCertificate } from '../ui/icon';\nimport { ModalTrigger } from '../ui/modal';\n\nimport getItemsCount from './getItemsCount';\nimport getLineItemsCount from './getLineItemsCount';\nimport OrderSummaryModal from './OrderSummaryModal';\nimport { OrderSummarySubtotalsProps } from './OrderSummarySubtotals';\n\nexport interface OrderSummaryDrawerProps {\n    lineItems: LineItemMap;\n    total: number;\n    headerLink: ReactNode;\n    storeCurrency: StoreCurrency;\n    shopperCurrency: ShopperCurrencyType;\n    additionalLineItems?: ReactNode;\n}\n\nconst OrderSummaryDrawer: FunctionComponent<\n    OrderSummaryDrawerProps & OrderSummarySubtotalsProps\n> = ({\n    additionalLineItems,\n    coupons,\n    discountAmount,\n    giftCertificates,\n    handlingAmount,\n    headerLink,\n    isTaxIncluded,\n    lineItems,\n    onRemovedCoupon,\n    onRemovedGiftCertificate,\n    shippingAmount,\n    shopperCurrency,\n    storeCreditAmount,\n    giftWrappingAmount,\n    storeCurrency,\n    subtotalAmount,\n    taxes,\n    total,\n}) => {\n    const renderModal = useCallback(\n        (props) => (\n            <OrderSummaryModal\n                {...props}\n                additionalLineItems={additionalLineItems}\n                coupons={coupons}\n                discountAmount={discountAmount}\n                giftCertificates={giftCertificates}\n                giftWrappingAmount={giftWrappingAmount}\n                handlingAmount={handlingAmount}\n                headerLink={headerLink}\n                isTaxIncluded={isTaxIncluded}\n                lineItems={lineItems}\n                onRemovedCoupon={onRemovedCoupon}\n                onRemovedGiftCertificate={onRemovedGiftCertificate}\n                shippingAmount={shippingAmount}\n                shopperCurrency={shopperCurrency}\n                storeCreditAmount={storeCreditAmount}\n                storeCurrency={storeCurrency}\n                subtotalAmount={subtotalAmount}\n                taxes={taxes}\n                total={total}\n            />\n        ),\n        [\n            additionalLineItems,\n            coupons,\n            discountAmount,\n            giftCertificates,\n            handlingAmount,\n            headerLink,\n            isTaxIncluded,\n            lineItems,\n            onRemovedCoupon,\n            onRemovedGiftCertificate,\n            giftWrappingAmount,\n            shippingAmount,\n            shopperCurrency,\n            storeCreditAmount,\n            storeCurrency,\n            subtotalAmount,\n            taxes,\n            total,\n        ],\n    );\n\n    return (\n        <ModalTrigger modal={renderModal}>\n            {({ onClick, onKeyPress }) => (\n                <div\n                    className=\"cartDrawer optimizedCheckout-orderSummary\"\n                    onClick={onClick}\n                    onKeyPress={onKeyPress}\n                    tabIndex={0}\n                >\n                    <figure\n                        className={classNames('cartDrawer-figure', {\n                            'cartDrawer-figure--stack': getLineItemsCount(lineItems) > 1,\n                        })}\n                    >\n                        <div className=\"cartDrawer-imageWrapper\">{getImage(lineItems)}</div>\n                    </figure>\n                    <div className=\"cartDrawer-body\">\n                        <h3 className=\"cartDrawer-items optimizedCheckout-headingPrimary\">\n                            <TranslatedString\n                                data={{ count: getItemsCount(lineItems) }}\n                                id=\"cart.item_count_text\"\n                            />\n                        </h3>\n                        <a>\n                            <TranslatedString id=\"cart.show_details_action\" />\n                        </a>\n                    </div>\n                    <div className=\"cartDrawer-actions\">\n                        <h3 className=\"cartDrawer-total optimizedCheckout-headingPrimary\">\n                            <ShopperCurrency amount={total} />\n                        </h3>\n                    </div>\n                </div>\n            )}\n        </ModalTrigger>\n    );\n};\n\nfunction getImage(lineItems: LineItemMap): ReactNode {\n    const productWithImage = lineItems.physicalItems[0] || lineItems.digitalItems[0];\n\n    if (productWithImage && productWithImage.imageUrl) {\n        return (\n            <img\n                alt={productWithImage.name}\n                data-test=\"cart-item-image\"\n                src={productWithImage.imageUrl}\n            />\n        );\n    }\n\n    if (lineItems.giftCertificates.length) {\n        return <IconGiftCertificate />;\n    }\n}\n\nexport default memo(OrderSummaryDrawer);\n","import React, {\n    Component,\n    KeyboardEvent,\n    KeyboardEventHandler,\n    MouseEventHandler,\n    ReactNode,\n} from 'react';\n\nexport interface ModalTriggerProps {\n    children(props: { onClick: MouseEventHandler; onKeyPress: KeyboardEventHandler }): ReactNode;\n    modal(props: ModalTriggerModalProps): ReactNode;\n}\n\nexport interface ModalTriggerModalProps {\n    isOpen: boolean;\n    onRequestClose(): void;\n}\n\nexport interface ModalTriggerState {\n    isOpen: boolean;\n}\n\nexport default class ModalTrigger extends Component<ModalTriggerProps, ModalTriggerState> {\n    state = {\n        isOpen: false,\n    };\n\n    private canHandleEvent = false;\n\n    componentDidMount(): void {\n        this.canHandleEvent = true;\n    }\n\n    componentWillUnmount(): void {\n        this.canHandleEvent = false;\n    }\n\n    render() {\n        const { children, modal } = this.props;\n        const { isOpen } = this.state;\n\n        return (\n            <>\n                {children({\n                    onClick: this.handleOpen,\n                    onKeyPress: this.handleKeyOpen,\n                })}\n\n                {modal({\n                    isOpen,\n                    onRequestClose: this.handleClose,\n                })}\n            </>\n        );\n    }\n\n    private handleOpen: () => void = () => {\n        if (!this.canHandleEvent) {\n            return;\n        }\n\n        this.setState({\n            isOpen: true,\n        });\n    };\n\n    private handleClose: () => void = () => {\n        if (!this.canHandleEvent) {\n            return;\n        }\n\n        this.setState({\n            isOpen: false,\n        });\n    };\n\n    private handleKeyOpen: (keyboardEvent: KeyboardEvent<HTMLElement>) => void = (\n        keyboardEvent,\n    ) => {\n        if (keyboardEvent.key === 'Enter') {\n            this.handleOpen();\n        }\n    };\n}\n"],"names":["memo","cartUrl","props","headerLink","className","url","getLineItemsCount","physicalItems","digitalItems","giftCertificates","customItems","length","renderHeader","onRequestClose","href","onClick","preventDefault","TranslatedString","id","IconClose","ModalHeader","additionalClassName","additionalLineItems","isTaxIncluded","taxes","onAfterOpen","storeCurrency","shopperCurrency","isOpen","lineItems","total","orderSummarySubtotalsProps","displayInclusiveTax","Modal","additionalBodyClassName","additionalHeaderClassName","header","OrderSummarySection","OrderSummaryItems","items","OrderSummarySubtotals","OrderSummaryTotal","orderAmount","shopperCurrencyCode","code","storeCurrencyCode","map","tax","index","OrderSummaryPrice","amount","key","label","name","testId","coupons","discountAmount","handlingAmount","onRemovedCoupon","onRemovedGiftCertificate","shippingAmount","storeCreditAmount","giftWrappingAmount","subtotalAmount","renderModal","useCallback","ModalTrigger","modal","onKeyPress","tabIndex","productWithImage","imageUrl","alt","src","IconGiftCertificate","getImage","data","count","getItemsCount","ShopperCurrency","state","canHandleEvent","handleOpen","setState","handleClose","handleKeyOpen","keyboardEvent","componentDidMount","this","componentWillUnmount","render","children","Component"],"sourceRoot":""}