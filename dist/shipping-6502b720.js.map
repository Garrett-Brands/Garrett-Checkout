{"version":3,"file":"shipping-6502b720.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/common/form/connectFormik.tsx","webpack://checkout/./packages/core/src/app/shipping/errors/UnassignItemError.ts","webpack://checkout/./packages/core/src/app/shipping/getShippingMethodId.ts","webpack://checkout/./packages/core/src/app/address/AddressFormModal.tsx","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemInvalidAddressError.ts","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemFailedError.ts","webpack://checkout/./packages/core/src/app/shipping/findConsignment.ts","webpack://checkout/./packages/core/src/app/shipping/getShippableLineItems.ts","webpack://checkout/./packages/core/src/app/shipping/ItemAddressSelect.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/shipDate/ShippingCalendar.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/shipDate/ShippingInfo.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/shipDate/DatesSummary.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/shipDate/ShippingBanner.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/shipDate/ShippingInfoBanner.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/shipDate/ShipDate.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/shipDate/ShipDateDisabled.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/giftOptions/GiftOptions.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/giftOptions/GiftMessageCollapsed.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/giftOptions/GiftMessageExpanded.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/giftOptions/GiftMessageToggle.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/giftOptions/GiftMessageForm.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/giftOptions/GiftMessage.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/giftOptions/GiftMessageDisabled.tsx","webpack://checkout/./packages/core/src/app/shipping/getRecommendedShippingOption.ts","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsList.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsForm.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptions.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/giftOptions/GiftMessageDestination.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/giftOptions/GiftMessageMulti.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/shippingAcknowledgement/ShippingAcknowledgement.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingFormFooter.tsx","webpack://checkout/./packages/core/src/app/shipping/MultiShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/updateShippableItems.ts","webpack://checkout/./packages/core/src/app/shipping/BillingSameAsShippingField.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressForm.tsx","webpack://checkout/./packages/core/src/app/shipping/StaticAddressEditable.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressFields.ts","webpack://checkout/./packages/core/src/app/shipping/customComponents/giftOptions/GiftOrderForm.tsx","webpack://checkout/./packages/core/src/app/shipping/SingleShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingHeader.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingAddressDisplay.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeStateMapper.ts","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShipping.tsx","webpack://checkout/./packages/core/src/app/shipping/Shipping.tsx","webpack://checkout/./packages/core/src/app/ui/accordion/AccordionContext.tsx","webpack://checkout/./packages/core/src/app/ui/accordion/Accordion.tsx","webpack://checkout/./packages/core/src/app/ui/form/Checklist.tsx","webpack://checkout/./packages/core/src/app/ui/accordion/AccordionItem.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItemInput.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItem.tsx"],"sourcesContent":["import { connect } from 'formik';\nimport React, { ComponentType, FunctionComponent, memo } from 'react';\nimport shallowEqual from 'shallowequal';\n\nimport ConnectFormikProps from './ConnectFormikProps';\n\nexport default function connectFormik<TProps extends ConnectFormikProps<TValues>, TValues = any>(\n    OriginalComponent: ComponentType<TProps>,\n): ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>> {\n    const InnerComponent: FunctionComponent<TProps> = memo(\n        (props) => <OriginalComponent {...props} />,\n        ({ formik: prevFormik, ...prevProps }, { formik: nextFormik, ...nextProps }) =>\n            shallowEqual(prevFormik, nextFormik) && shallowEqual(prevProps, nextProps),\n    );\n\n    const DecoratedComponent = connect<TProps, TValues>(InnerComponent) as ComponentType<\n        Omit<TProps, keyof ConnectFormikProps<TValues>>\n    >;\n\n    DecoratedComponent.displayName = `ConnectFormik(${\n        OriginalComponent.displayName || OriginalComponent.name\n    })`;\n\n    return DecoratedComponent;\n}\n","import { CustomError, setPrototypeOf } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class UnassignItemError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'UNASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.unassign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, UnassignItemError.prototype);\n    }\n}\n","import { Checkout } from '@bigcommerce/checkout-sdk';\n\nimport { getPreselectedPayment } from '../payment';\n\nexport default function getShippingMethodId(checkout: Checkout): string | undefined {\n    const SHIPPING_METHOD_IDS = ['amazonpay'];\n    const preselectedPayment = getPreselectedPayment(checkout);\n\n    return preselectedPayment && SHIPPING_METHOD_IDS.indexOf(preselectedPayment.providerId) > -1\n        ? preselectedPayment.providerId\n        : undefined;\n}\n","import { Country, FormField } from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport React, { FunctionComponent } from 'react';\nimport { lazy } from 'yup';\n\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString, withLanguage, WithLanguageProps } from '../locale';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Form } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\nimport { Modal, ModalHeader } from '../ui/modal';\n\nimport AddressForm from './AddressForm';\nimport getAddressFormFieldsValidationSchema from './getAddressFormFieldsValidationSchema';\nimport { AddressFormValues } from './mapAddressToFormValues';\n\nexport interface AddressFormModalProps extends AddressFormProps {\n    isOpen: boolean;\n    onAfterOpen?(): void;\n}\n\nexport interface AddressFormProps {\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    shouldShowSaveAddress?: boolean;\n    defaultCountryCode?: string;\n    isFloatingLabelEnabled?: boolean;\n    getFields(countryCode?: string): FormField[];\n    onSaveAddress(address: AddressFormValues): void;\n    onRequestClose?(): void;\n}\n\nconst SaveAddress: FunctionComponent<\n    AddressFormProps & WithLanguageProps & FormikProps<AddressFormValues>\n> = ({\n    googleMapsApiKey,\n    getFields,\n    countriesWithAutocomplete,\n    countries,\n    values,\n    setFieldValue,\n    isLoading,\n    onRequestClose,\n    isFloatingLabelEnabled,\n}) => (\n    <Form autoComplete=\"on\">\n        <LoadingOverlay isLoading={isLoading}>\n            <AddressForm\n                countries={countries}\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                countryCode={values.countryCode}\n                formFields={getFields(values.countryCode)}\n                googleMapsApiKey={googleMapsApiKey}\n                setFieldValue={setFieldValue}\n                shouldShowSaveAddress={false}\n                isFloatingLabelEnabled={isFloatingLabelEnabled}\n            />\n            <div className=\"form-actions\">\n                <a\n                    className=\"button optimizedCheckout-buttonSecondary\"\n                    href=\"#\"\n                    onClick={preventDefault(onRequestClose)}\n                >\n                    <TranslatedString id=\"common.cancel_action\" />\n                </a>\n\n                <Button\n                    disabled={isLoading}\n                    id=\"checkout-save-address\"\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"address.save_address_action\" />\n                </Button>\n            </div>\n        </LoadingOverlay>\n    </Form>\n);\n\nconst SaveAddressForm = withLanguage(\n    withFormik<AddressFormProps & WithLanguageProps, AddressFormValues>({\n        handleSubmit: (values, { props: { onSaveAddress } }) => {\n            onSaveAddress(values);\n        },\n        mapPropsToValues: ({ defaultCountryCode = '' }) => ({\n            firstName: '',\n            lastName: '',\n            address1: '',\n            address2: '',\n            customFields: {},\n            country: '',\n            countryCode: defaultCountryCode,\n            stateOrProvince: '',\n            stateOrProvinceCode: '',\n            postalCode: '',\n            phone: '',\n            city: '',\n            company: '',\n            shouldSaveAddress: false,\n        }),\n        validationSchema: ({ language, getFields }: AddressFormProps & WithLanguageProps) =>\n            lazy<Partial<AddressFormValues>>((values) =>\n                getAddressFormFieldsValidationSchema({\n                    language,\n                    formFields: getFields(values && values.countryCode),\n                }),\n            ),\n    })(SaveAddress),\n);\n\nconst AddressFormModal: FunctionComponent<AddressFormModalProps> = ({\n    isOpen,\n    onAfterOpen,\n    onRequestClose,\n    ...addressFormProps\n}) => (\n    <Modal\n        additionalModalClassName=\"modal--medium\"\n        header={\n            <ModalHeader>\n                <TranslatedString id=\"address.add_address_heading\" />\n            </ModalHeader>\n        }\n        isOpen={isOpen}\n        onAfterOpen={onAfterOpen}\n        onRequestClose={onRequestClose}\n        shouldShowCloseButton={true}\n    >\n        <SaveAddressForm {...addressFormProps} onRequestClose={onRequestClose} />\n    </Modal>\n);\n\nexport default AddressFormModal;\n","import { CustomError, setPrototypeOf } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class AssignItemInvalidAddressError extends CustomError {\n    constructor(data?: Error) {\n        super({\n            name: 'ASSIGN_ITEM_INVALID_ADDRESS',\n            message: getLanguageService().translate('shipping.assign_item_invalid_address_error'),\n            title: getLanguageService().translate(\n                'shipping.assign_item_invalid_address_error_heading',\n            ),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemInvalidAddressError.prototype);\n    }\n}\n","import { CustomError, setPrototypeOf } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class AssignItemFailedError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'ASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.assign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemFailedError.prototype);\n    }\n}\n","import { Consignment } from '@bigcommerce/checkout-sdk';\nimport { find, includes } from 'lodash';\n\nexport default function findConsignment(\n    consignments: Consignment[],\n    itemId: string,\n): Consignment | undefined {\n    return find(consignments, (consignment) => includes(consignment.lineItemIds, itemId));\n}\n","import { Cart, Consignment, PhysicalItem } from '@bigcommerce/checkout-sdk';\nimport { isNil, reduce } from 'lodash';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport default function getShippableLineItems(\n    cart: Cart,\n    consignments: Consignment[],\n): ShippableItem[] {\n    return reduce(\n        (cart && cart.lineItems.physicalItems) || [],\n        (result, item, i) =>\n            !item.addedByPromotion && isNil(item.parentId)\n                ? result.concat(...splitItem(item, consignments, i))\n                : result,\n        [] as ShippableItem[],\n    );\n}\n\nfunction splitItem(\n    item: PhysicalItem,\n    consignments: Consignment[],\n    lineItemIndex: number,\n): ShippableItem[] {\n    let splitItems: ShippableItem[] = [];\n    const consignment = findConsignment(consignments, item.id as string);\n\n    for (let i = 0; i < item.quantity; i++) {\n        splitItems = splitItems.concat({\n            ...item,\n            key: `${item.variantId}-${item.productId}-${lineItemIndex}-${i}`,\n            consignment,\n            quantity: 1,\n        });\n    }\n\n    return splitItems;\n}\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { AddressSelect } from '../address';\n\nimport ShippableItem from './ShippableItem';\n\nexport interface ItemAddressSelectProps {\n    item: ShippableItem;\n    addresses: CustomerAddress[];\n    onSelectAddress(address: Address, itemId: string, itemKey: string): void;\n    onUseNewAddress(address: Address | undefined, itemId: string, itemKey: string): void;\n}\n\nconst ItemAddressSelect: FunctionComponent<ItemAddressSelectProps> = ({\n    item: { id, key, imageUrl, quantity, name, options, consignment },\n    addresses,\n    onSelectAddress,\n    onUseNewAddress,\n}) => {\n    const handleUseNewAddress = useCallback(\n        (address: Address) => {\n            onUseNewAddress(address, id as string, key);\n        },\n        [id, onUseNewAddress, key],\n    );\n\n    const handleSelectAddress = useCallback(\n        (address: Address) => {\n            onSelectAddress(address, id as string, key);\n        },\n        [id, key, onSelectAddress],\n    );\n\n    return (\n        <div className=\"consignment\">\n            <figure className=\"consignment-product-figure\">\n                {imageUrl && <img alt={name} src={imageUrl} />}\n            </figure>\n\n            <div className=\"consignment-product-body\">\n                <h4 className=\"optimizedCheckout-contentPrimary\">{`${quantity} x ${name}`}</h4>\n\n                {(options || []).map(({ name: optionName, value, nameId }) => (\n                    <ul\n                        className=\"product-options optimizedCheckout-contentSecondary\"\n                        data-test=\"consigment-item-product-options\"\n                        key={nameId}\n                    >\n                        <li className=\"product-option\">{`${optionName} ${value}`}</li>\n                    </ul>\n                ))}\n\n                <AddressSelect\n                    addresses={addresses}\n                    onSelectAddress={handleSelectAddress}\n                    onUseNewAddress={handleUseNewAddress}\n                    selectedAddress={consignment && consignment.shippingAddress}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default memo(ItemAddressSelect);\n","import React from \"react\"\n\nfunction ShippingCalendar(props: any) {\n    const className = () => {\n        return props.disabled\n        ? 'shipping-calendar-container-disabled'\n        : 'shipping-calendar-container'\n    }\n    return(\n        <div className={className()}>{props.children}</div>\n    )\n}\n\nexport default ShippingCalendar","import React from \"react\";\n\nfunction ShippingInfo(props: any) {\n    return(\n        <div className=\"shipping-info-container\">{props.children}</div>\n    )\n}\n\nexport default ShippingInfo","import React from \"react\";\n\nfunction DatesSummary(props: any) {\n    return(\n        <div className=\"dates-summary-container\">{props.children}</div>\n    )\n}\n\nexport default DatesSummary","import React from \"react\";\nimport CustomIcon from \"../CustomIcon\";\nimport IconContainer from \"../IconContainer\";\n\nconst ShippingBanner = (props: any) => {\n    const { mainMessage, mainMessageIcon, secondMessage, secondMessageIcon, className, listItems } = props\n\n    const renderIcon = (source: String) => {\n        return(\n            <IconContainer className='banner-icon-container'>\n                <CustomIcon imageSource={source} />\n            </IconContainer>\n        )\n    }\n\n    const IconsContainer =  () => {\n        return (\n            <div className=\"banner-icons-container\">\n                { mainMessageIcon && renderIcon(mainMessageIcon) }\n                { secondMessageIcon && renderIcon(secondMessageIcon) }\n            </div>\n        )\n    }\n\n    const ListItem = (item: { message: string}) => {\n        return (\n            <p className=\"banner-second-message\">{ item.message }</p>\n        )\n    }\n\n    const MessageContainer = () => {\n        return (\n            <div className=\"banner-message-container\">\n                { mainMessage && <p className=\"banner-main-message\">{ mainMessage }</p> }\n                { secondMessage && <p className=\"banner-second-message\">{ secondMessage }</p> }\n                { listItems && listItems.length > 0 && listItems.map((item: any, index: number) => <ListItem key={index} {...item} /> ) }\n            </div>\n        )\n    }\n\n    return(\n        <div className={className}>\n            { mainMessageIcon && <IconsContainer /> }\n            { mainMessage && <MessageContainer /> }\n        </div>\n    )\n}\n\nexport default ShippingBanner","import React from \"react\";\nimport CookAndShipIcon from \"../CustomIcon\";\nimport EstimatedArrivalIcon from \"../CustomIcon\";\nimport IconContainer from \"../IconContainer\";\n\nconst ShippingInfoBanner = (props: any) => {\n    const { mainMessage, secondMessage } = props\n    return(\n        <div className=\"shipping-info-banner\">\n            <div className=\"banner-icons-container\">\n                    <IconContainer className='banner-icon-container'>\n                        <CookAndShipIcon imageSource='https://res.cloudinary.com/garrett-brands/image/upload/v1665017783/Garrett-Website/2022/9-September/Checkout%20Icons/cook-date.svg' />\n                    </IconContainer>\n                    <IconContainer className='banner-icon-container'>\n                        <EstimatedArrivalIcon imageSource='https://res.cloudinary.com/garrett-brands/image/upload/v1663968753/Garrett-Website/2022/9-September/Checkout%20Icons/arrival-estimate.svg' />\n                    </IconContainer>\n                </div>\n            <div className=\"banner-message-container\">\n                <p className=\"banner-main-message\">{ mainMessage }</p>\n                <p className=\"banner-second-message\">{ secondMessage }</p>\n            </div>\n        </div>\n    )\n}\n\nexport default ShippingInfoBanner","import React, { useEffect, useState } from \"react\";\nimport { Legend, Fieldset } from \"../../../ui/form\";\nimport ShippingCalendar from \"./ShippingCalendar\";\nimport DatePicker from 'react-datepicker'\nimport ShippingInfo from \"./ShippingInfo\";\nimport DatesSummary from \"./DatesSummary\";\nimport SelectedShipDate from \"./SelectedShipDate\";\nimport ArrivalDate from \"./ArrivalDate\";\nimport ShippingBanner from \"./ShippingBanner\";\nimport ShippingInfoBanner from \"./ShippingInfoBanner\";\n\nconst ShipDate = (props: any) => {\n    \n    const {\n        cart,\n        isMultiShippingMode,\n        consignments, \n        shipDate, \n        setShipDate, \n        arrivalDate, \n        setArrivalDate,\n        isActiveCart,\n        setUnavailableItems,\n        itemsUnavailableToShip,\n        setItemsUnavailableToShip,\n    } = props\n\n    const today = new Date()\n    const todayReset = today.setHours(0,0,0,0)\n    const advanceShippingMessage = \"Ordering to enjoy at a later date? Schedule your shipping date up to 25 days in advance. Available on select items.\"\n    const shipDateMessage = 'Cook and ship date is when your order is cooked, it leaves our kitchen on the same day.'\n    const arrivalDateMessage = 'Estimated arrival date depends on the ship date and UPS shipping method chosen.'\n    const arrivalDateMessageMulti = 'Arrival date depends on the ship date, destination, and UPS shipping method chosen.'\n    const customFields = consignments[0]?.shippingAddress.customFields.length > 0\n    \n    const [address, setAddress] = useState(Object)\n    const [selectedShippingOption, setSelectedShippingOption] = useState(Object)\n    const [availableDates, setAvailableDates] = useState(new Array)\n    const [blackoutDates, setBlackoutDates] = useState(new Array)\n    const [promotionalItems, setPromotionalItems] = useState(new Array)\n    const [nextAvailableDate, setNextAvailableDate] = useState(today)\n    const [inventoryData, setInventoryData] = useState(new Array)\n\n    useEffect(() => {\n        fetchBlackoutDates()\n        fetchShipByDates()\n        fetchInventoryData()\n    }, [])\n\n    useEffect(() => {\n        if (Object.keys(address).length > 0 && selectedShippingOption && !isMultiShippingMode) {\n            fetchUPSEstimate()\n        }\n    }, [shipDate, address, selectedShippingOption, isMultiShippingMode])\n\n    useEffect(() => {\n        setAvailableDates(getAvailableDates(today, maxDate()))\n    }, [blackoutDates])\n\n    useEffect(() => {\n        if (availableDates.length > 0) {\n            setNextAvailableDate(availableDates[0])\n        }\n    }, [availableDates])\n    \n    useEffect(() => {\n        const currentShipDate = shipDate\n        var savedShipDate\n        if (customFields && isActiveCart) {\n            savedShipDate = consignments[0].shippingAddress.customFields.find((customField: { fieldId: string; }) => customField.fieldId === 'field_30')\n            savedShipDate = new Date(savedShipDate.fieldValue)\n        }\n        savedShipDate && isAfterNextAvailable(savedShipDate) && filterDates(savedShipDate) \n        ? setShipDate(savedShipDate)\n        : ( filterDates(currentShipDate)\n        ? setShipDate(currentShipDate)\n        : setShipDate(nextAvailableDate) )\n    }, [nextAvailableDate])\n\n    useEffect(() => {\n        if (props.consignments[0]) {\n            const { address, selectedShippingOption } = props.consignments[0]\n            setAddress(address)\n            setSelectedShippingOption(selectedShippingOption)\n        }\n    }, [props])\n\n    useEffect(() => {\n        var itemsUnavailableToShip = new Array\n        if (promotionalItems.length > 0) {\n            promotionalItems.map(item => {\n                if (endsAfterShipDate(shipDate, item)) {\n                    itemsUnavailableToShip.push(item)\n                }\n            })\n            setItemsUnavailableToShip(itemsUnavailableToShip)\n        }\n    }, [shipDate, promotionalItems])\n\n    useEffect(() => {\n        window.scroll(0, 0)\n        const calendarDays: NodeListOf<HTMLDivElement> | null = document.querySelectorAll('.react-datepicker__day')\n        if (calendarDays instanceof NodeList) {\n            calendarDays.forEach(day => day.removeAttribute('tabIndex'))\n        }\n    }, [])\n\n    useEffect(() => {\n        var unavailableItems = new Array\n        inventoryData.map(item => {\n            if (item.quantity > item.qty_available || item.status === 'OOS') {\n                unavailableItems.push(item)\n            }\n        })\n        if (unavailableItems.length > 0) {\n            setUnavailableItems(unavailableItems)\n        }\n    }, [inventoryData.length > 0])\n\n    const getAvailableDates = (start: Date, end: Date) => {\n        var dates = new Array\n        var date = new Date(start);\n        while (date <= end) {\n            if (filterDates(date)) {\n                dates.push(new Date(date))\n            }\n            date.setDate(date.getDate() + 1)\n        }\n        return dates\n    }\n\n    const filterDates = (date: Date) => {\n        return !isToday(date) && isWeekday(date) && !isBlackoutDate(date) ||\n        !isToday(date) && isAvailableWeekendDate(date) && !isBlackoutDate(date)\n    }\n\n    const isAvailableWeekendDate = (date: Date) => {\n        const availableWeekendDates = [\"2022-12-10\", \"2022-12-11\", \"2022-12-17\", \"2022-12-18\"]\n        const year = date.getFullYear()\n        const month = String(date.getMonth() + 1).padStart(2, '0')\n        const day = String(date.getDate()).padStart(2, '0')\n        const formattedDate = [year, month, day].join('-')\n        return availableWeekendDates.includes(formattedDate)\n    }\n\n    const isAfterNextAvailable = (date: Date) => {\n        return date.getTime() > nextAvailableDate.getTime()\n    }\n\n    const isToday = (date: Date) => {\n        return date.getTime() === today.getTime()\n    }\n\n    const isWeekday = (date: Date) => {\n        const day = date.getDay()\n        return day !== 0 && day !== 6;\n    }\n\n    const isBlackoutDate = (date: Date) => {\n        const year = date.getFullYear()\n        const month = String(date.getMonth() + 1).padStart(2, '0')\n        const day = String(date.getDate()).padStart(2, '0')\n        const formattedDate = [year, month, day].join('-')\n        return blackoutDates.includes(formattedDate)\n    }\n\n    const endsAfterShipDate = (date: Date, item: { mustShipDate: String }) => {\n        var isAfter = false\n            const shipByDate = item.mustShipDate\n            const [day, month, year] = shipByDate.split('-')\n            const formattedDate = new Date([month, day, year].join('/'))\n            if (date.getTime() > formattedDate.getTime()) {\n                isAfter = true\n            }\n        return isAfter\n    }\n\n    const maxDate = () => {\n        const maxDate = new Date(todayReset)\n        maxDate.setDate(maxDate.getDate() + 25)\n        return maxDate\n    }\n\n    const fetchUPSEstimate = () => {\n\n        const year = shipDate.getFullYear()\n        const month = String(shipDate.getMonth() + 1).padStart(2, '0')\n        const date = String(shipDate.getDate()).padStart(2, '0')\n        const formattedDate = [year, month, date].join('')\n\n        var body = {\n            \"to\": {\n                \"city\": address.city,\n                \"state\": address.stateOrProvince,\n                \"postal_code\": address.postalCode,\n                \"country\": address.country\n            },\n            \"pickup_date\": formattedDate,\n            \"shipping_method\": selectedShippingOption.description\n        }\n        \n        var reqObj = {\n            method: 'POST',\n            headers: {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\",\n              \"x-access-key\": \"XM9xCpdv7TC1ZrzZ3ZeNYKUoCK1GHbZw\"\n            },\n            body: JSON.stringify(body)\n          }\n\n        fetch(`https://api.gbdev.cloud/v1/shipping/expected-date`, reqObj)\n        .then(resp => resp.json())\n        .then(estimate => {\n            const estimatedArrival = new Date(estimate.data.EstimatedArrival.Date.replaceAll('-', '/'))\n            setArrivalDate(estimatedArrival)\n        })\n        .catch(error => {\n            console.log('UPS ESTIMATED ARRIVAL ERROR =>', error)\n        })\n\n    }\n\n    const fetchBlackoutDates = () => {\n\n        const year = today.getFullYear()\n        const month = String(today.getMonth() + 1).padStart(2, '0')\n        const date = String(today.getDate()).padStart(2, '0')\n        const formattedDate = [date, month, year].join('-')\n\n        fetch(`https://api.gbdev.cloud/v1/ship-dates/blackout-dates?afterDate=${formattedDate}`, {\n            method: 'GET',\n            headers: {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\",\n              \"x-access-key\": \"XM9xCpdv7TC1ZrzZ3ZeNYKUoCK1GHbZw\"\n            }\n        })\n        .then(resp => resp.json())\n        .then(({results}) => {\n            const dates = results.map((result: any) => result.blackoutDate.split('-'))\n            const formattedDates = dates.map((date: string) => [date[2], date[1], date[0]].join('-'))\n            setBlackoutDates(formattedDates)\n        })\n        .catch(error => {\n            console.log('BLACKOUT DATES ERROR =>', error)\n        })\n    }\n\n    const fetchShipByDates = () => {\n\n        fetch(`https://api.gbdev.cloud/v1/ship-dates/must-ship-dates/`, {\n            method: 'GET',\n            headers: {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\",\n              \"x-access-key\": \"XM9xCpdv7TC1ZrzZ3ZeNYKUoCK1GHbZw\"\n            }\n        })\n        .then(resp => resp.json())\n        .then(({results}) => {\n            var productIds = new Array\n            var productSKUs = new Array\n            var promotionalItems = new Array\n            cart.lineItems.physicalItems.map((item: { productId: Number, sku: String }) => {\n                productIds.push(item.productId.toString())\n                productSKUs.push(item.sku)\n            })\n            results.map((item: { productSKU: String, productName: String, mustShipDate: String }) => {\n                if (productIds.includes(item.productSKU) || productSKUs.includes(item.productSKU)) {\n                    promotionalItems.push(item)\n                }\n            } )\n            setPromotionalItems(promotionalItems)\n        })\n        .catch(error => {\n            console.log('SHIP BY DATES ERROR =>', error)\n        })\n    }\n\n    const fetchInventoryData = () => {\n        var skus = new Array\n        cart.lineItems.physicalItems.map((item: {sku: String, quantity: String, name: String, options: Object}) => {\n            skus.push({\n                'sku': item.sku, \n                'quantity': item.quantity,\n                'name': item.name,\n                'options': item.options\n            })\n        })\n\n        var body = {\n            \"inventoryList\": skus\n        }\n\n        const reqObj = {\n            method: 'POST',\n            headers: {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\",\n              \"x-access-key\": \"XM9xCpdv7TC1ZrzZ3ZeNYKUoCK1GHbZw\"\n            },\n            body: JSON.stringify(body)\n          }\n\n        fetch(`https://api.gbdev.cloud/v1/client/inventory/check-quantities`, reqObj)\n        .then(resp => resp.json())\n        .then(({data}) => {\n            data.map((item: {qty_available: Number, status: String, variant_sku: string}) => {\n                skus.find(sku => {\n                    if (sku.sku === item.variant_sku) {\n                        sku.qty_available = item.qty_available\n                        sku.status = item.status\n                    }\n                })\n            })\n            setInventoryData(skus)\n        })\n        .catch(error => {\n            console.log('INVENTORY REQUEST ERROR =>', error)\n        })\n    }\n    \n    const renderUnavailableToShipMessage = (type: string) => {\n        var products = new Array\n        itemsUnavailableToShip.map((item: { productName: string, mustShipDate: any }) => {\n            const shipByDate = item.mustShipDate\n            const [day, month, year] = shipByDate.split('-')\n            const formattedShipDate = new Date([month, day, year].join('/')).toLocaleDateString('en-us', { weekday:\"short\", month:\"short\", day:\"numeric\"})\n            var productDetails = { message: `${item.productName} must ship by ${formattedShipDate}` }\n            products.push(productDetails)\n        })\n        var message = [`Selected Cook and Ship date (${shipDate.toLocaleDateString('en-us', { weekday:\"short\", month:\"short\", day:\"numeric\"})}) is not available for ${products.length} ${products.length > 1 ? 'promotional or seasonal items in your cart.': 'promotional or seasonal item in your cart.' } Please select an earlier date or choose a different item.`]\n        return type === 'main'\n        ? message\n        : products\n    }\n\n    const highlightDates = () => {\n        if (!isMultiShippingMode) {\n            return [arrivalDate]\n        }\n        else {\n            return []\n        }\n    }\n\n    return(\n        <Fieldset id='ship-date'>\n            <Legend testId=\"ship-date-form-heading\">Cooking and Shipping Date</Legend>\n                    <ShippingBanner\n                        className='advance-shipping-banner'\n                        mainMessage={advanceShippingMessage} \n                    />\n                <ShippingCalendar>\n                        <DatePicker \n                            calendarClassName=\"ship-date-calendar\"\n                            selected={shipDate}\n                            onChange={(date:Date) => setShipDate(date)}\n                            minDate={today}\n                            maxDate={maxDate()}\n                            filterDate={filterDates}\n                            highlightDates={highlightDates()}\n                            inline \n                        />\n                </ShippingCalendar>\n                    { itemsUnavailableToShip.length > 0 &&\n                        <ShippingBanner\n                            className='unavailable-date-alert-banner'\n                            mainMessage={renderUnavailableToShipMessage('main')}\n                            listItems={renderUnavailableToShipMessage('second')}/>\n                    }\n            { itemsUnavailableToShip.length === 0 &&\n                <ShippingInfo>\n                    <DatesSummary>\n                        <SelectedShipDate shipDate={shipDate} />\n                        { !isMultiShippingMode && <ArrivalDate arrivalDate={arrivalDate} /> }\n                    </DatesSummary>\n                        <ShippingInfoBanner\n                            mainMessage={shipDateMessage}\n                            secondMessage={ isMultiShippingMode ? arrivalDateMessageMulti : arrivalDateMessage}\n                        />\n                </ShippingInfo>\n            }\n        </Fieldset>\n    )\n}\n\nexport default ShipDate","import React from \"react\";\nimport { Fieldset, Legend } from \"../../../ui/form\";\nimport ShippingCalendar from \"./ShippingCalendar\";\nimport DatePicker from 'react-datepicker'\nimport ShippingBanner from \"./ShippingBanner\";\n\nconst ShipDateDisabled = () => {\n    const bannerMessage = 'Please enter a valid shipping address and phone number in order to select a ship date.'\n    return(\n        <Fieldset id='ship-date'>\n            <Legend testId=\"ship-date-form-heading\">Cooking and Shipping Date</Legend>\n                <ShippingBanner bannerMessage={bannerMessage} />\n                <ShippingCalendar disabled={true}>\n                        <DatePicker \n                            calendarClassName=\"ship-date-calendar\"\n                            onChange={() => alert(bannerMessage)}\n                            filterDate={() => false}\n                            minDate={new Date()}\n                            maxDate={new Date()}\n                            inline />\n                </ShippingCalendar>\n        </Fieldset>\n    )\n}\n\nexport default ShipDateDisabled","import React from \"react\";\n\nconst GiftOptions = (props: any) => {\n    const { className } = props\n    return(\n        <div className={className}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default GiftOptions","import React from \"react\";\nimport IconContainer from \"../IconContainer\";\nimport ExpandCircleDownRoundedIcon from '@mui/icons-material/ExpandCircleDownRounded';\nimport GiftMessageIcon from \"../CustomIcon\";\n\nconst GiftMessageCollapsed = (props: any) => {\n    const { giftMessageLength } = props\n    return(\n        <div className=\"toggle-content-container\">\n            { giftMessageLength > 0 ? <p>Gift Message Included</p> : <p>Add a Gift Message!</p> }\n                <IconContainer className='icon-container-gift-header'>\n                    <GiftMessageIcon imageSource='https://res.cloudinary.com/garrett-brands/image/upload/v1662682064/Garrett-Website/2022/2-February/Promo%20Details/gift-icon-white-cropped.png' />\n                </IconContainer>\n                <IconContainer className='icon-container-expand'>\n                    <ExpandCircleDownRoundedIcon />\n                </IconContainer>\n        </div>\n    )\n}\n\nexport default GiftMessageCollapsed","import React from \"react\";\nimport IconContainer from \"../IconContainer\";\nimport ExpandCircleDownRoundedIcon from '@mui/icons-material/ExpandCircleDownRounded';\nimport DeleteForeverRoundedIcon from '@mui/icons-material/DeleteForeverRounded';\n\nconst GiftMessageExpanded = (props: any) => {\n    const { giftMessageLength, clearGiftMessage } = props\n    return(\n        <div className=\"toggle-content-container\">\n            { giftMessageLength > 0 ? <p>Gift Message Included</p> : <p>Add a Gift Message!</p> }\n            <p className=\"gift-message-length\">{giftMessageLength} / 350</p>\n            { giftMessageLength > 0 && \n            <IconContainer className='icon-container-delete' onClick={ clearGiftMessage }>\n                <DeleteForeverRoundedIcon />\n            </IconContainer>\n            }\n            <IconContainer className='icon-container-collapse'>\n                <ExpandCircleDownRoundedIcon />\n            </IconContainer>\n        </div>\n    )\n}\n\nexport default GiftMessageExpanded","import React, { useEffect, useState } from \"react\";\nimport GiftMessageCollapsed from \"./GiftMessageCollapsed\";\nimport GiftMessageExpanded from \"./GiftMessageExpanded\";\n\nconst GiftMessageToggle = (props: any) => {\n    const { giftMessageToggle, toggleGiftMessage, giftMessageLength, clearGiftMessage } = props\n    const [className, setClassName] = useState(String)\n\n    useEffect(() => {\n        setClassName(() => {\n            return giftMessageToggle\n            ? 'toggle-gift-message-collapse'\n            : 'toggle-gift-message-expand'\n        })\n    }, [giftMessageToggle])\n\n    return(\n        <div className={className} onClick={toggleGiftMessage}>\n            { giftMessageToggle \n            ? <GiftMessageExpanded \n                giftMessageLength={ giftMessageLength } \n                clearGiftMessage={ clearGiftMessage } />\n            : <GiftMessageCollapsed \n                giftMessageLength={ giftMessageLength } /> }\n        </div>\n    )\n}\n\nexport default GiftMessageToggle","import React from \"react\";\nimport IconContainer from \"../IconContainer\";\nimport GiftMessageIcon from \"../CustomIcon\";\n\nconst GiftMessageForm = (props: any) => {\n    const { giftMessage, setGiftMessage } = props\n    const maxLength = 350\n    const maxRows = 10\n    const placeholder = \"Include up to 350 characters and 10 lines, please do not use emojis or special characters. Don't forget to sign your name!\"\n    \n    const renderGiftMessage = () => {\n        if (giftMessage.length > 0) {\n            return giftMessage\n        }\n    }\n\n    return(\n        <>\n            <IconContainer className='icon-container-gift-form'>\n               <GiftMessageIcon imageSource='https://res.cloudinary.com/garrett-brands/image/upload/v1662682064/Garrett-Website/2022/2-February/Promo%20Details/gift-icon-gold-cropped.png' />\n            </IconContainer>\n            <textarea\n                className=\"gift-message-input\" \n                maxLength={maxLength} \n                rows={maxRows} \n                placeholder={placeholder} \n                onChange={event => setGiftMessage(event.target.value)}\n                defaultValue={renderGiftMessage()}>\n            </textarea>\n        </>\n    )\n}\n\nexport default GiftMessageForm","import React, { useEffect, useState } from \"react\";\nimport { Fieldset, Legend } from \"../../../ui/form\";\nimport GiftOptions from \"./GiftOptions\";\nimport GiftMessageToggle from \"./GiftMessageToggle\";\nimport GiftMessageForm from \"./GiftMessageForm\";\n\nconst GiftMessage = (props: any) => {\n\n    const {\n        consignments, \n        giftMessage, \n        setGiftMessage,\n        isActiveCart\n     } = props\n\n    const customFields = consignments[0]?.shippingAddress.customFields.length > 0\n    const [giftMessageToggle, setGiftMessageToggle] = useState(false)\n\n    useEffect(() => {\n        var savedGiftMessage\n        if (customFields && isActiveCart) {\n            savedGiftMessage = consignments[0].shippingAddress.customFields.find((customField: { fieldId: string, fieldValue: string }) => customField.fieldId === 'field_32')\n            savedGiftMessage = savedGiftMessage.fieldValue\n            setGiftMessage(savedGiftMessage)\n            setGiftMessageToggle(savedGiftMessage.length > 0)\n        }\n    }, [])\n\n    const handleToggle = () => {\n        setGiftMessageToggle(!giftMessageToggle)\n    }\n\n    const handleClear = () => {\n        setGiftMessage('')\n        setGiftMessageToggle(true)\n    }\n\n    return(\n        <Fieldset id='gift-message'>\n            <Legend testId=\"gift-message-form-heading\"><span>Gift Options</span></Legend>\n            <GiftOptions className='gift-options-container'>\n                <GiftMessageToggle \n                    toggleGiftMessage={ handleToggle } \n                    giftMessageToggle={ giftMessageToggle }\n                    giftMessageLength={ giftMessage.length }\n                    clearGiftMessage={ handleClear } />\n\n                { giftMessageToggle && \n                <GiftMessageForm \n                    setGiftMessage={ setGiftMessage }\n                    giftMessage={ giftMessage } /> }\n            </GiftOptions>\n        </Fieldset>\n    )\n}\n\nexport default GiftMessage","import React from \"react\";\nimport { Fieldset, Legend } from \"../../../ui/form\";\nimport GiftOptions from \"./GiftOptions\";\nimport AddGiftMessage from \"./GiftMessageCollapsed\";\n\nconst GiftMessageDisabled = () => {\n    return(\n        <Fieldset id='gift-message'>\n            <Legend testId=\"gift-message-form-heading\"><span>Gift Options</span></Legend>\n            <GiftOptions>\n                <div className='toggle-gift-message-expand-disabled'>\n                    <AddGiftMessage />\n                </div>\n            </GiftOptions>\n        </Fieldset>\n    )\n}\n\nexport default GiftMessageDisabled","import { ShippingOption } from '@bigcommerce/checkout-sdk';\n\nexport default function getRecommendedShippingOption(\n    availableShippingOptions: ShippingOption[],\n): ShippingOption | undefined {\n    if (!availableShippingOptions) {\n        return;\n    }\n\n    return availableShippingOptions.find(\n        ({ isRecommended }: { isRecommended: any }) => isRecommended,\n    );\n}\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { EMPTY_ARRAY } from '../../common/utility';\nimport { Checklist, ChecklistItem } from '../../ui/form';\nimport { LoadingOverlay } from '../../ui/loading';\n\nimport StaticShippingOption from './StaticShippingOption';\n\ninterface ShippingOptionListItemProps {\n    consignmentId: string;\n    shippingOption: ShippingOption;\n}\n\nconst ShippingOptionListItem: FunctionComponent<ShippingOptionListItemProps> = ({\n    consignmentId,\n    shippingOption,\n}) => {\n    const renderLabel = useCallback(\n        () => (\n            <div className=\"shippingOptionLabel\">\n                <StaticShippingOption displayAdditionalInformation={true} method={shippingOption} />\n            </div>\n        ),\n        [shippingOption],\n    );\n\n    return (\n        <ChecklistItem\n            htmlId={`shippingOptionRadio-${consignmentId}-${shippingOption.id}`}\n            label={renderLabel}\n            value={shippingOption.id}\n        />\n    );\n};\n\nexport interface ShippingOptionListProps {\n    consignmentId: string;\n    inputName: string;\n    isLoading: boolean;\n    selectedShippingOptionId?: string;\n    shippingOptions?: ShippingOption[];\n    onSelectedOption(consignmentId: string, shippingOptionId: string): void;\n}\n\nconst ShippingOptionsList: FunctionComponent<ShippingOptionListProps> = ({\n    consignmentId,\n    inputName,\n    isLoading,\n    shippingOptions = EMPTY_ARRAY,\n    selectedShippingOptionId,\n    onSelectedOption,\n}) => {\n    const handleSelect = useCallback(\n        (value: string) => {\n            onSelectedOption(consignmentId, value);\n        },\n        [consignmentId, onSelectedOption],\n    );\n\n    if (!shippingOptions.length) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay isLoading={isLoading}>\n            <Checklist\n                aria-live=\"polite\"\n                defaultSelectedItemId={selectedShippingOptionId}\n                name={inputName}\n                onSelect={handleSelect}\n            >\n                {shippingOptions.map((shippingOption) => (\n                    <ShippingOptionListItem\n                        consignmentId={consignmentId}\n                        key={shippingOption.id}\n                        shippingOption={shippingOption}\n                    />\n                ))}\n            </Checklist>\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(ShippingOptionsList);\n","import { CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { AnalyticsContextProps } from '@bigcommerce/checkout/analytics';\nimport { ChecklistSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { StaticAddress } from '../../address';\nimport { withAnalytics } from '../../analytics';\nimport { TranslatedString } from '../../locale';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport StaticConsignmentItemList from '../StaticConsignmentItemList';\n\nimport { ShippingOptionsProps, WithCheckoutShippingOptionsProps } from './ShippingOptions';\nimport './ShippingOptionsForm.scss';\nimport ShippingOptionsList from './ShippingOptionsList';\n\nexport type ShippingOptionsFormProps = ShippingOptionsProps & WithCheckoutShippingOptionsProps & AnalyticsContextProps;\n\nclass ShippingOptionsForm extends PureComponent<\n    ShippingOptionsFormProps & FormikProps<ShippingOptionsFormValues>\n> {\n    private unsubscribe?: () => void;\n\n    componentDidMount(): void {\n        const { subscribeToConsignments } = this.props;\n\n        this.unsubscribe = subscribeToConsignments(this.selectDefaultShippingOptions);\n    }\n\n    componentDidUpdate(): void {\n        const {\n            analyticsTracker,\n            consignments,\n            shouldShowShippingOptions\n        } = this.props;\n        \n        if (consignments?.length && shouldShowShippingOptions) {\n            analyticsTracker.showShippingMethods();\n        }\n    }\n\n    componentWillUnmount(): void {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n            this.unsubscribe = undefined;\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            consignments,\n            isMultiShippingMode,\n            selectShippingOption,\n            isLoading,\n            shouldShowShippingOptions,\n            invalidShippingMessage,\n            methodId\n        } = this.props;\n\n        if (!consignments?.length || !shouldShowShippingOptions) {\n            return (\n                <ChecklistSkeleton\n                    additionalClassName=\"shippingOptions-skeleton\"\n                    isLoading={isLoading()}\n                    rows={2}\n                >\n                    {this.renderNoShippingOptions(\n                        <TranslatedString\n                            id={\n                                methodId || isMultiShippingMode\n                                    ? 'shipping.select_shipping_address_text'\n                                    : 'shipping.enter_shipping_address_text'\n                            }\n                        />,\n                    )}\n                </ChecklistSkeleton>\n            );\n        }\n\n        return (\n            <>\n                {consignments.map((consignment) => (\n                    <div className=\"shippingOptions-container form-fieldset\" key={consignment.id}>\n                        {isMultiShippingMode && this.renderConsignment(consignment)}\n\n                        <ShippingOptionsList\n                            consignmentId={consignment.id}\n                            inputName={getRadioInputName(consignment.id)}\n                            isLoading={isLoading(consignment.id)}\n                            onSelectedOption={selectShippingOption}\n                            selectedShippingOptionId={\n                                consignment.selectedShippingOption &&\n                                consignment.selectedShippingOption.id\n                            }\n                            shippingOptions={consignment.availableShippingOptions}\n                        />\n\n                        {(!consignment.availableShippingOptions ||\n                            !consignment.availableShippingOptions.length) && (\n                            <ChecklistSkeleton\n                                additionalClassName=\"shippingOptions-skeleton\"\n                                isLoading={isLoading(consignment.id)}\n                                rows={2}\n                            >\n                                {this.renderNoShippingOptions(invalidShippingMessage)}\n                            </ChecklistSkeleton>\n                        )}\n                    </div>\n                ))}\n            </>\n        );\n    }\n\n    private selectDefaultShippingOptions: (state: CheckoutSelectors) => void = async ({ data }) => {\n        const { selectShippingOption, setFieldValue } = this.props;\n\n        const consignment = (data.getConsignments() || []).find(\n            ({ selectedShippingOption, availableShippingOptions: shippingOptions }) =>\n                !selectedShippingOption && shippingOptions,\n        );\n\n        if (!consignment || !consignment.availableShippingOptions) {\n            return;\n        }\n\n        const { availableShippingOptions, id } = consignment;\n        const recommendedOption = getRecommendedShippingOption(availableShippingOptions);\n        const singleShippingOption =\n            availableShippingOptions.length === 1 && availableShippingOptions[0];\n        const defaultShippingOption = recommendedOption || singleShippingOption;\n\n        if (!defaultShippingOption) {\n            return;\n        }\n\n        await selectShippingOption(id, defaultShippingOption.id);\n        setFieldValue(`shippingOptionIds.${id}`, defaultShippingOption.id);\n    };\n\n    private renderNoShippingOptions(message: ReactNode): ReactNode {\n        return (\n            <div className=\"shippingOptions-panel optimizedCheckout-overlay\">\n                <p\n                    aria-live=\"polite\"\n                    className=\"shippingOptions-panel-message optimizedCheckout-primaryContent\"\n                    role=\"alert\"\n                >\n                    {message}\n                </p>\n            </div>\n        );\n    }\n\n    private renderConsignment(consignment: Consignment): ReactNode {\n        const { cart } = this.props;\n\n        return (\n            <div className=\"staticConsignment\">\n                <strong>\n                    <TranslatedString id=\"shipping.shipping_address_heading\" />\n                </strong>\n\n                <StaticAddress address={consignment.shippingAddress} />\n\n                <StaticConsignmentItemList cart={cart} consignment={consignment} />\n            </div>\n        );\n    }\n}\n\nfunction getRadioInputName(consignmentId: string): string {\n    return `shippingOptionIds.${consignmentId}`;\n}\n\nexport interface ShippingOptionsFormValues {\n    shippingOptionIds: {\n        [shippingOptionIds: string]: string;\n    };\n}\n\nexport default withAnalytics(withFormik<ShippingOptionsFormProps, ShippingOptionsFormValues>({\n    handleSubmit: noop,\n    mapPropsToValues({ consignments }) {\n        const shippingOptionIds: { [id: string]: string } = {};\n\n        (consignments || []).forEach((consignment) => {\n            shippingOptionIds[consignment.id] = consignment.selectedShippingOption\n                ? consignment.selectedShippingOption.id\n                : '';\n        });\n\n        return { shippingOptionIds };\n    },\n})(ShippingOptionsForm));\n","import { Cart, CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { map, sortBy, uniq } from 'lodash';\nimport { createSelector } from 'reselect';\n\nimport { CheckoutContextProps, withCheckout } from '../../checkout';\nimport getShippableLineItems from '../getShippableLineItems';\nimport getShippingMethodId from '../getShippingMethodId';\n\nimport ShippingOptionsForm from './ShippingOptionsForm';\n\nexport interface ShippingOptionsProps {\n    isMultiShippingMode: boolean;\n    isUpdatingAddress?: boolean;\n    shouldShowShippingOptions: boolean;\n}\n\nexport interface WithCheckoutShippingOptionsProps {\n    invalidShippingMessage: string;\n    methodId?: string;\n    consignments?: Consignment[];\n    cart: Cart;\n    isSelectingShippingOption(consignmentId?: string): boolean;\n    subscribeToConsignments(subscriber: (state: CheckoutSelectors) => void): () => void;\n    selectShippingOption(consignmentId: string, optionId: string): Promise<CheckoutSelectors>;\n    isLoading(consignmentId?: string): boolean;\n}\n\nconst subscribeToConsignmentsSelector = createSelector(\n    ({ checkoutService }: CheckoutContextProps) => checkoutService.subscribe,\n    (subscribe) => (subscriber: (state: CheckoutSelectors) => void) => {\n        return subscribe(subscriber, ({ data }) => data.getConsignments());\n    },\n);\n\nconst isLoadingSelector = createSelector(\n    (_: CheckoutSelectors, { isUpdatingAddress }: ShippingOptionsProps) => isUpdatingAddress,\n    ({ statuses }: CheckoutSelectors) => statuses.isLoadingShippingOptions,\n    ({ statuses }: CheckoutSelectors) => statuses.isSelectingShippingOption,\n    ({ statuses }: CheckoutSelectors) => statuses.isUpdatingConsignment,\n    ({ statuses }: CheckoutSelectors) => statuses.isCreatingConsignments,\n    (\n        isUpdatingAddress,\n        isLoadingShippingOptions,\n        isSelectingShippingOption,\n        isUpdatingConsignment,\n        isCreatingConsignments,\n    ) => {\n        return (consignmentId?: string) => {\n            return (\n                isUpdatingAddress ||\n                isLoadingShippingOptions() ||\n                isSelectingShippingOption(consignmentId) ||\n                isUpdatingConsignment(consignmentId) ||\n                isCreatingConsignments()\n            );\n        };\n    },\n);\n\nconst sortConsignments = (cart: Cart, unsortedConsignments: Consignment[]): Consignment[] => {\n    if (unsortedConsignments.length < 2) {\n        return unsortedConsignments;\n    }\n\n    const shippableItems = getShippableLineItems(cart, unsortedConsignments);\n    const consignmentsOrder = uniq(map(shippableItems, 'consignment.id'));\n\n    return sortBy(unsortedConsignments, (consignment) => consignmentsOrder.indexOf(consignment.id));\n};\n\nexport function mapToShippingOptions(\n    { checkoutService, checkoutState }: CheckoutContextProps,\n    props: ShippingOptionsProps,\n): WithCheckoutShippingOptionsProps | null {\n    const {\n        data: { getCart, getConsignments, getConfig, getCustomer, getCheckout },\n        statuses: { isSelectingShippingOption },\n    } = checkoutState;\n\n    const customer = getCustomer();\n    const cart = getCart();\n    const config = getConfig();\n    const checkout = getCheckout();\n\n    if (!config || !checkout || !customer || !cart) {\n        return null;\n    }\n\n    const consignments = sortConsignments(cart, getConsignments() || []);\n    const methodId = getShippingMethodId(checkout);\n    const { shippingQuoteFailedMessage } = config.checkoutSettings;\n\n    return {\n        cart,\n        consignments,\n        invalidShippingMessage: shippingQuoteFailedMessage,\n        isLoading: isLoadingSelector(checkoutState, props),\n        isSelectingShippingOption,\n        methodId,\n        selectShippingOption: checkoutService.selectConsignmentShippingOption,\n        subscribeToConsignments: subscribeToConsignmentsSelector({\n            checkoutService,\n            checkoutState,\n        }),\n    };\n}\n\nexport default withCheckout(mapToShippingOptions)(ShippingOptionsForm);\n","import React from \"react\";\n\nconst GiftMessageDestination = (props: any) => {\n    const { shippingAddress } = props\n    \n    const renderRecipient = () =>{\n        if (shippingAddress.firstName && shippingAddress.lastName) {\n            return <p className=\"gift-message-recipient\">{shippingAddress.firstName} {shippingAddress.lastName}</p>\n        }\n    }\n\n    const renderShippingAddress = () => {\n        if (shippingAddress) {\n            return <p className=\"gift-message-address\">{shippingAddress.address1} {shippingAddress.address2} {shippingAddress.city}, {shippingAddress.stateOrProvinceCode} {shippingAddress.countryCode} {shippingAddress.postalCode}</p>\n        }\n    }\n\n    const renderRecipientCompany = () => {\n        if (shippingAddress.company) {\n            return <p className=\"gift-message-recipient-company\">{shippingAddress.company}</p>\n        }\n    }\n    \n    return(\n        <div className=\"gift-message-destination-container\">\n            {renderRecipient()}\n            {renderRecipientCompany()}\n            {renderShippingAddress()}\n        </div>\n    )\n}\n\nexport default GiftMessageDestination","import React, { useEffect, useState } from \"react\";\n// import { Fieldset, Legend } from \"../../../ui/form\";\nimport GiftOptions from \"./GiftOptions\";\nimport GiftMessageToggle from \"./GiftMessageToggle\";\nimport GiftMessageForm from \"./GiftMessageForm\";\nimport GiftMessageDestination from \"./GiftMessageDestination\";\n\nconst GiftMessageMulti = (props: any) => {\n\n    const {\n        consignment,\n        giftMessages,\n        setGiftMessages,\n        isActiveCart\n     } = props\n\n    const [giftMessageToggle, setGiftMessageToggle] = useState(false)\n    const [giftMessage, setGiftMessage] = useState('')\n\n    useEffect(() => {\n        giftMessages.map((item: any) => {\n            if (item.consignmentId === consignment.id && isActiveCart) {\n                setGiftMessage(item.giftMessage)\n                setGiftMessageToggle(item.giftMessage.length > 0)\n            }\n        })\n    }, [])\n\n    useEffect(() => {\n        setGiftMessages({\n            consignmentId: consignment.id,\n            giftMessage: giftMessage\n        })\n    }, [giftMessage])\n\n    const handleToggle = () => {\n        setGiftMessageToggle(!giftMessageToggle)\n    }\n\n    const handleClear = () => {\n        setGiftMessage('')\n        setGiftMessageToggle(true)\n    }\n\n    return(\n        <GiftOptions className='gift-options-multi-container'>\n            <GiftMessageDestination shippingAddress={ consignment.shippingAddress } />\n            <GiftMessageToggle \n                toggleGiftMessage={ handleToggle }\n                giftMessageToggle={ giftMessageToggle }\n                giftMessageLength={ giftMessage.length }\n                clearGiftMessage={ handleClear } />\n            { giftMessageToggle &&\n            <GiftMessageForm\n                setGiftMessage={ setGiftMessage }\n                giftMessage={ giftMessage } /> }\n        </GiftOptions>\n    )\n}\n\nexport default GiftMessageMulti","import React, { useEffect } from \"react\";\nimport { CheckboxFormField as AcknowledgementCheckbox } from \"../../../ui/form\";\n\nconst ShippingAcknowledgment = (props: any) => {\n\n    const { setShippingAcknowledged } = props\n    const labelContent = 'Chocolate is more likely to melt in warmer temperatures. By selecting ground shipping, I acknowledge Garrett is not responsible for heat damage caused during shipping. UPS 2nd Day Air and Next Day Air are preferred shipping methods to reduce the likelihood of chocolate melting.'\n\n    useEffect(() => {\n        setShippingAcknowledged(false)\n    }, [])\n\n    return (\n        <div className=\"shipping-acknowledgement-container\">\n            <AcknowledgementCheckbox\n                labelContent={labelContent}\n                name={'shipping-acknowledgment'}\n                onChange={setShippingAcknowledged}\n            />\n        </div>\n    )\n}\n\nexport default ShippingAcknowledgment","import React, { PureComponent, ReactNode } from 'react';\nimport { Consignment, Cart } from '@bigcommerce/checkout-sdk';\n\nimport { TranslatedString } from '../locale';\nimport { OrderComments } from '../orderComments';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Legend } from '../ui/form';\nimport ShipDate from './customComponents/shipDate/ShipDate';\nimport ShipDateDisabled from './customComponents/shipDate/ShipDateDisabled';\nimport GiftMessage from './customComponents/giftOptions/GiftMessage';\nimport GiftMessageDisabled from './customComponents/giftOptions/GiftMessageDisabled';\nimport ShippingBanner from './customComponents/shipDate/ShippingBanner';\n\nimport { ShippingOptions } from './shippingOption';\nimport GiftMessageMulti from './customComponents/giftOptions/GiftMessageMulti';\nimport ShippingAcknowledgment from './customComponents/shippingAcknowledgement/ShippingAcknowledgement';\n\nexport interface ShippingFormFooterProps {\n    cart: Cart;\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    shouldShowOrderComments: boolean;\n    shouldShowShippingOptions?: boolean;\n    shouldDisableSubmit: boolean;\n    isLoading: boolean;\n    consignments: Consignment[];\n    shipDate: Date;\n    setShipDate: Function;\n    arrivalDate: Date;\n    setArrivalDate: Function;\n    giftMessage: String;\n    setGiftMessage: Function;\n    giftMessages: Array<any>;\n    setGiftMessages: Function;\n}\n\ninterface ShippingFormFooterState {\n    unavailableItems: Array<any>;\n    itemsUnavailableToShip: Array<any>;\n    shippingAcknowledged: boolean;\n}\n\nclass ShippingFormFooter extends PureComponent<ShippingFormFooterProps, ShippingFormFooterState> {\n    constructor(props: ShippingFormFooterProps) {\n        super(props);\n        this.state = {\n            unavailableItems: [],\n            itemsUnavailableToShip: [],\n            shippingAcknowledged: true\n        };\n    }\n\n    render(): ReactNode {\n        const {\n            cart,\n            cartHasChanged,\n            isMultiShippingMode,\n            shouldShowOrderComments,\n            shouldShowShippingOptions = true,\n            shouldDisableSubmit,\n            isLoading,\n            consignments,\n            shipDate,\n            setShipDate,\n            arrivalDate,\n            setArrivalDate,\n            giftMessage,\n            setGiftMessage,\n        } = this.props;\n\n        if (cart && consignments[0]) {\n            var isActiveCart\n            var savedCartID\n            savedCartID = consignments[0].shippingAddress.customFields.find((customField: { fieldId: string; }) => customField.fieldId === 'field_36')\n            isActiveCart = cart.id === savedCartID?.fieldValue\n        }\n\n        const { unavailableItems, itemsUnavailableToShip, shippingAcknowledged } = this.state;\n\n        const setUnavailableItems = (unavailableItems: Array<any>) => {\n            this.setState({unavailableItems: unavailableItems})\n        }\n\n        const setItemsUnavailableToShip = (unavailableItems: Array<any>) => {\n            this.setState({itemsUnavailableToShip: unavailableItems})\n        }\n\n        const setShippingAcknowledged = (shippingAcknowledged: boolean) => {\n            this.setState({shippingAcknowledged: shippingAcknowledged})\n        }\n\n        const renderItemAvailabilityMessage = (type: string) => {\n            var message = ['no longer available. Please update your cart to complete checkout.']\n            var products = new Array\n            unavailableItems.map((item: { name: string, options: any }) => {\n                var options = new Array\n                if (item.options.length > 0) {\n                    item.options.map((option: any) => options.push(option.value))\n                }\n                options.unshift(item.name)\n                var productDetails = { message: options.join(' - ') }\n                products.push(productDetails)\n            })\n            message.unshift(products.length > 1 ? ' products are ' : ' product is ')\n            message.unshift(products.length.toString())\n            return type === 'main'\n            ? message\n            : products\n        }\n\n        const includesFrangoItems = () => {\n            var includesFrangoItems = false\n            cart.lineItems.physicalItems.map(item => { if (item.categoryNames?.includes('Frango Chocolate')) includesFrangoItems = true })\n            return includesFrangoItems\n        }\n\n        \n        const shippingSurchargeMessage = 'UPS increased their shipping prices, resulting in a holiday surcharge per item.'\n        const surchargeIsActive = false\n        \n        const shouldDisableContinue = () => {\n            // Disable shipping continue if there are unavailable items, items unavailable to ship, or Frango and fan hasn't acknowledged warm shipping.\n            return unavailableItems.length > 0 || itemsUnavailableToShip.length > 0 || shippingAcknowledged === false\n        };\n\n        return (\n            <>\n                <Fieldset\n                    id=\"checkout-shipping-options\"\n                    legend={\n                        <>\n                            <Legend>\n                                <TranslatedString id=\"shipping.shipping_method_label\" />\n                            </Legend>\n\n                            {cartHasChanged && (\n                                <Alert type={AlertType.Error}>\n                                    <strong>\n                                        <TranslatedString id=\"shipping.cart_change_error\" />\n                                    </strong>\n                                </Alert>\n                            )}\n                        </>\n                    }\n                >\n                    { surchargeIsActive &&\n                        <ShippingBanner\n                            className='shipping-surcharge-banner'\n                            mainMessage='?'\n                            secondMessage={shippingSurchargeMessage}\n                        />\n                    }\n                    <ShippingOptions\n                        isMultiShippingMode={isMultiShippingMode}\n                        isUpdatingAddress={isLoading}\n                        shouldShowShippingOptions={shouldShowShippingOptions}\n                    />\n                    { includesFrangoItems() && <ShippingAcknowledgment setShippingAcknowledged={setShippingAcknowledged} /> }\n                </Fieldset>\n\n            { shouldShowShippingOptions && unavailableItems.length === 0\n            ?   <ShipDate\n                    cart={ cart }\n                    isMultiShippingMode={ isMultiShippingMode }\n                    consignments={ consignments }\n                    shipDate={ shipDate }\n                    setShipDate={ setShipDate }\n                    arrivalDate={ arrivalDate }\n                    setArrivalDate={ setArrivalDate }\n                    isActiveCart={ isActiveCart }\n                    itemsUnavailableToShip={ itemsUnavailableToShip }\n                    setItemsUnavailableToShip={ setItemsUnavailableToShip }\n                    unavailableItems={ unavailableItems }\n                    setUnavailableItems={ setUnavailableItems } /> \n            : <ShipDateDisabled /> }\n\n            { unavailableItems.length > 0 &&\n                <ShippingBanner\n                    className='unavailable-items-alert-banner'\n                    mainMessage={renderItemAvailabilityMessage('main')}\n                    listItems={renderItemAvailabilityMessage('second')} />\n            }\n\n            { shouldShowShippingOptions \n            && unavailableItems.length === 0 \n            && itemsUnavailableToShip.length === 0\n            && !isMultiShippingMode\n            ?   <GiftMessage\n                    consignments={ consignments }\n                    giftMessage={ giftMessage }\n                    setGiftMessage={ setGiftMessage }\n                    isActiveCart={ isActiveCart } />\n            : ( isMultiShippingMode\n            ? <>\n                <Fieldset id='gift-message'>\n                    <Legend testId=\"gift-message-form-heading\"><span>Gift Options</span></Legend>\n                </Fieldset>\n                    {consignments.map((consignment, index) => this.renderGiftMessageMulti(consignment, index))}\n              </>\n            : <GiftMessageDisabled /> ) }\n\n                {shouldShowOrderComments && <OrderComments />}\n\n                <div className=\"form-actions\">\n                    <Button\n                        disabled={ shouldDisableSubmit || unavailableItems.length > 0 || itemsUnavailableToShip.length > 0 || shouldDisableContinue() }\n                        id=\"checkout-shipping-continue\"\n                        isLoading={isLoading}\n                        type=\"submit\"\n                        variant={ButtonVariant.Primary}\n                    >\n                        <TranslatedString id=\"common.continue_action\" />\n                    </Button>\n                </div>\n            </>\n        );\n    }\n\n    private renderGiftMessageMulti(consignment: Consignment, index: number): ReactNode {\n        const { \n            cart,\n            giftMessages,\n            setGiftMessages\n        } = this.props;\n\n        if (cart && consignment) {\n            var isActiveCart\n            var savedCartID\n            savedCartID = consignment.shippingAddress.customFields.find((customField: { fieldId: string; }) => customField.fieldId === 'field_36')\n            isActiveCart = cart.id === savedCartID?.fieldValue\n        }\n\n        return (\n            <GiftMessageMulti\n                key={index}\n                consignment={ consignment }\n                isActiveCart={ isActiveCart }\n                giftMessages={ giftMessages }\n                setGiftMessages={ setGiftMessages } />\n        );\n    }\n}\n\nexport default ShippingFormFooter;\n","import {\n    Address,\n    AddressRequestBody,\n    Cart,\n    CheckoutSelectors,\n    CheckoutStoreSelector,\n    Consignment,\n    ConsignmentAssignmentRequestBody,\n    Country,\n    CustomerAddress,\n    FormField,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport {\n    AddressFormModal,\n    AddressFormValues,\n    isValidAddress,\n    mapAddressFromFormValues,\n} from '../address';\nimport { preventDefault } from '../common/dom';\nimport { ErrorModal } from '../common/error';\nimport { TranslatedLink, TranslatedString, withLanguage, WithLanguageProps } from '../locale';\nimport { Form } from '../ui/form';\n\nimport { AssignItemFailedError, AssignItemInvalidAddressError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippableLineItems from './getShippableLineItems';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport hasUnassignedLineItems from './hasUnassignedLineItems';\nimport ItemAddressSelect from './ItemAddressSelect';\nimport ShippableItem from './ShippableItem';\nimport ShippingFormFooter from './ShippingFormFooter';\nimport updateShippableItems from './updateShippableItems';\n\nexport interface MultiShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    customerMessage: string;\n    isGuest: boolean;\n    isLoading: boolean;\n    shouldShowOrderComments: boolean;\n    defaultCountryCode?: string;\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    shouldShowAddAddressInCheckout: boolean;\n    isFloatingLabelEnabled?: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    onCreateAccount(): void;\n    createCustomerAddress(address: AddressRequestBody): void;\n    onSignIn(): void;\n    getFields(countryCode?: string): FormField[];\n    onSubmit(values: MultiShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n    shipDate: Date;\n    setShipDate: Function;\n    arrivalDate: Date;\n    setArrivalDate: Function;\n    giftMessages: Array<any>;\n    setGiftMessages: Function;\n    loadGiftMessages: Function;\n}\n\ninterface ShippableItemId {\n    key: string;\n    itemId: string;\n}\n\nexport interface MultiShippingFormState {\n    items: ShippableItem[];\n    itemAddingAddress?: ShippableItemId;\n    createCustomerAddressError?: Error;\n}\n\nclass MultiShippingForm extends PureComponent<\n    MultiShippingFormProps & WithLanguageProps & FormikProps<MultiShippingFormValues>,\n    MultiShippingFormState\n> {\n    static getDerivedStateFromProps(\n        { cart, consignments }: MultiShippingFormProps,\n        state: MultiShippingFormState,\n    ) {\n        if (!state || !state.items || getShippableItemsCount(cart) !== state.items.length) {\n            return { items: getShippableLineItems(cart, consignments) };\n        }\n\n        return null;\n    }\n\n    state: MultiShippingFormState = { items: [] };\n\n    render(): ReactNode {\n        const {\n            addresses,\n            consignments,\n            cart,\n            isGuest,\n            onSignIn,\n            onCreateAccount,\n            cartHasChanged,\n            shouldShowOrderComments,\n            isLoading,\n            getFields,\n            defaultCountryCode,\n            countries,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n            shipDate,\n            setShipDate,\n            arrivalDate,\n            setArrivalDate,\n            giftMessages,\n            setGiftMessages,\n            isFloatingLabelEnabled,\n        } = this.props;\n\n        const { items, itemAddingAddress, createCustomerAddressError } = this.state;\n\n        const giftMessage = ''\n\n        const setGiftMessage = (giftMessage: String) => {\n            console.log('Multiship - Gift Message Set =>', giftMessage)\n        }\n\n        if (isGuest) {\n            return (\n                <div className=\"checkout-step-info\">\n                    <TranslatedString id=\"shipping.multishipping_guest_intro\" />{' '}\n                    <a\n                        data-test=\"shipping-sign-in-link\"\n                        href=\"#\"\n                        onClick={preventDefault(onSignIn)}\n                    >\n                        <TranslatedString id=\"shipping.multishipping_guest_sign_in\" />\n                    </a>{' '}\n                    <TranslatedLink\n                        id=\"shipping.multishipping_guest_create\"\n                        onClick={onCreateAccount}\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <>\n                <ErrorModal\n                    error={createCustomerAddressError}\n                    message={\n                        <>\n                            <TranslatedString id=\"address.consignment_address_updated_text\" />{' '}\n                            <TranslatedString id=\"customer.create_address_error\" />\n                        </>\n                    }\n                    onClose={this.handleCloseErrorModal}\n                    shouldShowErrorCode={false}\n                />\n                <AddressFormModal\n                    countries={countries}\n                    countriesWithAutocomplete={countriesWithAutocomplete}\n                    defaultCountryCode={defaultCountryCode}\n                    getFields={getFields}\n                    googleMapsApiKey={googleMapsApiKey}\n                    isLoading={isLoading}\n                    isOpen={!!itemAddingAddress}\n                    onRequestClose={this.handleCloseAddAddressForm}\n                    onSaveAddress={this.handleSaveAddress}\n                    isFloatingLabelEnabled={isFloatingLabelEnabled}\n                />\n\n                <Form>\n                    <ul className=\"consignmentList\">\n                        {items.map((item) => (\n                            <li key={item.key}>\n                                <ItemAddressSelect\n                                    addresses={addresses}\n                                    item={item}\n                                    onSelectAddress={this.handleSelectAddress}\n                                    onUseNewAddress={this.handleUseNewAddress}\n                                />\n                            </li>\n                        ))}\n                    </ul>\n\n                    <ShippingFormFooter\n                        cart={ cart }\n                        cartHasChanged={cartHasChanged}\n                        isLoading={isLoading}\n                        isMultiShippingMode={true}\n                        shouldDisableSubmit={this.shouldDisableSubmit()}\n                        shouldShowOrderComments={shouldShowOrderComments}\n                        shouldShowShippingOptions={\n                            !hasUnassignedLineItems(consignments, cart.lineItems)\n                        }\n                        consignments={ consignments }\n                        shipDate={ shipDate }\n                        setShipDate={ setShipDate }\n                        arrivalDate={ arrivalDate }\n                        setArrivalDate={ setArrivalDate }\n                        giftMessage={ giftMessage }\n                        setGiftMessage={ setGiftMessage }\n                        giftMessages={ giftMessages }\n                        setGiftMessages={ setGiftMessages }\n                    />\n                </Form>\n            </>\n        );\n    }\n\n    private handleCloseErrorModal: () => void = () => {\n        this.setState({ createCustomerAddressError: undefined });\n    };\n\n    private handleSaveAddress: (address: AddressFormValues) => void = async (address) => {\n        const { createCustomerAddress } = this.props;\n        const { itemAddingAddress } = this.state;\n\n        if (!itemAddingAddress) {\n            return;\n        }\n\n        const shippingAddress = mapAddressFromFormValues(address);\n\n        await this.handleSelectAddress(\n            shippingAddress,\n            itemAddingAddress.itemId,\n            itemAddingAddress.key,\n        );\n\n        try {\n            await createCustomerAddress(shippingAddress);\n        } catch (error) {\n            if (error instanceof Error) {\n                this.setState({ createCustomerAddressError: error });\n            }\n        }\n\n        this.setState({\n            itemAddingAddress: undefined,\n        });\n    };\n\n    private handleUseNewAddress: (address: Address, itemId: string, itemKey: string) => void = (\n        address,\n        itemId,\n        itemKey,\n    ) => {\n        const { onUseNewAddress, shouldShowAddAddressInCheckout, loadGiftMessages } = this.props;\n\n        if (!shouldShowAddAddressInCheckout) {\n            onUseNewAddress(address, itemId);\n            loadGiftMessages()\n            return;\n        }\n\n        this.setState({\n            itemAddingAddress: {\n                key: itemKey,\n                itemId,\n            },\n        });\n    };\n\n    private handleCloseAddAddressForm: () => void = () => {\n        this.setState({\n            itemAddingAddress: undefined,\n        });\n    };\n\n    private handleSelectAddress: (\n        address: Address,\n        itemId: string,\n        itemKey: string,\n    ) => Promise<void> = async (address, itemId, itemKey) => {\n        const { assignItem, onUnhandledError, getFields, loadGiftMessages } = this.props;\n\n        if (!isValidAddress(address, getFields(address.countryCode))) {\n            return onUnhandledError(new AssignItemInvalidAddressError());\n        }\n\n        try {\n            const { data } = await assignItem({\n                address,\n                lineItems: [\n                    {\n                        itemId,\n                        quantity: 1,\n                    },\n                ],\n            });\n\n            this.syncItems(itemKey, address, data);\n            loadGiftMessages()\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(new AssignItemFailedError(error));\n            }\n        }\n    };\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments } = this.props;\n\n        return isLoading || !hasSelectedShippingOptions(consignments);\n    };\n\n    private syncItems: (key: string, address: Address, data: CheckoutStoreSelector) => void = (\n        key,\n        address,\n        data,\n    ) => {\n        const { items: currentItems } = this.state;\n        const items = updateShippableItems(\n            currentItems,\n            {\n                updatedItemIndex: currentItems.findIndex((item) => item.key === key),\n                address,\n            },\n            {\n                cart: data.getCart(),\n                consignments: data.getConsignments(),\n            },\n        );\n\n        if (items) {\n            this.setState({ items });\n        }\n    };\n}\n\nexport interface MultiShippingFormValues {\n    orderComment: string;\n}\n\nexport default withLanguage(\n    withFormik<MultiShippingFormProps & WithLanguageProps, MultiShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({ customerMessage }) => ({\n            orderComment: customerMessage,\n        }),\n        enableReinitialize: true,\n    })(MultiShippingForm),\n);\n","import { Address, Cart, Consignment } from '@bigcommerce/checkout-sdk';\n\nimport { isEqualAddress } from '../address';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport interface UpdateItemParams {\n    updatedItemIndex: number;\n    address: Address;\n}\n\nexport default function updateShippableItems(\n    items: ShippableItem[],\n    { updatedItemIndex, address }: UpdateItemParams,\n    { cart, consignments }: { cart?: Cart; consignments?: Consignment[] },\n): ShippableItem[] | undefined {\n    if (updatedItemIndex < 0 || updatedItemIndex >= items.length || !cart) {\n        return;\n    }\n\n    const cartItemIds = cart.lineItems.physicalItems.map(({ id }) => id);\n\n    const updatedConsignment = (consignments || []).find((consignment) =>\n        isEqualAddress(consignment.shippingAddress, address),\n    );\n\n    const newId = findNewItemId(items[updatedItemIndex], cart, updatedConsignment);\n\n    return items.map((item, i) => {\n        if ((newId && !cartItemIds.includes(item.id)) || i === updatedItemIndex) {\n            const itemId = newId ?? item.id;\n\n            return {\n                ...item,\n                id: itemId,\n                consignment: findConsignment(consignments || [], itemId as string),\n            };\n        }\n\n        return item;\n    });\n}\n\nfunction findNewItemId(\n    item: ShippableItem,\n    cart?: Cart,\n    consignment?: Consignment,\n): string | undefined {\n    if (!cart || !consignment) {\n        return;\n    }\n\n    const { physicalItems } = cart.lineItems;\n    const matchingCartItems = physicalItems.filter(\n        ({ productId, variantId }) => productId === item.productId && variantId === item.variantId,\n    );\n\n    const matchingCartItemIds = matchingCartItems.map(({ id }) => id);\n\n    return consignment.lineItemIds.find((id) => matchingCartItemIds.includes(id));\n}\n","import React, { FunctionComponent, memo, useMemo } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { CheckboxFormField } from '../ui/form';\n\nexport interface BillingSameAsShippingFieldProps {\n    onChange?(isChecked: boolean): void;\n}\n\nconst BillingSameAsShippingField: FunctionComponent<BillingSameAsShippingFieldProps> = ({\n    onChange,\n}) => {\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"billing.use_shipping_address_label\" />,\n        [],\n    );\n\n    return (\n        <CheckboxFormField\n            id=\"sameAsBilling\"\n            labelContent={labelContent}\n            name=\"billingSameAsShipping\"\n            onChange={onChange}\n        />\n    );\n};\n\nexport default memo(BillingSameAsShippingField);\n","import {\n    Address,\n    Consignment,\n    Country,\n    CustomerAddress,\n    FormField,\n} from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { AddressForm, AddressSelect, isValidCustomerAddress } from '../address';\nimport { connectFormik, ConnectFormikProps } from '../common/form';\nimport { Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingAddressFormProps {\n    addresses: CustomerAddress[];\n    address?: Address;\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    formFields: FormField[];\n    shouldShowSaveAddress?: boolean;\n    isFloatingLabelEnabled?: boolean;\n    onUseNewAddress(): void;\n    onFieldChange(fieldName: string, value: string): void;\n    onAddressSelect(address: Address): void;\n}\n\nconst addressFieldName = 'shippingAddress';\n\nclass ShippingAddressForm extends Component<\n    ShippingAddressFormProps & ConnectFormikProps<SingleShippingFormValues>\n> {\n    render(): ReactNode {\n        const {\n            addresses,\n            address: shippingAddress,\n            onAddressSelect,\n            onUseNewAddress,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            formFields,\n            isLoading,\n            googleMapsApiKey,\n            isFloatingLabelEnabled,\n            formik: {\n                values: { shippingAddress: formAddress },\n            },\n        } = this.props;\n\n        const hasAddresses = addresses && addresses.length > 0;\n        const hasValidCustomerAddress = isValidCustomerAddress(\n            shippingAddress,\n            addresses,\n            formFields,\n        );\n\n        return (\n            <Fieldset id=\"checkoutShippingAddress\">\n                {hasAddresses && (\n                    <Fieldset id=\"shippingAddresses\">\n                        <LoadingOverlay isLoading={isLoading}>\n                            <AddressSelect\n                                addresses={addresses}\n                                onSelectAddress={onAddressSelect}\n                                onUseNewAddress={onUseNewAddress}\n                                selectedAddress={\n                                    hasValidCustomerAddress ? shippingAddress : undefined\n                                }\n                            />\n                        </LoadingOverlay>\n                    </Fieldset>\n                )}\n\n                {!hasValidCustomerAddress && (\n                    <LoadingOverlay isLoading={isLoading} unmountContentWhenLoading>\n                        <AddressForm\n                            countries={countries}\n                            countriesWithAutocomplete={countriesWithAutocomplete}\n                            countryCode={formAddress && formAddress.countryCode}\n                            fieldName={addressFieldName}\n                            formFields={formFields}\n                            googleMapsApiKey={googleMapsApiKey}\n                            onAutocompleteToggle={this.handleAutocompleteToggle}\n                            onChange={this.handleChange}\n                            setFieldValue={this.setFieldValue}\n                            shouldShowSaveAddress={shouldShowSaveAddress}\n                            isFloatingLabelEnabled={isFloatingLabelEnabled}\n                        />\n                    </LoadingOverlay>\n                )}\n            </Fieldset>\n        );\n    }\n\n    private setFieldValue: (fieldName: string, fieldValue: string) => void = (\n        fieldName,\n        fieldValue,\n    ) => {\n        const {\n            formik: { setFieldValue },\n            formFields,\n        } = this.props;\n\n        const customFormFieldNames = formFields\n            .filter((field) => field.custom)\n            .map((field) => field.name);\n\n        const formFieldName = customFormFieldNames.includes(fieldName)\n            ? `customFields.${fieldName}`\n            : fieldName;\n\n        setFieldValue(`${addressFieldName}.${formFieldName}`, fieldValue);\n    };\n\n    private handleChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        const { onFieldChange } = this.props;\n\n        onFieldChange(fieldName, value);\n    };\n\n    private handleAutocompleteToggle: (state: { inputValue: string; isOpen: boolean }) => void = ({\n        isOpen,\n        inputValue,\n    }) => {\n        const { onFieldChange } = this.props;\n\n        if (!isOpen) {\n            onFieldChange('address1', inputValue);\n        }\n    };\n}\n\nexport default connectFormik(ShippingAddressForm);\n","import {\n    Address,\n    CheckoutSelectors,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { StaticAddress } from '../address/';\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString } from '../locale';\nimport { Button, ButtonSize, ButtonVariant } from '../ui/button';\nimport { DynamicFormField, Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport './StaticAddressEditable.scss';\n\nexport interface StaticAddressEditableProps {\n    address: Address;\n    buttonId: string;\n    formFields: FormField[];\n    isLoading: boolean;\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onFieldChange(fieldName: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n}\n\nclass StaticAddressEditable extends PureComponent<StaticAddressEditableProps> {\n    async componentDidMount(): Promise<void> {\n        const { initialize, methodId, onUnhandledError = noop } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const { deinitialize, methodId, onUnhandledError = noop } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const { address, buttonId, formFields, isLoading } = this.props;\n\n        const customFormFields = formFields.filter(({ custom }) => custom);\n        const shouldShowCustomFormFields = customFormFields.length > 0;\n\n        return (\n            <LoadingOverlay isLoading={isLoading}>\n                <div className=\"stepHeader\" style={{ padding: 0 }}>\n                    <div className=\"stepHeader-body subheader\">\n                        <StaticAddress address={address} />\n                    </div>\n\n                    <div className=\"stepHeader-actions subheader\">\n                        <Button\n                            id={buttonId}\n                            onClick={preventDefault()}\n                            size={ButtonSize.Tiny}\n                            testId=\"step-edit-button\"\n                            variant={ButtonVariant.Secondary}\n                        >\n                            <TranslatedString id=\"common.edit_action\" />\n                        </Button>\n                    </div>\n                </div>\n\n                {shouldShowCustomFormFields && (\n                    <Fieldset id=\"customFieldset\">\n                        {customFormFields.map((field) => (\n                            <DynamicFormField\n                                field={field}\n                                key={`${field.id}-${field.name}`}\n                                onChange={this.handleFieldValueChange(field.name)}\n                                parentFieldName=\"shippingAddress.customFields\"\n                            />\n                        ))}\n                    </Fieldset>\n                )}\n            </LoadingOverlay>\n        );\n    }\n\n    private handleFieldValueChange: (name: string) => (value: string) => void =\n        (name) => (value) => {\n            const { onFieldChange } = this.props;\n\n            onFieldChange(name, value);\n        };\n}\n\nexport default StaticAddressEditable;\n","import {\n    Address,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    CustomerAddress,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport React, { FunctionComponent, memo, useCallback, useContext } from 'react';\n\nimport { FormContext } from '../ui/form';\n\nimport ShippingAddressForm from './ShippingAddressForm';\nimport StaticAddressEditable from './StaticAddressEditable';\n\nexport interface ShippingAddressProps {\n    addresses: CustomerAddress[];\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    formFields: FormField[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    hasRequestedShippingOptions: boolean;\n    isFloatingLabelEnabled?: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onFieldChange(name: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n    onUseNewAddress(): void;\n}\n\nconst ShippingAddress: FunctionComponent<ShippingAddressProps> = (props) => {\n    const {\n        methodId,\n        formFields,\n        countries,\n        countriesWithAutocomplete,\n        consignments,\n        googleMapsApiKey,\n        onAddressSelect,\n        onFieldChange,\n        onUseNewAddress,\n        initialize,\n        deinitialize,\n        isLoading,\n        shippingAddress,\n        hasRequestedShippingOptions,\n        addresses,\n        shouldShowSaveAddress,\n        isShippingStepPending,\n        isFloatingLabelEnabled,\n    } = props;\n\n    const { setSubmitted } = useContext(FormContext);\n\n    const initializeShipping = useCallback(\n        memoizeOne(\n            (defaultOptions: ShippingInitializeOptions) => (options?: ShippingInitializeOptions) =>\n                initialize({\n                    ...defaultOptions,\n                    ...options,\n                }),\n        ),\n        [],\n    );\n\n    const handleFieldChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        if (hasRequestedShippingOptions) {\n            setSubmitted(true);\n        }\n        onFieldChange(fieldName, value);\n    };\n\n    if (methodId) {\n        let options: ShippingInitializeOptions = {};\n\n        if (methodId === 'amazonpay' && shippingAddress) {\n            const editAddressButtonId = 'edit-ship-button';\n\n            options = {\n                amazonpay: {\n                    editAddressButtonId,\n                },\n            };\n\n            return (\n                <StaticAddressEditable\n                    address={shippingAddress}\n                    buttonId={editAddressButtonId}\n                    deinitialize={deinitialize}\n                    formFields={formFields}\n                    initialize={initializeShipping(options)}\n                    isLoading={isShippingStepPending}\n                    methodId={methodId}\n                    onFieldChange={onFieldChange}\n                />\n            );\n        }\n    }\n\n    return (\n        <ShippingAddressForm\n            address={shippingAddress}\n            addresses={addresses}\n            consignments={consignments}\n            countries={countries}\n            countriesWithAutocomplete={countriesWithAutocomplete}\n            formFields={formFields}\n            googleMapsApiKey={googleMapsApiKey}\n            isLoading={isLoading}\n            onAddressSelect={onAddressSelect}\n            onFieldChange={handleFieldChange}\n            onUseNewAddress={onUseNewAddress}\n            shouldShowSaveAddress={shouldShowSaveAddress}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\n        />\n    );\n};\n\nexport default memo(ShippingAddress);\n","export const SHIPPING_ADDRESS_FIELDS = [\n    'address1',\n    'postalCode',\n    'countryCode',\n    'city',\n    'stateOrProvince',\n    'stateOrProvinceCode',\n];\n","import React from \"react\";\nimport { CheckboxFormField } from \"../../../ui/form\";\n\nconst GiftOrderForm = (props: any) => {\n    const { setIsGiftOrder, additionalClassName } = props\n    const labelContent = 'This order is a gift.'\n    return(\n        <CheckboxFormField\n            id=\"isGiftOrder\"\n            additionalClassName={ additionalClassName }\n            labelContent={ labelContent }\n            name=\"isGiftOrder\"\n            onChange={ setIsGiftOrder } />\n    )\n}\n\nexport default GiftOrderForm","import {\n    Address,\n    Cart,\n    CheckoutParams,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    CustomerAddress,\n    CustomerRequestOptions,\n    FormField,\n    RequestOptions,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport { debounce, noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport {\n    AddressFormValues,\n    getAddressFormFieldsValidationSchema,\n    getTranslateAddressError,\n    isEqualAddress,\n    mapAddressFromFormValues,\n    mapAddressToFormValues,\n} from '../address';\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\nimport { withLanguage, WithLanguageProps } from '../locale';\nimport { Fieldset, Form, FormContext } from '../ui/form';\n\nimport BillingSameAsShippingField from './BillingSameAsShippingField';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport ShippingAddress from './ShippingAddress';\nimport { SHIPPING_ADDRESS_FIELDS } from './ShippingAddressFields';\nimport ShippingFormFooter from './ShippingFormFooter';\nimport GiftOrderForm from './customComponents/giftOptions/GiftOrderForm';\n\nexport interface SingleShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    isFloatingLabelEnabled?: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError?(error: Error): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(\n        address: Partial<Address>,\n        options?: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n    shipDate: Date;\n    setShipDate: Function;\n    arrivalDate: Date;\n    setArrivalDate: Function;\n    giftMessage: String;\n    setGiftMessage: Function;\n    giftMessages: Array<any>;\n    setGiftMessages: Function;\n    isGiftOrder: boolean;\n    setIsGiftOrder: Function;\n}\n\nexport interface SingleShippingFormValues {\n    billingSameAsShipping: boolean;\n    shippingAddress?: AddressFormValues;\n    orderComment: string;\n}\n\ninterface SingleShippingFormState {\n    isResettingAddress: boolean;\n    isUpdatingShippingData: boolean;\n    hasRequestedShippingOptions: boolean;\n}\n\nexport const SHIPPING_AUTOSAVE_DELAY = 1700;\n\nclass SingleShippingForm extends PureComponent<\n    SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>\n> {\n    static contextType = FormContext;\n\n    state: SingleShippingFormState = {\n        isResettingAddress: false,\n        isUpdatingShippingData: false,\n        hasRequestedShippingOptions: false,\n    };\n\n    private debouncedUpdateAddress: any;\n\n    constructor(\n        props: SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>,\n    ) {\n        super(props);\n\n        const { updateAddress } = this.props;\n\n        this.debouncedUpdateAddress = debounce(\n            async (address: Address, includeShippingOptions: boolean) => {\n                try {\n                    await updateAddress(address, {\n                        params: {\n                            include: {\n                                'consignments.availableShippingOptions': includeShippingOptions,\n                            },\n                        },\n                    });\n\n                    if (includeShippingOptions) {\n                        this.setState({ hasRequestedShippingOptions: true });\n                    }\n                } finally {\n                    this.setState({ isUpdatingShippingData: false });\n                }\n            },\n            SHIPPING_AUTOSAVE_DELAY,\n        );\n    }\n\n    render(): ReactNode {\n        const {\n            addresses,\n            cart,\n            cartHasChanged,\n            isLoading,\n            onUnhandledError,\n            methodId,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n            shippingAddress,\n            consignments,\n            shouldShowOrderComments,\n            initialize,\n            isValid,\n            deinitialize,\n            values: { shippingAddress: addressForm },\n            isShippingStepPending,\n            shipDate,\n            setShipDate,\n            arrivalDate,\n            setArrivalDate,\n            giftMessage,\n            setGiftMessage,\n            giftMessages,\n            setGiftMessages,\n            isGiftOrder,\n            setIsGiftOrder,\n            isFloatingLabelEnabled,\n        } = this.props;\n\n        const { isResettingAddress, isUpdatingShippingData, hasRequestedShippingOptions } =\n            this.state;\n\n        const PAYMENT_METHOD_VALID = ['amazonpay'];\n        const shouldShowBillingSameAsShipping = !PAYMENT_METHOD_VALID.some(\n            (method) => method === methodId,\n        );\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset>\n                    <ShippingAddress\n                        addresses={addresses}\n                        consignments={consignments}\n                        countries={countries}\n                        countriesWithAutocomplete={countriesWithAutocomplete}\n                        deinitialize={deinitialize}\n                        formFields={this.getFields(addressForm && addressForm.countryCode)}\n                        googleMapsApiKey={googleMapsApiKey}\n                        hasRequestedShippingOptions={hasRequestedShippingOptions}\n                        initialize={initialize}\n                        isLoading={isResettingAddress}\n                        isShippingStepPending={isShippingStepPending}\n                        methodId={methodId}\n                        onAddressSelect={this.handleAddressSelect}\n                        onFieldChange={this.handleFieldChange}\n                        onUnhandledError={onUnhandledError}\n                        onUseNewAddress={this.onUseNewAddress}\n                        shippingAddress={shippingAddress}\n                        shouldShowSaveAddress={shouldShowSaveAddress}\n                        isFloatingLabelEnabled={isFloatingLabelEnabled}\n                    />\n                    {shouldShowBillingSameAsShipping && (\n                        <div className=\"form-body\">\n                            <BillingSameAsShippingField />\n                        </div>\n                    )}\n\n                    <GiftOrderForm\n                        isGiftOrder={ isGiftOrder} \n                        setIsGiftOrder={ setIsGiftOrder }\n                        additionalClassName='form-isGiftOrder' />\n                </Fieldset>\n\n                <ShippingFormFooter\n                    cart={ cart }\n                    cartHasChanged={ cartHasChanged }\n                    isLoading={ isLoading || isUpdatingShippingData }\n                    isMultiShippingMode={ false }\n                    shouldDisableSubmit={ this.shouldDisableSubmit() }\n                    shouldShowOrderComments={ shouldShowOrderComments }\n                    shouldShowShippingOptions={ isValid }\n                    consignments={ consignments }\n                    shipDate={ shipDate }\n                    setShipDate={ setShipDate }\n                    arrivalDate={ arrivalDate }\n                    setArrivalDate={ setArrivalDate }\n                    giftMessage={ giftMessage }\n                    setGiftMessage={ setGiftMessage }\n                    giftMessages={ giftMessages }\n                    setGiftMessages={ setGiftMessages }\n                />\n\n            </Form>\n        );\n    }\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments, isValid } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        if (!isValid) {\n            return false;\n        }\n\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\n    };\n\n    private handleFieldChange: (name: string) => void = async (name) => {\n        const { setFieldValue } = this.props;\n\n        if (name === 'countryCode') {\n            setFieldValue('shippingAddress.stateOrProvince', '');\n            setFieldValue('shippingAddress.stateOrProvinceCode', '');\n        }\n\n        // Enqueue the following code to run after Formik has run validation\n        await new Promise((resolve) => setTimeout(resolve));\n\n        const isShippingField = SHIPPING_ADDRESS_FIELDS.includes(name);\n\n        const { hasRequestedShippingOptions } = this.state;\n\n        const { isValid } = this.props;\n\n        if (!isValid) {\n            return;\n        }\n\n        this.updateAddressWithFormData(isShippingField || !hasRequestedShippingOptions);\n    };\n\n    private updateAddressWithFormData(includeShippingOptions: boolean) {\n        const {\n            shippingAddress,\n            values: { shippingAddress: addressForm },\n        } = this.props;\n\n        const updatedShippingAddress = addressForm && mapAddressFromFormValues(addressForm);\n\n        if (!updatedShippingAddress || isEqualAddress(updatedShippingAddress, shippingAddress)) {\n            return;\n        }\n\n        this.setState({ isUpdatingShippingData: true });\n        this.debouncedUpdateAddress(updatedShippingAddress, includeShippingOptions);\n    }\n\n    private handleAddressSelect: (address: Address) => void = async (address) => {\n        const { updateAddress, onUnhandledError = noop, values, setValues } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            await updateAddress(address);\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address.countryCode),\n                    address,\n                ),\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private onUseNewAddress: () => void = async () => {\n        const { deleteConsignments, onUnhandledError = noop, setValues, values } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            const address = await deleteConsignments();\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address && address.countryCode),\n                    address,\n                ),\n            });\n        } catch (e) {\n            onUnhandledError(e);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private getFields(countryCode: string | undefined): FormField[] {\n        const { getFields } = this.props;\n\n        return getFields(countryCode);\n    }\n}\n\nexport default withLanguage(\n    withFormik<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({\n            getFields,\n            shippingAddress,\n            isBillingSameAsShipping,\n            customerMessage,\n        }) => ({\n            billingSameAsShipping: isBillingSameAsShipping,\n            orderComment: customerMessage,\n            shippingAddress: mapAddressToFormValues(\n                getFields(shippingAddress && shippingAddress.countryCode),\n                shippingAddress,\n            ),\n        }),\n        isInitialValid: ({ shippingAddress, getFields, language }) =>\n            !!shippingAddress &&\n            getAddressFormFieldsValidationSchema({\n                language,\n                formFields: getFields(shippingAddress.countryCode),\n            }).isValidSync(shippingAddress),\n        validationSchema: ({\n            language,\n            getFields,\n            methodId,\n        }: SingleShippingFormProps & WithLanguageProps) =>\n            methodId\n                ? object({\n                      shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                          getCustomFormFieldsValidationSchema({\n                              translate: getTranslateAddressError(language),\n                              formFields: getFields(formValues && formValues.countryCode),\n                          }),\n                      ),\n                  })\n                : object({\n                      shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                          getAddressFormFieldsValidationSchema({\n                              language,\n                              formFields: getFields(formValues && formValues.countryCode),\n                          }),\n                      ),\n                  }),\n        enableReinitialize: false,\n    })(SingleShippingForm),\n);\n","import {\n    Address,\n    AddressRequestBody,\n    Cart,\n    CheckoutParams,\n    CheckoutSelectors,\n    Consignment,\n    ConsignmentAssignmentRequestBody,\n    Country,\n    CustomerAddress,\n    CustomerRequestOptions,\n    FormField,\n    RequestOptions,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { withLanguage, WithLanguageProps } from '../locale';\n\nimport MultiShippingForm, { MultiShippingFormValues } from './MultiShippingForm';\nimport SingleShippingForm, { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isBillingSameAsShipping: boolean;\n    isGuest: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    shouldShowAddAddressInCheckout: boolean;\n    isFloatingLabelEnabled?: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onCreateAccount(): void;\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n    onMultiShippingSubmit(values: MultiShippingFormValues): void;\n    onSignIn(): void;\n    onSingleShippingSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(\n        address: Partial<Address>,\n        options: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n    shipDate: Date;\n    setShipDate: Function;\n    arrivalDate: Date;\n    setArrivalDate: Function;\n    giftMessage: String;\n    setGiftMessage: Function;\n    giftMessages: Array<any>;\n    setGiftMessages: Function;\n    loadGiftMessages: Function;\n    isGiftOrder: boolean;\n    setIsGiftOrder: Function;\n}\n\nclass ShippingForm extends Component<ShippingFormProps & WithLanguageProps> {\n    render(): ReactNode {\n        const {\n            addresses,\n            assignItem,\n            cart,\n            cartHasChanged,\n            createCustomerAddress,\n            consignments,\n            countries,\n            countriesWithAutocomplete,\n            onCreateAccount,\n            customerMessage,\n            deinitialize,\n            deleteConsignments,\n            getFields,\n            googleMapsApiKey,\n            initialize,\n            isBillingSameAsShipping,\n            isGuest,\n            isLoading,\n            isMultiShippingMode,\n            methodId,\n            onMultiShippingSubmit,\n            onSignIn,\n            onSingleShippingSubmit,\n            onUnhandledError,\n            onUseNewAddress,\n            shippingAddress,\n            shouldShowOrderComments,\n            shouldShowSaveAddress,\n            shouldShowAddAddressInCheckout,\n            signOut,\n            updateAddress,\n            isShippingStepPending,\n            shipDate,\n            setShipDate,\n            arrivalDate,\n            setArrivalDate,\n            giftMessage,\n            setGiftMessage,\n            giftMessages,\n            setGiftMessages,\n            loadGiftMessages,\n            isGiftOrder,\n            setIsGiftOrder,\n            isFloatingLabelEnabled,\n        } = this.props;\n\n        return isMultiShippingMode ? (\n            <MultiShippingForm\n                addresses={ addresses }\n                assignItem={ assignItem }\n                cart={ cart }\n                cartHasChanged={ cartHasChanged }\n                consignments={ consignments }\n                countries={ countries }\n                countriesWithAutocomplete={ countriesWithAutocomplete }\n                createCustomerAddress={ createCustomerAddress }\n                customerMessage={ customerMessage }\n                defaultCountryCode={ shippingAddress?.countryCode }\n                getFields={ getFields }\n                googleMapsApiKey={ googleMapsApiKey }\n                isGuest={ isGuest }\n                isLoading={ isLoading }\n                onCreateAccount={ onCreateAccount }\n                onSignIn={ onSignIn }\n                onSubmit={ onMultiShippingSubmit }\n                onUnhandledError={ onUnhandledError }\n                onUseNewAddress={ onUseNewAddress }\n                shouldShowAddAddressInCheckout={ shouldShowAddAddressInCheckout }\n                shouldShowOrderComments={ shouldShowOrderComments }\n                shipDate={ shipDate }\n                setShipDate={ setShipDate }\n                arrivalDate={ arrivalDate }\n                setArrivalDate={ setArrivalDate }\n                giftMessages={ giftMessages }\n                setGiftMessages={ setGiftMessages }\n                loadGiftMessages={ loadGiftMessages }\n            />\n        ) : (\n            <SingleShippingForm\n                addresses={ addresses }\n                cart={ cart }\n                cartHasChanged={ cartHasChanged }\n                consignments={ consignments }\n                countries={ countries }\n                countriesWithAutocomplete={ countriesWithAutocomplete }\n                customerMessage={ customerMessage }\n                deinitialize={ deinitialize }\n                deleteConsignments={ deleteConsignments }\n                getFields={ getFields }\n                googleMapsApiKey={ googleMapsApiKey }\n                initialize={ initialize }\n                isBillingSameAsShipping={ isBillingSameAsShipping }\n                isLoading={ isLoading }\n                isMultiShippingMode={ isMultiShippingMode }\n                isShippingStepPending={ isShippingStepPending }\n                methodId={ methodId }\n                onSubmit={ onSingleShippingSubmit }\n                onUnhandledError={ onUnhandledError }\n                shippingAddress={ shippingAddress }\n                shouldShowOrderComments={ shouldShowOrderComments }\n                shouldShowSaveAddress={ shouldShowSaveAddress }\n                signOut={ signOut }\n                updateAddress={ updateAddress }\n                isFloatingLabelEnabled={isFloatingLabelEnabled}\n                shipDate={ shipDate }\n                setShipDate={ setShipDate }\n                arrivalDate={ arrivalDate }\n                setArrivalDate={ setArrivalDate }\n                giftMessage={ giftMessage }\n                setGiftMessage={ setGiftMessage }\n                isGiftOrder={ isGiftOrder }\n                setIsGiftOrder={ setIsGiftOrder }\n                giftMessages={ giftMessages }\n                setGiftMessages={ setGiftMessages }\n            />\n        );\n    }\n}\n\nexport default withLanguage(ShippingForm);\n","import React, { FunctionComponent, memo } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString } from '../locale';\nimport { Legend } from '../ui/form';\n\ninterface ShippingHeaderProps {\n    isMultiShippingMode: boolean;\n    isGuest: boolean;\n    shouldShowMultiShipping: boolean;\n    onMultiShippingChange(): void;\n}\n\nconst ShippingHeader: FunctionComponent<ShippingHeaderProps> = ({\n    isMultiShippingMode,\n    isGuest,\n    onMultiShippingChange,\n    shouldShowMultiShipping,\n}) => (\n    <div className=\"form-legend-container\">\n        <Legend testId=\"shipping-address-heading\">\n            <TranslatedString\n                id={\n                    isMultiShippingMode\n                        ? isGuest\n                            ? 'shipping.multishipping_address_heading_guest'\n                            : 'shipping.multishipping_address_heading'\n                        : 'shipping.shipping_address_heading'\n                }\n            />\n        </Legend>\n\n        {shouldShowMultiShipping && (\n            <a\n                data-test=\"shipping-mode-toggle\"\n                href=\"#\"\n                onClick={preventDefault(onMultiShippingChange)}\n            >\n                <TranslatedString\n                    id={isMultiShippingMode ? 'shipping.ship_to_single' : 'shipping.ship_to_multi'}\n                />\n            </a>\n        )}\n    </div>\n);\n\nexport default memo(ShippingHeader);\n","import { CheckoutSelectors, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nexport interface StripeupeShippingAddressProps {\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\nclass StripeShippingAddressDisplay extends PureComponent<StripeupeShippingAddressProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n\n        return (\n            <>\n                <div className=\"stepHeader\" style={ { padding: 0 } }>\n                    <div id=\"StripeUpeShipping\" style={ { width: '100%' } } />\n                </div>\n                <br />\n            </>\n        );\n    }\n}\n\nexport default StripeShippingAddressDisplay;\n","interface StripeCountryMapping {\n    [key: string]: StripeStateMapping;\n}\n\ninterface StripeStateMapping {\n    [key: string]: string;\n}\n\nexport default function StripeStateMapper(country: string, state: string): string {\n\n    const countries: StripeCountryMapping = {\n        'MX': {\n            'Ags.': 'AGU',\n            'B.C.': 'BCN',\n            'B.C.S.': 'BCS',\n            'Camp.': 'CAM',\n            'Coah.': 'COA',\n            'Col.': 'COL',\n            'Chis.': 'CHP',\n            'Chih.': 'CHH',\n            'Dgo.': 'DUR',\n            'Gto.': 'GUA',\n            'Gro.': 'GRO',\n            'Hgo.': 'HID',\n            'Jal.': 'JAL',\n            'Méx.': 'MEX',\n            'CDMX': 'MEX',\n            'Mich.': 'MIC',\n            'Mor.': 'MOR',\n            'Nay.': 'NAY',\n            'N.L.': 'NLE',\n            'Oax.': 'OAX',\n            'Pue.': 'PUE',\n            'Qro.': 'QUE',\n            'Q.R.': 'ROO',\n            'S.L.P.': 'SLP',\n            'Sin.': 'SIN',\n            'Son.': 'SON',\n            'Tab.': 'TAB',\n            'Tamps.': 'TAM',\n            'Tlax.': 'TLA',\n            'Ver.': 'VER',\n            'Yuc.': 'YUC',\n            'Zac.': 'ZAC',\n        },\n        'AR': {\n            'Ciudad Autónoma de Buenos Aires': 'C',\n            'Buenos Aires': 'B',\n            'Catamarca': 'K',\n            'Chaco': 'H',\n            'Chubut': 'U',\n            'Córdoba': 'X',\n            'Corrientes': 'W',\n            'Entre Ríos': 'E',\n            'Formosa': 'P',\n            'Jujuy': 'Y',\n            'La Pampa': 'L',\n            'La Rioja': 'F',\n            'Mendoza': 'M',\n            'Misiones': 'N',\n            'Neuquén': 'Q',\n            'Salta': 'A',\n            'San Juan': 'J',\n            'San Luis': 'D',\n            'Santa Fe': 'S',\n            'Santiago del Estero': 'G',\n            'Tierra del Fuego': 'V',\n            'Tucumán': 'W',\n        },\n        'IN': {\n            'Andhra Pradesh': 'AP',\n            'Arunachal Pradesh': 'AR',\n            'Assam': 'AS',\n            'Bihar': 'BR',\n            'Chhattisgarh': 'CG',\n            'Goa': 'GA',\n            'Gujarat': 'GJ',\n            'Haryana': 'HR',\n            'Himachal Pradesh': 'HP',\n            'Jammu and Kashmir': 'JK',\n            'Jharkhand': 'JH',\n            'Karnataka': 'KA',\n            'Kerala': 'KL',\n            'Madhya Pradesh': 'MP',\n            'Maharashtra': 'MH',\n            'Manipur': 'MN',\n            'Meghalaya': 'ML',\n            'Mizoram': 'MZ',\n            'Nagaland': 'NL',\n            'Odisha': 'OR',\n            'Punjab': 'PB',\n            'Rajasthan': 'RJ',\n            'Sikkim': 'SK',\n            'Tamil Nadu': 'TN',\n            'Tripura': 'TR',\n            'Uttarakhand': 'UK',\n            'Uttar Pradesh': 'UP',\n            'West Bengal': 'WB',\n            'Andaman and Nicobar Islands': 'AN',\n            'Chandigarh': 'CH',\n            'Dadra and Nagar Haveli and Daman and Diu': 'DN',\n            'Lakshadweep': 'LD',\n            'Delhi': 'DL',\n            'Puducherry': 'PY',\n            'Telangana': 'TS',\n        },\n        'ID': {\n            'Bali': 'BA',\n            'Banten': 'BT',\n            'Bengkulu': 'BE',\n            'Aceh': 'DA',\n            'DKI Jakarta': 'JK',\n            'Sumatera Utara': 'SU',\n            'Sumatera Barat': 'SB',\n            'Riau': 'SI',\n            'Jambi': 'JA',\n            'Sumatera Selatan': 'SS',\n            'Lampung': 'LA',\n            'Jawa Barat': 'JB',\n            'Jawa Timur': 'JT',\n            'Daerah Istimewa Yogyakarta': 'DY',\n            'Kalimantan Barat': 'KB',\n            'Kalimantan Tengah': 'KT',\n            'Kalimantan Timur': 'KI',\n            'Kalimantan Selatan': 'KS',\n            'Nusa Tenggara Barat': 'NB',\n            'Nusa Tenggara Timur': 'NT',\n            'Sulawesi Selatan': 'SN',\n            'Sulawesi Tengah': 'ST',\n            'Sulawesi Utara': 'SA',\n            'Sulawesi Tenggara': 'SG',\n            'Maluku': 'MA',\n            'Maluku Utara': 'MU',\n            'Gorontalo': 'GO',\n        },\n        'MY': {\n            'Johor': 'JHR',\n            'Kedah': 'KDH',\n            'Kelantan': 'KTN',\n            'Melaka': 'MLK',\n            'Negeri Sembilan': 'NSN',\n            'Pahang': 'PHG',\n            'Pulau Pinang': 'PNG',\n            'Perak': 'PRK',\n            'Perlis': 'PLS',\n            'Selangor': 'SGR',\n            'Terengganu': 'TRG',\n            'Sabah': 'SBH',\n            'Sarawak': 'SRW',\n            'Kuala Lumpur': 'KUL',\n            'Labuan': 'LBN',\n            'Putrajaya': 'PJY',\n        },\n        'IE': {\n            'Carlow': 'CW',\n            'Cavan': 'CN',\n            'Clare': 'CE',\n            'Donegal': 'DL',\n            'Dublin': 'D',\n            'Galway': 'G',\n            'Kildare': 'KE',\n            'Kilkenny': 'KK',\n            'Laois': 'LS',\n            'Leitrim': 'LM',\n            'Longford': 'LD',\n            'Louth': 'LH',\n            'Mayo': 'MO',\n            'Meath': 'MH',\n            'Monaghan': 'MN',\n            'Offaly': 'OY',\n            'Roscommon': 'RN',\n            'Sligo': 'SO',\n            'Tipperary': 'TA',\n            'Waterford': 'WD',\n            'Westmeath': 'WH',\n            'Wexford': 'WX',\n            'Wicklow': 'WW',\n        },\n        'ES': {\n            'C': 'ACOR',\n            'VI': 'ALAV',\n            'AB': 'ALBA',\n            'A': 'ALIC',\n            'AL': 'ALME',\n            'O': 'ASTU',\n            'AV': 'AVIL',\n            'BA': 'BADA',\n            'PM': 'BALE',\n            'B': 'BARC',\n            'BU': 'BURG',\n            'CC': 'CACE',\n            'CA': 'CADI',\n            'S': 'CANT',\n            'CS': 'CAST',\n            'CE': 'CEUT',\n            'CR': 'CIUD',\n            'CO': 'CORD',\n            'CU': 'CUEN',\n            'GI': 'GIRO',\n            'GR': 'GRAN',\n            'GU': 'GUAD',\n            'SS': 'GUIP',\n            'H': 'HUEL',\n            'HU': 'HUES',\n            'J': 'JAEN',\n            'LO': 'LAR',\n            'GC': 'LAS',\n            'LE': 'LEON',\n            'L': 'LLEI',\n            'LU': 'LUGO',\n            'M': 'MADR',\n            'MA': 'MALA',\n            'ML': 'MELI',\n            'MU': 'MURC',\n            'NA': 'NAVA',\n            'OR': 'OURE',\n            'P': 'PALE',\n            'PO': 'PONT',\n            'SA': 'SALA',\n            'TF': 'SANT',\n            'SG': 'SEGO',\n            'SE': 'SEVI',\n            'SO': 'SORI',\n            'T': 'TARR',\n            'TE': 'TERU',\n            'TP': 'TOLE',\n            'V': 'VALE',\n            'VA': 'VALL',\n            'BI': 'VIZC',\n            'ZA': 'ZAMO',\n            'Z': 'ZARA',\n        }\n    };\n\n    if (countries[country]) {\n        return countries[country][state] ?? getStripeState(countries[country], state);\n    }\n\n    return state;\n}\n\nfunction getStripeState(stateList: StripeStateMapping, state: string) {\n    return Object.keys(stateList).find(key => stateList[key] === state) || state;\n}\n","import {\n    Address,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n    StripeShippingEvent\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport React, { FunctionComponent, memo, useCallback, useEffect, useState } from 'react';\n\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport { getAppliedStyles } from '../../common/dom';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport hasSelectedShippingOptions from '../hasSelectedShippingOptions';\nimport { SingleShippingFormValues } from '../SingleShippingForm';\n\nimport StripeShippingAddressDisplay from './StripeShippingAddressDisplay';\nimport StripeStateMapper from './StripeStateMapper';\n\nexport interface StripeShippingAddressProps {\n    consignments: Consignment[];\n    countries?: Country[];\n    shippingAddress?: Address;\n    step: CheckoutStepStatus;\n    isShippingMethodLoading: boolean;\n    shouldDisableSubmit: boolean;\n    isStripeLoading?(): void;\n    isStripeAutoStep?(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onSubmit(values: SingleShippingFormValues): void;\n}\n\nconst StripeShippingAddress: FunctionComponent<StripeShippingAddressProps> = (props) => {\n    const {\n        countries,\n        consignments,\n        onAddressSelect,\n        initialize,\n        deinitialize,\n        shouldDisableSubmit,\n        onSubmit,\n        step,\n        isStripeLoading,\n        isStripeAutoStep,\n        isShippingMethodLoading,\n        shippingAddress,\n    } = props;\n\n    const [isNewAddress, setIsNewAddress] = useState(true);\n    const [isFirstShippingRender, setIsFirstShippingRender] = useState(true);\n    const [stripeShippingAddress, setStripeShippingAddress] =  useState({\n        firstName: '',\n        lastName: '',\n        company: '',\n        address1: '',\n        address2: '',\n        city: '',\n        stateOrProvince: '',\n        stateOrProvinceCode: '',\n        shouldSaveAddress: true,\n        country: '',\n        countryCode: '',\n        postalCode: '',\n        phone: '',\n        customFields: [],\n    });\n\n    const handleLoading = useCallback(() => {\n        if (isStripeLoading) {\n            isStripeLoading();\n        }\n    }, [isStripeLoading]);\n\n    useEffect(() => {\n        if (consignments[0]) {\n            const {availableShippingOptions} = consignments[0];\n\n            if (availableShippingOptions && !getRecommendedShippingOption(availableShippingOptions)) {\n                handleLoading();\n            }\n        }\n    }, [consignments]);\n\n    useEffect(() => {\n        const hasStripeAddressAndHasShippingOptions = stripeShippingAddress.firstName && hasSelectedShippingOptions(consignments);\n        const afterReload = !isFirstShippingRender && !isNewAddress && !isShippingMethodLoading;\n        const isLoadingBeforeAutoStep =  isStripeLoading && isStripeAutoStep;\n\n        if (hasStripeAddressAndHasShippingOptions && afterReload && isLoadingBeforeAutoStep) {\n            isStripeLoading();\n            isStripeAutoStep();\n            onSubmit({billingSameAsShipping: true, shippingAddress: stripeShippingAddress, orderComment: ''});\n        }\n    }, [isFirstShippingRender, onSubmit, stripeShippingAddress, shouldDisableSubmit, isShippingMethodLoading, isNewAddress ,consignments]);\n\n    const availableShippingList = countries?.map(country => ({code: country.code, name: country.name}));\n    const allowedCountries = availableShippingList ? availableShippingList.map(country => country.code).join(', ') : '';\n    const shouldShowContent = (isNewAddress = true, phoneFieldRequired: boolean, phone: string) => {\n        const stepCompleted = step.isComplete;\n        const shippingPopulated = shippingAddress?.firstName && isNewAddress;\n        const PhoneRequiredAndNotFilled = phoneFieldRequired && !phone;\n\n        return stepCompleted || shippingPopulated || PhoneRequiredAndNotFilled;\n    };\n\n    const handleStripeShippingAddress = useCallback(async (shipping: StripeShippingEvent) => {\n        const {complete, phoneFieldRequired, value: { address = { country: '', state: '', line1: '', line2: '', city: '', postal_code: '' }\n            , name = '', firstName = '', lastName = '', phone = '' } } = shipping;\n\n        if (complete) {\n            if (shouldShowContent(shipping?.isNewAddress, phoneFieldRequired, phone)) {\n                handleLoading();\n            }\n\n            const names = name?.split(' ');\n\n            // @ts-ignore\n            const country = availableShippingList?.find(country => country.code === address.country).name;\n            const state = StripeStateMapper(address.country, address.state);\n            const shippingValue = {\n                firstName: firstName || names[0],\n                lastName: lastName || names[1],\n                company: '',\n                address1: address.line1,\n                address2: address.line2 || '',\n                city: address.city,\n                stateOrProvince: state,\n                stateOrProvinceCode: state,\n                shouldSaveAddress: true,\n                country: country || address.country,\n                countryCode: address.country,\n                postalCode: address.postal_code,\n                phone: phone || '',\n                customFields: [],\n            };\n\n            if (!step.isComplete) {\n                setIsFirstShippingRender(current => !current);\n            }\n\n            onAddressSelect(shippingValue);\n            setStripeShippingAddress(shippingValue);\n\n            if (shipping.isNewAddress !== isNewAddress) {\n                setIsNewAddress(current => !current);\n            }\n        } else {\n            handleLoading();\n        }\n\n    }, [availableShippingList, onAddressSelect]);\n\n    const initializeShipping = useCallback(\n        memoizeOne(\n            (defaultOptions: ShippingInitializeOptions) => (options?: ShippingInitializeOptions) =>\n                initialize({\n                    ...defaultOptions,\n                    ...options,\n                }),\n        ),\n        [],\n    );\n\n    const getStylesFromElement = (\n        id: string,\n        properties: string[]) => {\n        const parentContainer = document.getElementById(id);\n\n        if (parentContainer) {\n            return getAppliedStyles(parentContainer, properties);\n        }\n\n        return undefined;\n    };\n\n    const getStripeStyles: any = useCallback( () => {\n        const containerId = 'stripe-card-component-field';\n        const formInput = getStylesFromElement(`${containerId}--input`, ['color', 'background-color', 'border-color', 'box-shadow']);\n        const formLabel = getStylesFromElement(`${containerId}--label`, ['color']);\n        const formError = getStylesFromElement(`${containerId}--error`, ['color']);\n\n        return formLabel && formInput && formError ? {\n            labelText: formLabel.color,\n            fieldText: formInput.color,\n            fieldPlaceholderText: formInput.color,\n            fieldErrorText: formError.color,\n            fieldBackground: formInput['background-color'],\n            fieldInnerShadow: formInput['box-shadow'],\n            fieldBorder: formInput['border-color'],\n        } : undefined;\n    }, [])\n\n        const options: ShippingInitializeOptions = {\n            stripeupe: {\n                container: 'StripeUpeShipping',\n                onChangeShipping: handleStripeShippingAddress,\n                availableCountries: allowedCountries,\n                getStyles: getStripeStyles,\n                getStripeState: StripeStateMapper,\n                gatewayId: 'stripeupe',\n                methodId: 'card',\n            },\n        };\n\n        const renderCheckoutThemeStylesForStripeUPE = () => {\n            const containerId = 'stripe-card-component-field';\n\n            return (\n                <div\n                    className=\"optimizedCheckout-form-input\"\n                    id={ `${containerId}--input` }\n                    placeholder=\"1111\"\n                >\n                    <div\n                        className=\"form-field--error\"\n                    >\n                        <div\n                            className=\"optimizedCheckout-form-label\"\n                            id={ `${containerId}--error` }\n                        />\n                    </div>\n                    <div\n                        className=\"optimizedCheckout-form-label\"\n                        id={ `${containerId}--label` }\n                    />\n                </div>\n            );\n        };\n\n        return (\n            <>\n                <StripeShippingAddressDisplay\n                    deinitialize={ deinitialize }\n                    initialize={ initializeShipping(options) }\n                    methodId=\"stripeupe\"\n                />\n                { renderCheckoutThemeStylesForStripeUPE() }\n            </>\n        );\n};\n\nexport default memo(StripeShippingAddress);\n","import {\n    Cart,\n    Address,\n    CheckoutParams,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    FormField,\n    RequestOptions,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport {\n    AddressFormValues,\n    getAddressFormFieldsValidationSchema,\n    getTranslateAddressError,\n    mapAddressToFormValues,\n} from '../../address';\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport { getCustomFormFieldsValidationSchema } from '../../formFields';\nimport { withLanguage, WithLanguageProps } from '../../locale';\nimport { Fieldset, Form, FormContext } from '../../ui/form';\nimport BillingSameAsShippingField from '../BillingSameAsShippingField';\nimport hasSelectedShippingOptions from '../hasSelectedShippingOptions';\nimport ShippingFormFooter from '../ShippingFormFooter';\n\nimport StripeShippingAddress from './StripeShippingAddress';\n\nexport interface SingleShippingFormProps {\n    cart: Cart;\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    customerMessage: string;\n    isLoading: boolean;\n    isShippingMethodLoading: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowOrderComments: boolean;\n    step: CheckoutStepStatus;\n    isStripeLoading?(): void;\n    isStripeAutoStep?(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError?(error: Error): void;\n    updateAddress(\n        address: Partial<Address>,\n        options?: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n}\n\nexport interface SingleShippingFormValues {\n    billingSameAsShipping: boolean;\n    shippingAddress?: AddressFormValues;\n    orderComment: string;\n}\n\ninterface SingleShippingFormState {\n    isUpdatingShippingData: boolean;\n}\n\nclass StripeShippingForm extends PureComponent<\n    SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>\n    > {\n    static contextType = FormContext;\n\n    state: SingleShippingFormState = {\n        isUpdatingShippingData: false,\n    };\n\n    render(): ReactNode {\n        const {\n            cart,\n            cartHasChanged,\n            isLoading,\n            countries,\n            isStripeLoading,\n            shippingAddress,\n            consignments,\n            shouldShowOrderComments,\n            initialize,\n            isValid,\n            deinitialize,\n            onSubmit,\n            isStripeAutoStep,\n            step,\n            isShippingMethodLoading,\n        } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset>\n                    <StripeShippingAddress\n                        consignments={consignments}\n                        countries={countries}\n                        deinitialize={deinitialize}\n                        initialize={initialize}\n                        isShippingMethodLoading={isShippingMethodLoading}\n                        isStripeAutoStep={isStripeAutoStep}\n                        isStripeLoading={isStripeLoading}\n                        onAddressSelect={this.handleAddressSelect}\n                        onSubmit={onSubmit}\n                        shippingAddress={shippingAddress}\n                        shouldDisableSubmit={this.shouldDisableSubmit()}\n                        step={step}\n                    />\n                    <div className=\"form-body\">\n                        <BillingSameAsShippingField />\n                    </div>\n                </Fieldset>\n\n                <ShippingFormFooter\n                    cartHasChanged={cartHasChanged}\n                    isLoading={isLoading || isUpdatingShippingData}\n                    isMultiShippingMode={false}\n                    shouldDisableSubmit={this.shouldDisableSubmit()}\n                    shouldShowOrderComments={shouldShowOrderComments}\n                    shouldShowShippingOptions={isValid} \n                    cart={cart}\n                    consignments={[]} \n                    shipDate={new Date} \n                    setShipDate={Function} \n                    arrivalDate={new Date} \n                    setArrivalDate={Function} \n                    giftMessage={new String} \n                    setGiftMessage={Function} \n                    giftMessages={new Array} \n                    setGiftMessages={Function}                />\n            </Form>\n        );\n    }\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments, isValid } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        if (!isValid) {\n            return false;\n        }\n\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\n    };\n\n    private handleAddressSelect: (address: Address) => void = async (address) => {\n        const { updateAddress, onUnhandledError = noop, values, setValues } = this.props;\n\n        try {\n            await updateAddress(address);\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address.countryCode),\n                    address,\n                ),\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n\n    private getFields(countryCode: string | undefined): FormField[] {\n        const { getFields } = this.props;\n\n        return getFields(countryCode);\n    }\n}\n\nexport default withLanguage(\n    withFormik<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({\n                               getFields,\n                               shippingAddress,\n                               isBillingSameAsShipping,\n                               customerMessage,\n                           }) => ({\n            billingSameAsShipping: isBillingSameAsShipping,\n            orderComment: customerMessage,\n            shippingAddress: mapAddressToFormValues(\n                getFields(shippingAddress && shippingAddress.countryCode),\n                shippingAddress,\n            ),\n        }),\n        isInitialValid: ({ shippingAddress, getFields, language }) =>\n            !!shippingAddress &&\n            getAddressFormFieldsValidationSchema({\n                language,\n                formFields: getFields(shippingAddress.countryCode),\n            }).isValidSync(shippingAddress),\n        validationSchema: ({\n                               language,\n                               getFields,\n                               methodId,\n                           }: SingleShippingFormProps & WithLanguageProps) =>\n            methodId\n                ? object({\n                    shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                        getCustomFormFieldsValidationSchema({\n                            translate: getTranslateAddressError(language),\n                            formFields: getFields(formValues && formValues.countryCode),\n                        }),\n                    ),\n                })\n                : object({\n                    shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                        getAddressFormFieldsValidationSchema({\n                            language,\n                            formFields: getFields(formValues && formValues.countryCode),\n                        }),\n                    ),\n                }),\n        enableReinitialize: false,\n    })(StripeShippingForm),\n);\n","import { Address, Cart, CheckoutSelectors, Consignment, Country, Customer, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\nimport ShippingHeader from '../ShippingHeader';\n\nimport StripeShippingForm, { SingleShippingFormValues } from './StripeShippingForm';\n\nexport interface StripeShippingProps {\n    cart: Cart;\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    step: CheckoutStepStatus;\n    consignments: Consignment[];\n    countries: Country[];\n    customer: Customer;\n    customerMessage: string;\n    isGuest: boolean;\n    isInitializing: boolean;\n    isLoading: boolean;\n    isShippingMethodLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowAddAddressInCheckout: boolean;\n    shouldShowMultiShipping: boolean;\n    shouldShowOrderComments: boolean;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onSubmit(values: SingleShippingFormValues): void;\n    onMultiShippingChange(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\n    loadShippingOptions(): Promise<CheckoutSelectors>;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    getFields(countryCode?: string): FormField[];\n}\n\ninterface StripeShippingState {\n    isStripeLoading: boolean;\n    isStripeAutoStep: boolean;\n}\n\nclass StripeShipping extends Component<StripeShippingProps, StripeShippingState> {\n    constructor(props: StripeShippingProps) {\n        super(props);\n\n        this.state = {\n            isStripeLoading: true,\n            isStripeAutoStep: false,\n        };\n    }\n\n    render(): ReactNode {\n        const {\n            cart,\n            isBillingSameAsShipping,\n            isGuest,\n            shouldShowMultiShipping,\n            customer,\n            updateAddress,\n            initialize,\n            deinitialize,\n            isMultiShippingMode,\n            step,\n            onSubmit,\n            onMultiShippingChange,\n            isLoading,\n            isShippingMethodLoading,\n            ...shippingFormProps\n        } = this.props;\n\n        const {\n            isStripeLoading,\n            isStripeAutoStep,\n        } = this.state;\n\n        return <>\n            <AddressFormSkeleton isLoading={isStripeAutoStep || isStripeLoading}/>\n            <div className=\"checkout-form\" style={{display: isStripeAutoStep || isStripeLoading ? 'none' : undefined}}>\n                <ShippingHeader\n                    isGuest={isGuest}\n                    isMultiShippingMode={isMultiShippingMode}\n                    onMultiShippingChange={onMultiShippingChange}\n                    shouldShowMultiShipping={shouldShowMultiShipping}\n                />\n                <StripeShippingForm\n                    cart={cart}\n                    {...shippingFormProps}\n                    deinitialize={deinitialize}\n                    initialize={initialize}\n                    isBillingSameAsShipping={isBillingSameAsShipping}\n                    isLoading={isLoading}\n                    isMultiShippingMode={isMultiShippingMode}\n                    isStripeAutoStep={this.handleIsAutoStep}\n                    isStripeLoading={this.stripeLoadedCallback}\n                    isShippingMethodLoading={isShippingMethodLoading}\n                    onSubmit={onSubmit}\n                    step={step}\n                    updateAddress={updateAddress}\n                />\n            </div>\n        </>;\n    }\n\n    private stripeLoadedCallback: () => void = () => {\n        this.setState({ isStripeLoading: false });\n    }\n\n    private handleIsAutoStep: () => void = () => {\n        this.setState({ isStripeAutoStep: true });\n    }\n}\n\nexport default StripeShipping;\n","import { \n    Address, \n    AddressRequestBody, \n    Cart, \n    CheckoutRequestBody, \n    CheckoutSelectors, \n    Consignment, \n    ConsignmentAssignmentRequestBody, \n    ConsignmentUpdateRequestBody, \n    Country, \n    Customer, \n    CustomerRequestOptions, \n    FormField, \n    ShippingInitializeOptions, \n    ShippingRequestOptions \n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { createSelector } from 'reselect';\n\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { CheckoutContextProps, withCheckout } from '../checkout';\nimport CheckoutStepStatus from '../checkout/CheckoutStepStatus';\nimport { EMPTY_ARRAY, isFloatingLabelEnabled } from '../common/utility';\nimport { PaymentMethodId } from '../payment/paymentMethod';\n\nimport { UnassignItemError } from './errors';\nimport findLineItems from './findLineItems';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippingMethodId from './getShippingMethodId';\nimport { MultiShippingFormValues } from './MultiShippingForm';\nimport ShippingForm from './ShippingForm';\nimport ShippingHeader from './ShippingHeader';\nimport { SingleShippingFormValues } from './SingleShippingForm';\nimport ShippingBanner from './customComponents/shipDate/ShippingBanner';\nimport StripeShipping from './stripeUPE/StripeShipping';\n\nexport interface ShippingProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    step: CheckoutStepStatus;\n    onCreateAccount(): void;\n    onToggleMultiShipping(): void;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onSignIn(): void;\n    navigateNextStep(isBillingSameAsShipping: boolean): void;\n    shipDate: Date;\n    setShipDate: Function;\n    arrivalDate: Date;\n    setArrivalDate: Function;\n    giftMessage: String;\n    setGiftMessage: Function;\n}\n\nexport interface WithCheckoutShippingProps {\n    billingAddress?: Address;\n    cart: Cart;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isGuest: boolean;\n    isInitializing: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowAddAddressInCheckout: boolean;\n    shouldShowMultiShipping: boolean;\n    shouldShowOrderComments: boolean;\n    providerWithCustomCheckout?: string;\n    isFloatingLabelEnabled?: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitializeShippingMethod(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initializeShippingMethod(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\n    loadShippingOptions(): Promise<CheckoutSelectors>;\n    signOut(options?: CustomerRequestOptions): void;\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n    unassignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    updateBillingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n    updateShippingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateConsignment(consignment: ConsignmentUpdateRequestBody): Promise<CheckoutSelectors>;\n    loadPaymentMethods(): Promise<CheckoutSelectors>;\n}\n\ninterface ShippingState {\n    isInitializing: boolean;\n    isGiftOrder: boolean;\n    giftMessages: Array<any>;\n}\n\nclass Shipping extends Component<ShippingProps & WithCheckoutShippingProps, ShippingState> {\n    constructor(props: ShippingProps & WithCheckoutShippingProps) {\n        super(props);\n\n        this.state = {\n            isInitializing: true,\n            isGiftOrder: false,\n            giftMessages: new Array\n        };\n    }\n\n    async componentDidMount(): Promise<void> {\n        const {\n            loadShippingAddressFields,\n            loadShippingOptions,\n            onReady = noop,\n            onUnhandledError = noop,\n        } = this.props;\n\n        var toggleMulti = false\n        this.loadGiftMessages(toggleMulti)\n\n        try {\n            await Promise.all([loadShippingAddressFields(), loadShippingOptions()]);\n\n            onReady();\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isInitializing: false });\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            isBillingSameAsShipping,\n            isGuest,\n            shouldShowMultiShipping,\n            customer,\n            unassignItem,\n            updateShippingAddress,\n            updateConsignment,\n            initializeShippingMethod,\n            deinitializeShippingMethod,\n            isMultiShippingMode,\n            onToggleMultiShipping,\n            shipDate,\n            setShipDate,\n            arrivalDate,\n            setArrivalDate,\n            giftMessage,\n            setGiftMessage,\n            // isStripeLinkEnabled,\n            providerWithCustomCheckout,\n            step,\n            isFloatingLabelEnabled,\n            ...shippingFormProps\n        } = this.props;\n\n        const {\n            isInitializing,\n            isGiftOrder,\n            giftMessages\n        } = this.state;\n\n        if (providerWithCustomCheckout === PaymentMethodId.StripeUPE && !customer.email && this.props.countries.length > 0) {\n            return <StripeShipping\n                { ...shippingFormProps }\n                customer={ customer }\n                deinitialize={deinitializeShippingMethod}\n                initialize={initializeShippingMethod}\n                isBillingSameAsShipping={isBillingSameAsShipping}\n                isGuest={ isGuest }\n                isLoading={ isInitializing }\n                isShippingMethodLoading={ this.props.isLoading }\n                isMultiShippingMode={isMultiShippingMode}\n                onMultiShippingChange={ this.handleMultiShippingModeSwitch }\n                onSubmit={this.handleSingleShippingSubmit}\n                shouldShowMultiShipping={ shouldShowMultiShipping }\n                step={step}\n                updateAddress={updateShippingAddress}\n            />;\n        }\n\n        const setIsGiftOrder = (isGiftOrder: boolean) => {\n            this.setState({isGiftOrder: isGiftOrder})\n        }\n\n        const setGiftMessages = (giftMessage: any) => {\n            var updatedGiftMessages = giftMessages\n            updatedGiftMessages.map(item => {\n                if (item.consignmentId === giftMessage.consignmentId) {\n                    item.giftMessage = giftMessage.giftMessage\n                }\n            })\n            this.setState({ giftMessages: updatedGiftMessages })\n        }\n\n        return (\n            <AddressFormSkeleton isLoading={isInitializing}>\n                <div className=\"checkout-form\">\n                    { isMultiShippingMode && !isGuest &&\n                        <ShippingBanner\n                            className='multi-ship-alert-banner'\n                            mainMessage={'You may experience increased screen loading times for orders with multiple destinations.'}\n                        />\n                    }\n                    <ShippingHeader\n                        isGuest={isGuest}\n                        isMultiShippingMode={isMultiShippingMode}\n                        onMultiShippingChange={this.handleMultiShippingModeSwitch}\n                        shouldShowMultiShipping={shouldShowMultiShipping}\n                    />\n                    <ShippingForm\n                        {...shippingFormProps}\n                        addresses={customer.addresses}\n                        deinitialize={deinitializeShippingMethod}\n                        initialize={initializeShippingMethod}\n                        isBillingSameAsShipping={isBillingSameAsShipping}\n                        isGuest={isGuest}\n                        isMultiShippingMode={isMultiShippingMode}\n                        onMultiShippingSubmit={this.handleMultiShippingSubmit}\n                        onSingleShippingSubmit={this.handleSingleShippingSubmit}\n                        onUseNewAddress={this.handleUseNewAddress}\n                        shouldShowSaveAddress={!isGuest}\n                        updateAddress={updateShippingAddress}\n                        shipDate={ shipDate }\n                        setShipDate={ setShipDate }\n                        arrivalDate={ arrivalDate }\n                        setArrivalDate={ setArrivalDate }\n                        giftMessage={ giftMessage }\n                        setGiftMessage={ setGiftMessage }\n                        isGiftOrder={ isGiftOrder }\n                        setIsGiftOrder={ setIsGiftOrder }\n                        giftMessages={ giftMessages }\n                        setGiftMessages={ setGiftMessages }\n                        loadGiftMessages={ this.loadGiftMessages }\n                        isFloatingLabelEnabled={isFloatingLabelEnabled}\n                    />\n                </div>\n            </AddressFormSkeleton>\n        );\n    }\n\n    private loadGiftMessages: (toggleMulti: boolean) => void = async (toggleMulti: boolean) => {\n        const {\n            consignments,\n            isMultiShippingMode\n        } = this.props\n\n        var giftMessages = new Array\n\n        if (isMultiShippingMode || toggleMulti) {\n            consignments.map((consignment: Consignment) => {\n                var giftMessage\n                var consignmentId\n                giftMessage = consignment.shippingAddress.customFields.find(customField => customField.fieldId === 'field_32')\n                consignmentId = consignment.id\n                if (consignmentId) {\n                    giftMessages.push({\n                        consignmentId: consignmentId,\n                        giftMessage: giftMessage && giftMessage.fieldValue || ''\n                    })\n                }\n            })\n    \n            this.setState({ giftMessages: giftMessages })\n        }\n    }\n\n    private handleMultiShippingModeSwitch: () => void = async () => {\n        const {\n            consignments,\n            isMultiShippingMode,\n            onToggleMultiShipping = noop,\n            onUnhandledError = noop,\n            updateShippingAddress,\n        } = this.props;\n\n        if (isMultiShippingMode && consignments.length > 1) {\n            this.setState({ isInitializing: true });\n\n            try {\n                // Collapse all consignments into one\n                await updateShippingAddress(consignments[0].shippingAddress);\n            } catch (error) {\n                onUnhandledError(error);\n            } finally {\n                this.setState({ isInitializing: false });\n            }\n        }\n        \n        var toggleMulti = true\n        this.loadGiftMessages(toggleMulti)\n        onToggleMultiShipping();\n    };\n\n    private handleSingleShippingSubmit: (values: SingleShippingFormValues) => void = async ({\n        billingSameAsShipping,\n        shippingAddress: addressValues,\n        orderComment,\n    }) => {\n        const {\n            cart,\n            customerMessage,\n            updateCheckout,\n            updateShippingAddress,\n            updateBillingAddress,\n            navigateNextStep,\n            onUnhandledError,\n            shippingAddress,\n            billingAddress,\n            methodId,\n            shipDate,\n            arrivalDate,\n            giftMessage,\n        } = this.props;\n\n        const { isGiftOrder } = this.state;\n\n        // CHECKOUT CUSTOM FIELDS\n        // Update Ship Date, Arrival Date, Gift Message, Gift Order custom fields when shipping step is completed.\n\n        if (addressValues) {\n            const shipDateValue = shipDate.toLocaleDateString('en-US')\n            const arrivalDateValue = arrivalDate.toLocaleDateString('en-US')\n            const giftMessageValue = giftMessage.toString()\n            const cartID = cart.id\n            addressValues.customFields.field_30 = shipDateValue\n            addressValues.customFields.field_38 = arrivalDateValue\n            addressValues.customFields.field_32 = giftMessageValue\n            isGiftOrder ? addressValues.customFields.field_34 = ['0'] : addressValues.customFields.field_34 = []\n            addressValues.customFields.field_36 = cartID\n        }\n\n        const updatedShippingAddress = addressValues && mapAddressFromFormValues(addressValues);\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n        const hasRemoteBilling = this.hasRemoteBilling(methodId);\n\n        if (!isEqualAddress(updatedShippingAddress, shippingAddress) || shippingAddress?.shouldSaveAddress !== updatedShippingAddress?.shouldSaveAddress) {\n            promises.push(updateShippingAddress(updatedShippingAddress || {}));\n        }\n\n        if (\n            billingSameAsShipping &&\n            updatedShippingAddress &&\n            !isEqualAddress(updatedShippingAddress, billingAddress) &&\n            !hasRemoteBilling\n        ) {\n            promises.push(updateBillingAddress(updatedShippingAddress));\n        }\n\n        if (customerMessage !== orderComment) {\n            promises.push(updateCheckout({ customerMessage: orderComment }));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            navigateNextStep(billingSameAsShipping);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    private hasRemoteBilling: (methodId?: string) => boolean = (methodId) => {\n        const PAYMENT_METHOD_VALID = ['amazonpay'];\n\n        return PAYMENT_METHOD_VALID.some((method) => method === methodId);\n    };\n\n    private handleUseNewAddress: (address: Address, itemId: string) => void = async (\n        address,\n        itemId,\n    ) => {\n        const { unassignItem, onUnhandledError, isMultiShippingMode } = this.props;\n\n        try {\n            await unassignItem({\n                address,\n                lineItems: [\n                    {\n                        quantity: 1,\n                        itemId,\n                    },\n                ],\n            });\n\n            location.href = '/account.php?action=add_shipping_address&from=checkout';\n        } catch (error) {\n            if (error instanceof UnassignItemError) {\n                onUnhandledError(new UnassignItemError(error));\n            }\n        }\n\n        this.loadGiftMessages(isMultiShippingMode)\n    };\n\n    private handleMultiShippingSubmit: (values: MultiShippingFormValues) => void = async ({\n        orderComment,\n    }) => {\n        const {\n            customerMessage,\n            updateCheckout,\n            updateConsignment,\n            navigateNextStep,\n            onUnhandledError,\n            consignments,\n            shipDate,\n            cart,\n            isMultiShippingMode\n        } = this.props;\n\n        const { giftMessages } = this.state;\n\n        interface ConsignmentUpdateRequestBody {\n            id: string;\n            shippingAddress?: AddressRequestBody;\n            lineItems?: Array<any>;\n        }\n\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n\n        // CHECKOUT CUSTOM FIELDS\n        // Update Ship Date, Arrival Date, Gift Message, Gift Order custom fields when shipping step is completed.\n        \n        const updateConsignmentCustomFields = async (consignment: Consignment) => {\n\n            if (giftMessages.length > 0) {\n                var giftMessage\n                giftMessage = giftMessages.find(item => item.consignmentId === consignment.id).giftMessage\n            }\n            const shipDateValue = shipDate.toLocaleDateString('en-US')\n            const cartID = cart.id.toString()\n\n            var customFields = [\n                { fieldId: \"field_30\", fieldValue: shipDateValue },\n                { fieldId: \"field_36\", fieldValue: cartID },\n                { fieldId: \"field_32\", fieldValue: giftMessage && giftMessage || '' }\n            ]\n\n            consignment.shippingAddress.customFields = customFields\n            var consignmentLineItems: { itemId: string | number; quantity: number; }[] = []\n            const lineItems = findLineItems(cart, consignment)\n            lineItems.map(lineItem => consignmentLineItems.push({ itemId: lineItem.id, quantity: lineItem.quantity}))\n\n            const payload: ConsignmentUpdateRequestBody = {\n                id: consignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: consignmentLineItems\n            };\n\n            await promises.push(updateConsignment(payload || {}))\n        }\n\n        if (isMultiShippingMode || consignments.length > 1) {\n            consignments.map((consignment) => {\n                updateConsignmentCustomFields(consignment)\n            })\n        }\n\n        try {\n            await Promise.all(promises);\n\n            if (customerMessage !== orderComment) {\n                await updateCheckout({ customerMessage: orderComment });\n            }\n\n            navigateNextStep(false);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n}\n\nconst deleteConsignmentsSelector = createSelector(\n    ({ checkoutService: { deleteConsignment } }: CheckoutContextProps) => deleteConsignment,\n    ({ checkoutState: { data } }: CheckoutContextProps) => data.getConsignments(),\n    (deleteConsignment, consignments) => async () => {\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        const [{ data }] = await Promise.all(consignments.map(({ id }) => deleteConsignment(id)));\n\n        return data.getShippingAddress();\n    },\n);\n\n// tslint:disable-next-line:cyclomatic-complexity\nexport function mapToShippingProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutShippingProps | null {\n    const {\n        data: {\n            getCart,\n            getCheckout,\n            getConfig,\n            getCustomer,\n            getConsignments,\n            getShippingAddress,\n            getBillingAddress,\n            getShippingAddressFields,\n            getShippingCountries,\n        },\n        statuses: {\n            isShippingStepPending,\n            isSelectingShippingOption,\n            isLoadingShippingOptions,\n            isUpdatingConsignment,\n            isCreatingConsignments,\n            isCreatingCustomerAddress,\n            isLoadingShippingCountries,\n            isUpdatingBillingAddress,\n            isUpdatingCheckout,\n        },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const config = getConfig();\n    const consignments = getConsignments() || [];\n    const customer = getCustomer();\n    const cart = getCart();\n\n    if (!checkout || !config || !customer || !cart) {\n        return null;\n    }\n\n    const {\n        checkoutSettings: {\n            enableOrderComments,\n            features,\n            hasMultiShippingEnabled,\n            googleMapsApiKey,\n        },\n    } = config;\n\n    const methodId = getShippingMethodId(checkout);\n    const shippableItemsCount = getShippableItemsCount(cart);\n    const isLoading =\n        isLoadingShippingOptions() ||\n        isSelectingShippingOption() ||\n        isUpdatingConsignment() ||\n        isCreatingConsignments() ||\n        isUpdatingBillingAddress() ||\n        isUpdatingCheckout() ||\n        isCreatingCustomerAddress();\n    const shouldShowMultiShipping =\n        hasMultiShippingEnabled && !methodId && shippableItemsCount > 1 && shippableItemsCount < 50;\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ'];\n\n    if (features['CHECKOUT-4183.checkout_google_address_autocomplete_uk']) {\n        countriesWithAutocomplete.push('GB');\n    }\n\n    const shippingAddress =\n        !shouldShowMultiShipping && consignments.length > 1 ? undefined : getShippingAddress();\n\n    return {\n        assignItem: checkoutService.assignItemsToAddress,\n        billingAddress: getBillingAddress(),\n        cart,\n        consignments,\n        countries: getShippingCountries() || EMPTY_ARRAY,\n        countriesWithAutocomplete,\n        customer,\n        customerMessage: checkout.customerMessage,\n        createCustomerAddress: checkoutService.createCustomerAddress,\n        deinitializeShippingMethod: checkoutService.deinitializeShipping,\n        deleteConsignments: deleteConsignmentsSelector({ checkoutService, checkoutState }),\n        getFields: getShippingAddressFields,\n        googleMapsApiKey,\n        initializeShippingMethod: checkoutService.initializeShipping,\n        isGuest: customer.isGuest,\n        isInitializing: isLoadingShippingCountries() || isLoadingShippingOptions(),\n        isLoading,\n        isShippingStepPending: isShippingStepPending(),\n        loadShippingAddressFields: checkoutService.loadShippingAddressFields,\n        loadShippingOptions: checkoutService.loadShippingOptions,\n        methodId,\n        providerWithCustomCheckout: config.checkoutSettings.providerWithCustomCheckout || undefined,\n        shippingAddress,\n        shouldShowMultiShipping,\n        shouldShowAddAddressInCheckout:\n            features['CHECKOUT-4726.add_address_in_multishipping_checkout'],\n        shouldShowOrderComments: enableOrderComments,\n        signOut: checkoutService.signOutCustomer,\n        unassignItem: checkoutService.unassignItemsToAddress,\n        updateBillingAddress: checkoutService.updateBillingAddress,\n        updateCheckout: checkoutService.updateCheckout,\n        updateShippingAddress: checkoutService.updateShippingAddress,\n        updateConsignment: checkoutService.updateConsignment,\n        // isStripeLinkEnabled: stripeUpeLinkEnabled,\n        loadPaymentMethods: checkoutService.loadPaymentMethods,\n        isFloatingLabelEnabled: isFloatingLabelEnabled(config.checkoutSettings),\n    };\n}\n\nexport default withCheckout(mapToShippingProps)(Shipping);\n","import { noop } from 'lodash';\nimport { createContext } from 'react';\n\nexport interface AccordionContextProps {\n    selectedItemId?: string;\n    onToggle(id: string): void;\n}\n\nconst AccordionContext = createContext<AccordionContextProps>({ onToggle: noop });\n\nexport default AccordionContext;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionProps {\n    children: ReactNode;\n    className?: string;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    onSelect?(id: string): void;\n}\n\nexport interface AccordionState {\n    selectedItemId?: string;\n}\n\nexport default class Accordion extends Component<AccordionProps, AccordionState> {\n    state: AccordionState = {};\n\n    private getContextValue = memoizeOne((selectedItemId) => {\n        return {\n            onToggle: this.handleToggleItem,\n            selectedItemId,\n        };\n    });\n\n    render(): ReactNode {\n        const { children, className = 'accordion', defaultSelectedItemId } = this.props;\n\n        const { selectedItemId = defaultSelectedItemId } = this.state;\n\n        return (\n            <AccordionContext.Provider value={this.getContextValue(selectedItemId)}>\n                <ul className={className}>{children}</ul>\n            </AccordionContext.Provider>\n        );\n    }\n\n    private handleToggleItem: (id: string) => void = (id) => {\n        const { isDisabled, onSelect = noop } = this.props;\n\n        if (isDisabled) {\n            return;\n        }\n\n        this.setState({ selectedItemId: id });\n        onSelect(id);\n    };\n}\n","import { noop } from 'lodash';\nimport React, {\n    createContext,\n    FunctionComponent,\n    memo,\n    ReactNode,\n    useCallback,\n    useMemo,\n} from 'react';\n\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { Accordion } from '../accordion';\n\nexport interface ChecklistProps {\n    children: ReactNode;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    name: string;\n    onSelect?(value: string): void;\n}\n\nexport interface ChecklistContextProps {\n    name: string;\n}\n\nexport const ChecklistContext = createContext<ChecklistContextProps | undefined>(undefined);\n\nconst Checklist: FunctionComponent<\n    ChecklistProps & ConnectFormikProps<{ [key: string]: string }>\n> = ({ formik: { setFieldValue }, name, onSelect = noop, ...props }) => {\n    const handleSelect = useCallback(\n        (value: string) => {\n            setFieldValue(name, value);\n            onSelect(value);\n        },\n        [name, onSelect, setFieldValue],\n    );\n\n    const contextValue = useMemo(() => ({ name }), [name]);\n\n    return (\n        <ChecklistContext.Provider value={contextValue}>\n            <Accordion\n                {...props}\n                className=\"form-checklist optimizedCheckout-form-checklist\"\n                onSelect={handleSelect}\n            />\n        </ChecklistContext.Provider>\n    );\n};\n\nexport default connectFormik(memo(Checklist));\n","import classNames from 'classnames';\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useContext } from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionItemProps {\n    bodyClassName?: string;\n    children?: ReactNode;\n    className?: string;\n    classNameSelected?: string;\n    headerClassName?: string;\n    headerClassNameSelected?: string;\n    itemId: string;\n    headerContent(props: AccordionItemHeaderProps): ReactNode;\n}\n\nexport interface AccordionItemHeaderProps {\n    isSelected: boolean;\n    onToggle(id: string): void;\n}\n\nconst AccordionItem: FunctionComponent<AccordionItemProps> = ({\n    bodyClassName = 'accordion-item-body',\n    children,\n    className = 'accordion-item',\n    classNameSelected = 'accordion-item--selected',\n    headerClassName = 'accordion-item-header',\n    headerClassNameSelected = 'accordion-item-header--selected',\n    headerContent,\n    itemId,\n}) => {\n    const { onToggle, selectedItemId } = useContext(AccordionContext);\n    const isSelected = selectedItemId === itemId;\n\n    const transitionEndListener = useCallback((node, done) => {\n        node.addEventListener('transitionend', ({ target }: Event) => {\n            if (target === node) {\n                done();\n            }\n        });\n    }, []);\n\n    return (\n        <li\n            className={classNames(className, { [classNameSelected]: isSelected })}\n        >\n            <div className={classNames(headerClassName, { [headerClassNameSelected]: isSelected })}>\n                {headerContent({ isSelected, onToggle })}\n            </div>\n\n            {children && (\n                <CSSTransition\n                    addEndListener={transitionEndListener}\n                    classNames={bodyClassName}\n                    in={isSelected}\n                    mountOnEnter\n                    timeout={{}}\n                    unmountOnExit\n                >\n                    <div className={bodyClassName}>{children}</div>\n                </CSSTransition>\n            )}\n        </li>\n    );\n};\n\nexport default memo(AccordionItem);\n","import React, { FunctionComponent, InputHTMLAttributes } from 'react';\n\nimport Input from './Input';\nimport Label from './Label';\n\nexport interface ChecklistItemInputProps extends InputHTMLAttributes<HTMLInputElement> {\n    isSelected: boolean;\n}\n\nconst ChecklistItemInput: FunctionComponent<ChecklistItemInputProps> = ({\n    id,\n    isSelected,\n    children,\n    ...props\n}) => (\n    <>\n        <Input\n            {...props}\n            checked={isSelected}\n            className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\n            id={id}\n            type=\"radio\"\n        />\n\n        <Label htmlFor={id}>{children}</Label>\n    </>\n);\n\nexport default ChecklistItemInput;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useContext } from 'react';\n\nimport { AccordionItem, AccordionItemHeaderProps } from '../accordion';\n\nimport BasicFormField from './BasicFormField';\nimport { ChecklistContext } from './Checklist';\nimport ChecklistItemInput from './ChecklistItemInput';\n\nexport interface ChecklistItemProps {\n    content?: ReactNode;\n    htmlId?: string;\n    isDisabled?: boolean;\n    label: ReactNode | ((isSelected: boolean) => ReactNode);\n    value: string;\n}\n\nconst ChecklistItem: FunctionComponent<ChecklistItemProps> = ({\n    isDisabled,\n    value,\n    content,\n    htmlId = kebabCase(value),\n    label,\n    ...rest\n}) => {\n    const { name = '' } = useContext(ChecklistContext) || {};\n\n    const renderInput = useCallback(\n        memoizeOne((isSelected: boolean) => ({ field }: FieldProps) => (\n            <ChecklistItemInput\n                {...field}\n                disabled={isDisabled}\n                id={htmlId}\n                isSelected={field.value === value}\n                value={value}\n            >\n                {label instanceof Function ? label(isSelected) : label}\n            </ChecklistItemInput>\n        )),\n        [htmlId, isDisabled, label, value],\n    );\n\n    const handleChange = useCallback(\n        memoizeOne((onToggle: (id: string) => void) => (selectedValue: string) => {\n            if (value === selectedValue) {\n                onToggle(value);\n            }\n        }),\n        [],\n    );\n\n    const renderHeaderContent = useCallback(\n        ({ isSelected, onToggle }: AccordionItemHeaderProps) => (\n            <BasicFormField\n                className=\"form-checklist-option\"\n                name={name}\n                onChange={handleChange(onToggle)}\n                render={renderInput(isSelected)}\n            />\n        ),\n        [handleChange, name, renderInput],\n    );\n\n    return (\n        <AccordionItem\n            {...rest}\n            bodyClassName=\"form-checklist-body\"\n            className=\"form-checklist-item optimizedCheckout-form-checklist-item\"\n            classNameSelected=\"form-checklist-item--selected optimizedCheckout-form-checklist-item--selected\"\n            headerClassName=\"form-checklist-header\"\n            headerClassNameSelected=\"form-checklist-header--selected\"\n            headerContent={renderHeaderContent}\n            itemId={value}\n        >\n            {content}\n        </AccordionItem>\n    );\n};\n\nexport default memo(ChecklistItem);\n"],"names":["connectFormik","OriginalComponent","InnerComponent","memo","props","prevFormik","prevProps","nextFormik","nextProps","DecoratedComponent","connect","displayName","name","data","message","getLanguageService","translate","UnassignItemError","prototype","CustomError","getShippingMethodId","checkout","preselectedPayment","getPreselectedPayment","indexOf","providerId","undefined","SaveAddressForm","withLanguage","withFormik","handleSubmit","values","onSaveAddress","mapPropsToValues","defaultCountryCode","firstName","lastName","address1","address2","customFields","country","countryCode","stateOrProvince","stateOrProvinceCode","postalCode","phone","city","company","shouldSaveAddress","validationSchema","language","getFields","getAddressFormFieldsValidationSchema","formFields","googleMapsApiKey","countriesWithAutocomplete","countries","setFieldValue","isLoading","onRequestClose","isFloatingLabelEnabled","Form","autoComplete","LoadingOverlay","AddressForm","shouldShowSaveAddress","className","href","onClick","preventDefault","TranslatedString","id","Button","disabled","type","variant","isOpen","onAfterOpen","addressFormProps","Modal","additionalModalClassName","header","ModalHeader","shouldShowCloseButton","title","AssignItemInvalidAddressError","AssignItemFailedError","findConsignment","consignments","itemId","find","consignment","includes","lineItemIds","getShippableLineItems","cart","reduce","lineItems","physicalItems","result","item","i","addedByPromotion","isNil","parentId","concat","lineItemIndex","splitItems","quantity","key","variantId","productId","splitItem","imageUrl","options","addresses","onSelectAddress","onUseNewAddress","handleUseNewAddress","useCallback","address","handleSelectAddress","alt","src","map","optionName","value","nameId","AddressSelect","selectedAddress","shippingAddress","children","mainMessage","mainMessageIcon","secondMessage","secondMessageIcon","listItems","renderIcon","source","IconContainer","CustomIcon","imageSource","ListItem","length","index","isMultiShippingMode","shipDate","setShipDate","arrivalDate","setArrivalDate","isActiveCart","setUnavailableItems","itemsUnavailableToShip","setItemsUnavailableToShip","today","Date","todayReset","setHours","useState","Object","setAddress","selectedShippingOption","setSelectedShippingOption","Array","availableDates","setAvailableDates","blackoutDates","setBlackoutDates","promotionalItems","setPromotionalItems","nextAvailableDate","setNextAvailableDate","inventoryData","setInventoryData","useEffect","fetchBlackoutDates","fetchShipByDates","fetchInventoryData","keys","fetchUPSEstimate","getAvailableDates","maxDate","savedShipDate","currentShipDate","customField","fieldId","fieldValue","isAfterNextAvailable","filterDates","endsAfterShipDate","push","window","scroll","calendarDays","document","querySelectorAll","NodeList","forEach","day","removeAttribute","unavailableItems","qty_available","status","start","end","dates","date","setDate","getDate","isToday","isWeekday","isBlackoutDate","isAvailableWeekendDate","formattedDate","getFullYear","String","getMonth","padStart","join","getTime","getDay","isAfter","mustShipDate","split","month","year","body","description","reqObj","method","headers","JSON","stringify","fetch","then","resp","json","estimate","estimatedArrival","EstimatedArrival","replaceAll","catch","error","console","log","formattedDates","blackoutDate","results","productIds","productSKUs","toString","sku","productSKU","skus","variant_sku","renderUnavailableToShipMessage","products","formattedShipDate","toLocaleDateString","weekday","productDetails","productName","Fieldset","Legend","testId","calendarClassName","selected","onChange","minDate","filterDate","highlightDates","inline","SelectedShipDate","ArrivalDate","bannerMessage","alert","giftMessageLength","ExpandCircleDownRounded","clearGiftMessage","DeleteForeverRounded","giftMessageToggle","toggleGiftMessage","setClassName","giftMessage","setGiftMessage","maxLength","rows","placeholder","event","target","defaultValue","renderGiftMessage","setGiftMessageToggle","savedGiftMessage","getRecommendedShippingOption","availableShippingOptions","ShippingOptionListItem","consignmentId","shippingOption","renderLabel","StaticShippingOption","displayAdditionalInformation","ChecklistItem","htmlId","label","inputName","shippingOptions","selectedShippingOptionId","onSelectedOption","handleSelect","Checklist","defaultSelectedItemId","onSelect","selectDefaultShippingOptions","this","selectShippingOption","getConsignments","recommendedOption","singleShippingOption","defaultShippingOption","componentDidMount","subscribeToConsignments","unsubscribe","componentDidUpdate","analyticsTracker","shouldShowShippingOptions","showShippingMethods","componentWillUnmount","render","invalidShippingMessage","methodId","renderConsignment","ChecklistSkeleton","additionalClassName","renderNoShippingOptions","role","StaticAddress","StaticConsignmentItemList","PureComponent","withAnalytics","noop","shippingOptionIds","ShippingOptionsForm","subscribeToConsignmentsSelector","createSelector","subscribe","subscriber","isLoadingSelector","_","isLoadingShippingOptions","isSelectingShippingOption","isUpdatingConsignment","isCreatingConsignments","isUpdatingAddress","withCheckout","checkoutService","checkoutState","getCart","getConfig","getCustomer","getCheckout","customer","config","unsortedConsignments","shippableItems","consignmentsOrder","uniq","sortBy","sortConsignments","checkoutSettings","selectConsignmentShippingOption","renderRecipient","renderRecipientCompany","renderShippingAddress","giftMessages","setGiftMessages","setShippingAcknowledged","labelContent","state","shippingAcknowledged","savedCartID","cartHasChanged","shouldShowOrderComments","shouldDisableSubmit","renderItemAvailabilityMessage","option","unshift","legend","Alert","ShippingOptions","includesFrangoItems","categoryNames","setState","renderGiftMessageMulti","OrderComments","items","handleCloseErrorModal","createCustomerAddressError","handleSaveAddress","createCustomerAddress","itemAddingAddress","mapAddressFromFormValues","Error","itemKey","shouldShowAddAddressInCheckout","loadGiftMessages","handleCloseAddAddressForm","assignItem","onUnhandledError","isValidAddress","syncItems","hasSelectedShippingOptions","currentItems","updatedItemIndex","cartItemIds","updatedConsignment","isEqualAddress","newId","matchingCartItems","filter","matchingCartItemIds","findNewItemId","updateShippableItems","findIndex","getDerivedStateFromProps","getShippableItemsCount","isGuest","onSignIn","onCreateAccount","TranslatedLink","ErrorModal","onClose","shouldShowErrorCode","hasUnassignedLineItems","onSubmit","orderComment","enableReinitialize","MultiShippingForm","useMemo","CheckboxFormField","addressFieldName","fieldName","formFieldName","field","custom","handleChange","onFieldChange","handleAutocompleteToggle","inputValue","onAddressSelect","formAddress","hasAddresses","hasValidCustomerAddress","isValidCustomerAddress","unmountContentWhenLoading","onAutocompleteToggle","Component","ShippingAddressForm","handleFieldValueChange","initialize","deinitialize","buttonId","customFormFields","shouldShowCustomFormFields","style","padding","size","DynamicFormField","parentFieldName","hasRequestedShippingOptions","isShippingStepPending","setSubmitted","useContext","initializeShipping","memoizeOne","defaultOptions","editAddressButtonId","amazonpay","SHIPPING_ADDRESS_FIELDS","setIsGiftOrder","isResettingAddress","isUpdatingShippingData","isValid","handleFieldChange","Promise","resolve","setTimeout","isShippingField","updateAddressWithFormData","handleAddressSelect","updateAddress","setValues","mapAddressToFormValues","deleteConsignments","debouncedUpdateAddress","debounce","includeShippingOptions","params","include","addressForm","isGiftOrder","shouldShowBillingSameAsShipping","some","updatedShippingAddress","contextType","billingSameAsShipping","isInitialValid","isValidSync","formValues","getCustomFormFieldsValidationSchema","SingleShippingForm","customerMessage","isBillingSameAsShipping","onMultiShippingSubmit","onSingleShippingSubmit","signOut","ShippingForm","onMultiShippingChange","shouldShowMultiShipping","width","StripeStateMapper","stateList","getStripeState","step","isStripeLoading","isStripeAutoStep","isShippingMethodLoading","isNewAddress","setIsNewAddress","isFirstShippingRender","setIsFirstShippingRender","stripeShippingAddress","setStripeShippingAddress","handleLoading","containerId","availableShippingList","code","allowedCountries","handleStripeShippingAddress","shipping","complete","phoneFieldRequired","line1","line2","postal_code","stepCompleted","isComplete","shippingPopulated","shouldShowContent","names","shippingValue","current","getStylesFromElement","properties","parentContainer","getElementById","getAppliedStyles","getStripeStyles","formInput","formLabel","formError","labelText","color","fieldText","fieldPlaceholderText","fieldErrorText","fieldBackground","fieldInnerShadow","fieldBorder","stripeupe","container","onChangeShipping","availableCountries","getStyles","gatewayId","Function","StripeShippingForm","stripeLoadedCallback","handleIsAutoStep","shippingFormProps","AddressFormSkeleton","display","toggleMulti","handleMultiShippingModeSwitch","onToggleMultiShipping","updateShippingAddress","isInitializing","handleSingleShippingSubmit","addressValues","updateCheckout","updateBillingAddress","navigateNextStep","billingAddress","shipDateValue","arrivalDateValue","giftMessageValue","cartID","field_30","field_38","field_32","field_34","field_36","promises","hasRemoteBilling","all","unassignItem","location","handleMultiShippingSubmit","updateConsignment","updateConsignmentCustomFields","consignmentLineItems","findLineItems","lineItem","payload","loadShippingAddressFields","loadShippingOptions","onReady","initializeShippingMethod","deinitializeShippingMethod","providerWithCustomCheckout","PaymentMethodId","email","updatedGiftMessages","deleteConsignmentsSelector","deleteConsignment","getShippingAddress","mapToShippingProps","getBillingAddress","getShippingAddressFields","getShippingCountries","isCreatingCustomerAddress","isLoadingShippingCountries","isUpdatingBillingAddress","isUpdatingCheckout","enableOrderComments","features","hasMultiShippingEnabled","shippableItemsCount","assignItemsToAddress","deinitializeShipping","signOutCustomer","unassignItemsToAddress","loadPaymentMethods","Shipping","createContext","onToggle","getContextValue","selectedItemId","handleToggleItem","isDisabled","AccordionContext","ChecklistContext","contextValue","Provider","bodyClassName","classNameSelected","headerClassName","headerClassNameSelected","headerContent","isSelected","transitionEndListener","node","done","addEventListener","CSSTransition","addEndListener","classNames","in","mountOnEnter","timeout","unmountOnExit","Input","checked","Label","htmlFor","content","kebabCase","rest","renderInput","selectedValue","renderHeaderContent","BasicFormField"],"sourceRoot":""}