{"version":3,"file":"shipping-2c51dbe1.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/common/form/connectFormik.tsx","webpack://checkout/./packages/core/src/app/shipping/errors/UnassignItemError.ts","webpack://checkout/./packages/core/src/app/shipping/getShippingMethodId.ts","webpack://checkout/./packages/core/src/app/address/AddressFormModal.tsx","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemInvalidAddressError.ts","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemFailedError.ts","webpack://checkout/./packages/core/src/app/shipping/findConsignment.ts","webpack://checkout/./packages/core/src/app/shipping/getShippableLineItems.ts","webpack://checkout/./packages/core/src/app/shipping/ItemAddressSelect.tsx","webpack://checkout/./packages/checkout-extension/src/ExtensionRegionContainer.ts","webpack://checkout/./packages/checkout-extension/src/useExtensions.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/giftOptions/GiftOptions.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/giftOptions/GiftMessageCollapsed.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/giftOptions/GiftMessageExpanded.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/giftOptions/GiftMessageToggle.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/giftOptions/GiftMessageForm.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/giftOptions/GiftMessage.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/giftOptions/GiftMessageDisabled.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/giftOptions/GiftMessageDestination.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/giftOptions/GiftMessageMulti.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/shipDate/DatesSummary.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/shipDate/ShippingBanner.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/shipDate/ShippingCalendar.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/shipDate/ShippingInfo.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/shipDate/ShippingInfoBanner.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/shipDate/ShipDate.tsx","webpack://checkout/./packages/core/src/app/shipping/customComponents/shipDate/ShipDateDisabled.tsx","webpack://checkout/./packages/core/src/app/shipping/getRecommendedShippingOption.ts","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsList.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsForm.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptions.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingFormFooter.tsx","webpack://checkout/./packages/core/src/app/shipping/MultiShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/updateShippableItems.ts","webpack://checkout/./packages/core/src/app/shipping/BillingSameAsShippingField.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressForm.tsx","webpack://checkout/./packages/core/src/app/shipping/StaticAddressEditable.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressFields.ts","webpack://checkout/./packages/core/src/app/shipping/customComponents/giftOptions/GiftOrderForm.tsx","webpack://checkout/./packages/core/src/app/shipping/SingleShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingHeader.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingAddressDisplay.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeStateMapper.ts","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShipping.tsx","webpack://checkout/./packages/core/src/app/shipping/Shipping.tsx","webpack://checkout/./packages/core/src/app/ui/accordion/AccordionContext.tsx","webpack://checkout/./packages/core/src/app/ui/accordion/Accordion.tsx","webpack://checkout/./packages/core/src/app/ui/form/Checklist.tsx","webpack://checkout/./packages/core/src/app/ui/accordion/AccordionItem.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItemInput.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItem.tsx"],"sourcesContent":["import { connect } from 'formik';\nimport React, { ComponentType, FunctionComponent, memo } from 'react';\nimport shallowEqual from 'shallowequal';\n\nimport ConnectFormikProps from './ConnectFormikProps';\n\nexport default function connectFormik<TProps extends ConnectFormikProps<TValues>, TValues = any>(\n    OriginalComponent: ComponentType<TProps>,\n): ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>> {\n    const InnerComponent: FunctionComponent<TProps> = memo(\n        (props) => <OriginalComponent {...props} />,\n        ({ formik: prevFormik, ...prevProps }, { formik: nextFormik, ...nextProps }) =>\n            shallowEqual(prevFormik, nextFormik) && shallowEqual(prevProps, nextProps),\n    );\n\n    const DecoratedComponent = connect<TProps, TValues>(InnerComponent) as ComponentType<\n        Omit<TProps, keyof ConnectFormikProps<TValues>>\n    >;\n\n    DecoratedComponent.displayName = `ConnectFormik(${\n        OriginalComponent.displayName || OriginalComponent.name\n    })`;\n\n    return DecoratedComponent;\n}\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class UnassignItemError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'UNASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.unassign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, UnassignItemError.prototype);\n    }\n}\n","import { Checkout } from '@bigcommerce/checkout-sdk';\n\nimport { getPreselectedPayment } from '../payment';\n\nexport default function getShippingMethodId(checkout: Checkout): string | undefined {\n    const SHIPPING_METHOD_IDS = ['amazonpay'];\n    const preselectedPayment = getPreselectedPayment(checkout);\n\n    return preselectedPayment && SHIPPING_METHOD_IDS.indexOf(preselectedPayment.providerId) > -1\n        ? preselectedPayment.providerId\n        : undefined;\n}\n","import { Country, FormField } from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport React, { FunctionComponent } from 'react';\nimport { lazy } from 'yup';\n\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport { preventDefault } from '../common/dom';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Form } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\nimport { Modal, ModalHeader } from '../ui/modal';\n\nimport AddressForm from './AddressForm';\nimport getAddressFormFieldsValidationSchema from './getAddressFormFieldsValidationSchema';\nimport { AddressFormValues } from './mapAddressToFormValues';\n\nexport interface AddressFormModalProps extends AddressFormProps {\n    isOpen: boolean;\n    onAfterOpen?(): void;\n}\n\nexport interface AddressFormProps {\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    shouldShowSaveAddress?: boolean;\n    defaultCountryCode?: string;\n    isFloatingLabelEnabled?: boolean;\n    getFields(countryCode?: string): FormField[];\n    onSaveAddress(address: AddressFormValues): void;\n    onRequestClose?(): void;\n}\n\nconst SaveAddress: FunctionComponent<\n    AddressFormProps & WithLanguageProps & FormikProps<AddressFormValues>\n> = ({\n    googleMapsApiKey,\n    getFields,\n    countriesWithAutocomplete,\n    countries,\n    values,\n    setFieldValue,\n    isLoading,\n    onRequestClose,\n    isFloatingLabelEnabled,\n}) => (\n    <Form autoComplete=\"on\">\n        <LoadingOverlay isLoading={isLoading}>\n            <AddressForm\n                countries={countries}\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                countryCode={values.countryCode}\n                formFields={getFields(values.countryCode)}\n                googleMapsApiKey={googleMapsApiKey}\n                isFloatingLabelEnabled={isFloatingLabelEnabled}\n                setFieldValue={setFieldValue}\n                shouldShowSaveAddress={false}\n            />\n            <div className=\"form-actions\">\n                <a\n                    className=\"button optimizedCheckout-buttonSecondary\"\n                    href=\"#\"\n                    onClick={preventDefault(onRequestClose)}\n                >\n                    <TranslatedString id=\"common.cancel_action\" />\n                </a>\n\n                <Button\n                    disabled={isLoading}\n                    id=\"checkout-save-address\"\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"address.save_address_action\" />\n                </Button>\n            </div>\n        </LoadingOverlay>\n    </Form>\n);\n\nconst SaveAddressForm = withLanguage(\n    withFormik<AddressFormProps & WithLanguageProps, AddressFormValues>({\n        handleSubmit: (values, { props: { onSaveAddress } }) => {\n            onSaveAddress(values);\n        },\n        mapPropsToValues: ({ defaultCountryCode = '' }) => ({\n            firstName: '',\n            lastName: '',\n            address1: '',\n            address2: '',\n            customFields: {},\n            country: '',\n            countryCode: defaultCountryCode,\n            stateOrProvince: '',\n            stateOrProvinceCode: '',\n            postalCode: '',\n            phone: '',\n            city: '',\n            company: '',\n            shouldSaveAddress: false,\n        }),\n        validationSchema: ({ language, getFields }: AddressFormProps & WithLanguageProps) =>\n            lazy<Partial<AddressFormValues>>((values) =>\n                getAddressFormFieldsValidationSchema({\n                    language,\n                    formFields: getFields(values && values.countryCode),\n                }),\n            ),\n    })(SaveAddress),\n);\n\nconst AddressFormModal: FunctionComponent<AddressFormModalProps> = ({\n    isOpen,\n    onAfterOpen,\n    onRequestClose,\n    ...addressFormProps\n}) => (\n    <Modal\n        additionalModalClassName=\"modal--medium\"\n        header={\n            <ModalHeader>\n                <TranslatedString id=\"address.add_address_heading\" />\n            </ModalHeader>\n        }\n        isOpen={isOpen}\n        onAfterOpen={onAfterOpen}\n        onRequestClose={onRequestClose}\n        shouldShowCloseButton={true}\n    >\n        <SaveAddressForm {...addressFormProps} onRequestClose={onRequestClose} />\n    </Modal>\n);\n\nexport default AddressFormModal;\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class AssignItemInvalidAddressError extends CustomError {\n    constructor(data?: Error) {\n        super({\n            name: 'ASSIGN_ITEM_INVALID_ADDRESS',\n            message: getLanguageService().translate('shipping.assign_item_invalid_address_error'),\n            title: getLanguageService().translate(\n                'shipping.assign_item_invalid_address_error_heading',\n            ),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemInvalidAddressError.prototype);\n    }\n}\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class AssignItemFailedError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'ASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.assign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemFailedError.prototype);\n    }\n}\n","import { Consignment } from '@bigcommerce/checkout-sdk';\nimport { find, includes } from 'lodash';\n\nexport default function findConsignment(\n    consignments: Consignment[],\n    itemId: string,\n): Consignment | undefined {\n    return find(consignments, (consignment) => includes(consignment.lineItemIds, itemId));\n}\n","import { Cart, Consignment, PhysicalItem } from '@bigcommerce/checkout-sdk';\nimport { isNil, reduce } from 'lodash';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport default function getShippableLineItems(\n    cart: Cart,\n    consignments: Consignment[],\n): ShippableItem[] {\n    return reduce(\n        (cart && cart.lineItems.physicalItems) || [],\n        (result, item, i) =>\n            !item.addedByPromotion && isNil(item.parentId)\n                ? result.concat(...splitItem(item, consignments, i))\n                : result,\n        [] as ShippableItem[],\n    );\n}\n\nfunction splitItem(\n    item: PhysicalItem,\n    consignments: Consignment[],\n    lineItemIndex: number,\n): ShippableItem[] {\n    let splitItems: ShippableItem[] = [];\n    const consignment = findConsignment(consignments, item.id as string);\n\n    for (let i = 0; i < item.quantity; i++) {\n        splitItems = splitItems.concat({\n            ...item,\n            key: `${item.variantId}-${item.productId}-${lineItemIndex}-${i}`,\n            consignment,\n            quantity: 1,\n        });\n    }\n\n    return splitItems;\n}\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { AddressSelect } from '../address';\n\nimport ShippableItem from './ShippableItem';\n\nexport interface ItemAddressSelectProps {\n    item: ShippableItem;\n    addresses: CustomerAddress[];\n    onSelectAddress(address: Address, itemId: string, itemKey: string): void;\n    onUseNewAddress(address: Address | undefined, itemId: string, itemKey: string): void;\n}\n\nconst ItemAddressSelect: FunctionComponent<ItemAddressSelectProps> = ({\n    item: { id, key, imageUrl, quantity, name, options, consignment },\n    addresses,\n    onSelectAddress,\n    onUseNewAddress,\n}) => {\n    const handleUseNewAddress = useCallback(\n        (address: Address) => {\n            onUseNewAddress(address, id as string, key);\n        },\n        [id, onUseNewAddress, key],\n    );\n\n    const handleSelectAddress = useCallback(\n        (address: Address) => {\n            onSelectAddress(address, id as string, key);\n        },\n        [id, key, onSelectAddress],\n    );\n\n    return (\n        <div className=\"consignment\">\n            <figure className=\"consignment-product-figure\">\n                {imageUrl && <img alt={name} src={imageUrl} />}\n            </figure>\n\n            <div className=\"consignment-product-body\">\n                <h4 className=\"optimizedCheckout-contentPrimary\">{`${quantity} x ${name}`}</h4>\n\n                {(options || []).map(({ name: optionName, value, nameId }) => (\n                    <ul\n                        className=\"product-options optimizedCheckout-contentSecondary\"\n                        data-test=\"consigment-item-product-options\"\n                        key={nameId}\n                    >\n                        <li className=\"product-option\">{`${optionName} ${value}`}</li>\n                    </ul>\n                ))}\n\n                <AddressSelect\n                    addresses={addresses}\n                    onSelectAddress={handleSelectAddress}\n                    onUseNewAddress={handleUseNewAddress}\n                    selectedAddress={consignment && consignment.shippingAddress}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default memo(ItemAddressSelect);\n","export enum ExtensionRegionContainer {\n    ShippingShippingAddressFormBefore = 'extension-region-shipping-shippingaddressform-before',\n    ShippingShippingAddressFormAfter = 'extension-region-shipping-shippingaddressform-after',\n}\n","import { useContext } from 'react';\n\nimport { ExtensionContext } from './ExtensionContext';\n\nexport const useExtensions = () => {\n    const extensionContext = useContext(ExtensionContext);\n\n    if (!extensionContext) {\n        throw new Error('useExtensions must be used within an <ExtensionProvider>');\n    }\n\n    return extensionContext;\n};\n","import React from \"react\";\n\nconst GiftOptions = (props: any) => {\n    const { className } = props\n    return(\n        <div className={className}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default GiftOptions","import React from \"react\";\nimport IconContainer from \"../IconContainer\";\nimport ExpandCircleDownRoundedIcon from '@mui/icons-material/ExpandCircleDownRounded';\nimport GiftMessageIcon from \"../CustomIcon\";\n\nconst GiftMessageCollapsed = (props: any) => {\n    const { giftMessageLength } = props\n    return(\n        <div className=\"toggle-content-container\">\n            { giftMessageLength > 0 ? <p>Gift Message Included</p> : <p>Add a Gift Message!</p> }\n                <IconContainer className='icon-container-gift-header'>\n                    <GiftMessageIcon imageSource='https://res.cloudinary.com/garrett-brands/image/upload/v1662682064/Garrett-Website/2022/2-February/Promo%20Details/gift-icon-white-cropped.png' />\n                </IconContainer>\n                <IconContainer className='icon-container-expand'>\n                    <ExpandCircleDownRoundedIcon />\n                </IconContainer>\n        </div>\n    )\n}\n\nexport default GiftMessageCollapsed","import React from \"react\";\nimport IconContainer from \"../IconContainer\";\nimport ExpandCircleDownRoundedIcon from '@mui/icons-material/ExpandCircleDownRounded';\nimport DeleteForeverRoundedIcon from '@mui/icons-material/DeleteForeverRounded';\n\nconst GiftMessageExpanded = (props: any) => {\n    const { giftMessageLength, clearGiftMessage } = props\n    return(\n        <div className=\"toggle-content-container\">\n            { giftMessageLength > 0 ? <p>Gift Message Included</p> : <p>Add a Gift Message!</p> }\n            <p className=\"gift-message-length\">{giftMessageLength} / 350</p>\n            { giftMessageLength > 0 && \n            <IconContainer className='icon-container-delete' onClick={ clearGiftMessage }>\n                <DeleteForeverRoundedIcon />\n            </IconContainer>\n            }\n            <IconContainer className='icon-container-collapse'>\n                <ExpandCircleDownRoundedIcon />\n            </IconContainer>\n        </div>\n    )\n}\n\nexport default GiftMessageExpanded","import React, { useEffect, useState } from \"react\";\nimport GiftMessageCollapsed from \"./GiftMessageCollapsed\";\nimport GiftMessageExpanded from \"./GiftMessageExpanded\";\n\nconst GiftMessageToggle = (props: any) => {\n    const { giftMessageToggle, toggleGiftMessage, giftMessageLength, clearGiftMessage } = props\n    const [className, setClassName] = useState(String)\n\n    useEffect(() => {\n        setClassName(() => {\n            return giftMessageToggle\n            ? 'toggle-gift-message-collapse'\n            : 'toggle-gift-message-expand'\n        })\n    }, [giftMessageToggle])\n\n    return(\n        <div className={className} onClick={toggleGiftMessage}>\n            { giftMessageToggle \n            ? <GiftMessageExpanded \n                giftMessageLength={ giftMessageLength } \n                clearGiftMessage={ clearGiftMessage } />\n            : <GiftMessageCollapsed \n                giftMessageLength={ giftMessageLength } /> }\n        </div>\n    )\n}\n\nexport default GiftMessageToggle","// import React, { useState } from \"react\";\nimport React from \"react\";\nimport IconContainer from \"../IconContainer\";\nimport GiftMessageIcon from \"../CustomIcon\";\n\nconst GiftMessageForm = (props: any) => {\n    const { giftMessage, setGiftMessage } = props\n    // const [message, setMessage] = useState('');\n\n    const maxLength = 350\n    const maxRows = 10\n    const placeholder = \"Limited to 350 characters and 10 lines, please do not use emojis or special characters. Don't forget to sign your name!\"\n    \n    const renderGiftMessage = () => {\n        if (giftMessage.length > 0) {\n            return giftMessage\n        }\n    }\n\n    // TODO: Replace textarea's onChange with this function\n    // const validateAndSanitizeInput = (event) => {\n    //     const value = event.target.value.replace(/[^a-zA-Z0-9 .,!?]/g, '');\n    //     const lineCount = (value.match(/\\n/g) || []).length;\n    //     const isInsertingLineBreak = event.nativeEvent.inputType === 'insertLineBreak';\n    //     const isInsertingCharacter = event.nativeEvent.inputType !== 'deleteContentBackward';\n\n    //     if (lineCount >= maxRows && isInsertingLineBreak) {\n    //     setMessage('You have exceeded the maximum line limit.');\n    //     event.preventDefault();\n    //     return;\n    //     }\n\n    //     if (value.length >= maxLength && isInsertingCharacter) {\n    //     setMessage('You have reached the maximum character limit.');\n    //     event.preventDefault();\n\n    //     return;\n    //     }\n\n    //     setMessage('');\n    //     setGiftMessage(value);\n    // };\n    \n\n    return(\n        <>\n            <IconContainer className='icon-container-gift-form'>\n               <GiftMessageIcon imageSource='https://res.cloudinary.com/garrett-brands/image/upload/v1662682064/Garrett-Website/2022/2-February/Promo%20Details/gift-icon-gold-cropped.png' />\n            </IconContainer>\n            <textarea\n                className=\"gift-message-input\" \n                maxLength={maxLength} \n                rows={maxRows} \n                placeholder={placeholder} \n                onChange={event => setGiftMessage(event.target.value)}\n                defaultValue={renderGiftMessage()}>\n            </textarea>\n        </>\n    )\n}\n\nexport default GiftMessageForm","import React, { useEffect, useState } from \"react\";\nimport { Fieldset, Legend } from \"../../../ui/form\";\nimport GiftOptions from \"./GiftOptions\";\nimport GiftMessageToggle from \"./GiftMessageToggle\";\nimport GiftMessageForm from \"./GiftMessageForm\";\n\nconst GiftMessage = (props: any) => {\n\n    const {\n        consignments, \n        giftMessage, \n        setGiftMessage,\n        isActiveCart\n     } = props\n\n    const customFields = consignments[0]?.shippingAddress.customFields.length > 0\n    const [giftMessageToggle, setGiftMessageToggle] = useState(false)\n\n    useEffect(() => {\n        var savedGiftMessage\n        if (customFields && isActiveCart) {\n            // Development Custom Field\n            // savedGiftMessage = consignments[0].shippingAddress.customFields.find((customField: { fieldId: string, fieldValue: string }) => customField.fieldId === 'field_32')\n            // Production Custom Field\n            savedGiftMessage = consignments[0].shippingAddress.customFields.find((customField: { fieldId: string, fieldValue: string }) => customField.fieldId === 'field_45')\n            savedGiftMessage = savedGiftMessage.fieldValue\n            setGiftMessage(savedGiftMessage)\n            setGiftMessageToggle(savedGiftMessage.length > 0)\n        }\n    }, [])\n\n    const handleToggle = () => {\n        setGiftMessageToggle(!giftMessageToggle)\n    }\n\n    const handleClear = () => {\n        setGiftMessage('')\n        setGiftMessageToggle(true)\n    }\n\n    return(\n        <Fieldset id='gift-message'>\n            <Legend testId=\"gift-message-form-heading\"><span>Gift Options</span></Legend>\n            <GiftOptions className='gift-options-container'>\n                <GiftMessageToggle \n                    toggleGiftMessage={ handleToggle } \n                    giftMessageToggle={ giftMessageToggle }\n                    giftMessageLength={ giftMessage.length }\n                    clearGiftMessage={ handleClear } />\n\n                { giftMessageToggle && \n                <GiftMessageForm \n                    setGiftMessage={ setGiftMessage }\n                    giftMessage={ giftMessage } /> }\n            </GiftOptions>\n        </Fieldset>\n    )\n}\n\nexport default GiftMessage","import React from \"react\";\nimport { Fieldset, Legend } from \"../../../ui/form\";\nimport GiftOptions from \"./GiftOptions\";\nimport AddGiftMessage from \"./GiftMessageCollapsed\";\n\nconst GiftMessageDisabled = () => {\n    return(\n        <Fieldset id='gift-message'>\n            <Legend testId=\"gift-message-form-heading\"><span>Gift Options</span></Legend>\n            <GiftOptions>\n                <div className='toggle-gift-message-expand-disabled'>\n                    <AddGiftMessage />\n                </div>\n            </GiftOptions>\n        </Fieldset>\n    )\n}\n\nexport default GiftMessageDisabled","import React from \"react\";\n\nconst GiftMessageDestination = (props: any) => {\n    const { shippingAddress } = props\n    \n    const renderRecipient = () =>{\n        if (shippingAddress.firstName && shippingAddress.lastName) {\n            return <p className=\"gift-message-recipient\">{shippingAddress.firstName} {shippingAddress.lastName}</p>\n        }\n    }\n\n    const renderShippingAddress = () => {\n        if (shippingAddress) {\n            return <p className=\"gift-message-address\">{shippingAddress.address1} {shippingAddress.address2} {shippingAddress.city}, {shippingAddress.stateOrProvinceCode} {shippingAddress.countryCode} {shippingAddress.postalCode}</p>\n        }\n    }\n\n    const renderRecipientCompany = () => {\n        if (shippingAddress.company) {\n            return <p className=\"gift-message-recipient-company\">{shippingAddress.company}</p>\n        }\n    }\n    \n    return(\n        <div className=\"gift-message-destination-container\">\n            {renderRecipient()}\n            {renderRecipientCompany()}\n            {renderShippingAddress()}\n        </div>\n    )\n}\n\nexport default GiftMessageDestination","import React, { useEffect, useState } from \"react\";\n// import { Fieldset, Legend } from \"../../../ui/form\";\nimport GiftOptions from \"./GiftOptions\";\nimport GiftMessageToggle from \"./GiftMessageToggle\";\nimport GiftMessageForm from \"./GiftMessageForm\";\nimport GiftMessageDestination from \"./GiftMessageDestination\";\n\nconst GiftMessageMulti = (props: any) => {\n\n    const {\n        consignment,\n        giftMessages,\n        setGiftMessages,\n        isActiveCart\n     } = props\n\n    const [giftMessageToggle, setGiftMessageToggle] = useState(false)\n    const [giftMessage, setGiftMessage] = useState('')\n\n    useEffect(() => {\n        giftMessages.map((item: any) => {\n            if (item.consignmentId === consignment.id && isActiveCart) {\n                setGiftMessage(item.giftMessage)\n                setGiftMessageToggle(item.giftMessage.length > 0)\n            }\n        })\n    }, [])\n\n    useEffect(() => {\n        setGiftMessages({\n            consignmentId: consignment.id,\n            giftMessage: giftMessage\n        })\n    }, [giftMessage])\n\n    const handleToggle = () => {\n        setGiftMessageToggle(!giftMessageToggle)\n    }\n\n    const handleClear = () => {\n        setGiftMessage('')\n        setGiftMessageToggle(true)\n    }\n\n    return(\n        <GiftOptions className='gift-options-multi-container'>\n            <GiftMessageDestination shippingAddress={ consignment.shippingAddress } />\n            <GiftMessageToggle \n                toggleGiftMessage={ handleToggle }\n                giftMessageToggle={ giftMessageToggle }\n                giftMessageLength={ giftMessage.length }\n                clearGiftMessage={ handleClear } />\n            { giftMessageToggle &&\n            <GiftMessageForm\n                setGiftMessage={ setGiftMessage }\n                giftMessage={ giftMessage } /> }\n        </GiftOptions>\n    )\n}\n\nexport default GiftMessageMulti","import React from \"react\";\n\nfunction DatesSummary(props: any) {\n    return(\n        <div className=\"dates-summary-container\">{props.children}</div>\n    )\n}\n\nexport default DatesSummary","import React from \"react\";\nimport CustomIcon from \"../CustomIcon\";\nimport IconContainer from \"../IconContainer\";\n\nconst ShippingBanner = (props: any) => {\n    const { mainMessage, mainMessageIcon, secondMessage, secondMessageIcon, className, listItems } = props\n\n    const renderIcon = (source: String) => {\n        return(\n            <IconContainer className='banner-icon-container'>\n                <CustomIcon imageSource={source} />\n            </IconContainer>\n        )\n    }\n\n    const IconsContainer =  () => {\n        return (\n            <div className=\"banner-icons-container\">\n                { mainMessageIcon && renderIcon(mainMessageIcon) }\n                { secondMessageIcon && renderIcon(secondMessageIcon) }\n            </div>\n        )\n    }\n\n    const ListItem = (item: { message: string}) => {\n        return (\n            <p className=\"banner-second-message\">{ item.message }</p>\n        )\n    }\n\n    const MessageContainer = () => {\n        return (\n            <div className=\"banner-message-container\">\n                { mainMessage && <p className=\"banner-main-message\">{ mainMessage }</p> }\n                { secondMessage && <p className=\"banner-second-message\">{ secondMessage }</p> }\n                { listItems && listItems.length > 0 && listItems.map((item: any, index: number) => <ListItem key={index} {...item} /> ) }\n            </div>\n        )\n    }\n\n    return(\n        <div className={className}>\n            { mainMessageIcon && <IconsContainer /> }\n            { mainMessage && <MessageContainer /> }\n        </div>\n    )\n}\n\nexport default ShippingBanner","import React from \"react\"\n\nfunction ShippingCalendar(props: any) {\n    const className = () => {\n        return props.disabled\n        ? 'shipping-calendar-container-disabled'\n        : 'shipping-calendar-container'\n    }\n    return(\n        <div className={className()}>{props.children}</div>\n    )\n}\n\nexport default ShippingCalendar","import React from \"react\";\n\nfunction ShippingInfo(props: any) {\n    return(\n        <div className=\"shipping-info-container\">{props.children}</div>\n    )\n}\n\nexport default ShippingInfo","import React from \"react\";\nimport CookAndShipIcon from \"../CustomIcon\";\nimport EstimatedArrivalIcon from \"../CustomIcon\";\nimport IconContainer from \"../IconContainer\";\n\nconst ShippingInfoBanner = (props: any) => {\n    const { mainMessage, secondMessage } = props\n    return(\n        <div className=\"shipping-info-banner\">\n            <div className=\"banner-icons-container\">\n                    <IconContainer className='banner-icon-container'>\n                        <CookAndShipIcon imageSource='https://res.cloudinary.com/garrett-brands/image/upload/v1665017783/Garrett-Website/2022/9-September/Checkout%20Icons/cook-date.svg' />\n                    </IconContainer>\n                    <IconContainer className='banner-icon-container'>\n                        <EstimatedArrivalIcon imageSource='https://res.cloudinary.com/garrett-brands/image/upload/v1663968753/Garrett-Website/2022/9-September/Checkout%20Icons/arrival-estimate.svg' />\n                    </IconContainer>\n                </div>\n            <div className=\"banner-message-container\">\n                <p className=\"banner-main-message\">{ mainMessage }</p>\n                <p className=\"banner-second-message\">{ secondMessage }</p>\n            </div>\n        </div>\n    )\n}\n\nexport default ShippingInfoBanner","// @ts-nocheck\nimport React, { useEffect, useState } from \"react\";\nimport DatePicker from 'react-datepicker'\n\nimport { Fieldset, Legend } from \"../../../ui/form\";\n\nimport ArrivalDate from \"./ArrivalDate\";\nimport DatesSummary from \"./DatesSummary\";\nimport SelectedShipDate from \"./SelectedShipDate\";\nimport ShippingBanner from \"./ShippingBanner\";\nimport ShippingCalendar from \"./ShippingCalendar\";\nimport ShippingInfo from \"./ShippingInfo\";\nimport ShippingInfoBanner from \"./ShippingInfoBanner\";\n\nconst ShipDate = (props: any) => {\n    \n    const {\n        cart,\n        isMultiShippingMode,\n        consignments, \n        shipDate, \n        setShipDate, \n        arrivalDate, \n        setArrivalDate,\n        isActiveCart,\n        // setUnavailableItems,\n        itemsUnavailableToShip,\n        setItemsUnavailableToShip,\n    } = props\n\n    const today = new Date()\n    const todayReset = today.setHours(0,0,0,0)\n    const advanceShippingMessage = \"Ordering to enjoy at a later date? Schedule your shipping date up to 15 days in advance. Available on select items.\"\n    const shipDateMessage = 'Cook and ship date is when your order is cooked, it leaves our kitchen on the same day.'\n    const arrivalDateMessage = 'Estimated arrival date depends on the ship date and UPS shipping method chosen.'\n    const arrivalDateMessageMulti = 'Arrival date depends on the ship date, destination, and UPS shipping method chosen.'\n    const customFields = consignments[0]?.shippingAddress.customFields.length > 0\n    \n    const [address, setAddress] = useState(Object)\n    const [selectedShippingOption, setSelectedShippingOption] = useState(Object)\n    const [availableDates, setAvailableDates] = useState([])\n    const [blackoutDates, setBlackoutDates] = useState([])\n    const [promotionalItems, setPromotionalItems] = useState([])\n    const [nextAvailableDate, setNextAvailableDate] = useState(today)\n    // const [inventoryData, setInventoryData] = useState([])\n\n    useEffect(() => {\n        fetchBlackoutDates()\n        fetchShipByDates()\n        // fetchInventoryData()\n    }, [])\n\n    useEffect(() => {\n        if (Object.keys(address).length > 0 && selectedShippingOption && !isMultiShippingMode) {\n            fetchUPSEstimate()\n        }\n    }, [shipDate, address, selectedShippingOption, isMultiShippingMode])\n\n    useEffect(() => {\n        setAvailableDates(getAvailableDates(today, maxDate()))\n    }, [blackoutDates])\n\n    useEffect(() => {\n        if (availableDates.length > 0) {\n            setNextAvailableDate(availableDates[0])\n        }\n    }, [availableDates])\n    \n    useEffect(() => {\n        const currentShipDate = shipDate\n        let savedShipDate\n\n        if (customFields && isActiveCart) {\n            // Development Custom Field\n            // savedShipDate = consignments[0].shippingAddress.customFields.find((customField: { fieldId: string; }) => customField.fieldId === 'field_30')\n            // Production Custom Field\n            savedShipDate = consignments[0].shippingAddress.customFields.find((customField: { fieldId: string; }) => customField.fieldId === 'field_43')\n            savedShipDate = new Date(savedShipDate.fieldValue)\n        }\n\n        savedShipDate && isAfterNextAvailable(savedShipDate) && filterDates(savedShipDate) \n        ? setShipDate(savedShipDate)\n        : ( filterDates(currentShipDate)\n        ? setShipDate(currentShipDate)\n        : setShipDate(nextAvailableDate) )\n    }, [nextAvailableDate])\n\n    useEffect(() => {\n        if (props.consignments[0]) {\n            const { address, selectedShippingOption } = props.consignments[0]\n\n            setAddress(address)\n            setSelectedShippingOption(selectedShippingOption)\n        }\n    }, [props])\n\n    useEffect(() => {\n        const itemsUnavailableToShip = []\n\n        if (promotionalItems.length > 0) {\n            promotionalItems.map(item => {\n                if (endsAfterShipDate(shipDate, item)) {\n                    itemsUnavailableToShip.push(item)\n                }\n            })\n            setItemsUnavailableToShip(itemsUnavailableToShip)\n        }\n    }, [shipDate, promotionalItems])\n\n    useEffect(() => {\n        window.scroll(0, 0)\n\n        const calendarDays: NodeListOf<HTMLDivElement> | null = document.querySelectorAll('.react-datepicker__day')\n\n        if (calendarDays instanceof NodeList) {\n            calendarDays.forEach(day => day.removeAttribute('tabIndex'))\n        }\n    }, [])\n\n    // useEffect(() => {\n    //     const unavailableItems = []\n\n    //     inventoryData.map(item => {\n    //         if (item.quantity > item.qty_available || item.status === 'OOS') {\n    //             unavailableItems.push(item)\n    //         }\n    //     })\n\n    //     if (unavailableItems.length > 0) {\n    //         setUnavailableItems(unavailableItems)\n    //     }\n    // }, [inventoryData.length > 0])\n\n    const getAvailableDates = (start: Date, end: Date) => {\n        const dates = []\n        const date = new Date(start);\n\n        while (date <= end) {\n            if (filterDates(date)) {\n                dates.push(new Date(date))\n            }\n\n            date.setDate(date.getDate() + 1)\n        }\n\n        return dates\n    }\n\n    const filterDates = (date: Date) => {\n        return !isToday(date) && isWeekday(date) && !isBlackoutDate(date) ||\n        !isToday(date) && isAvailableWeekendDate(date) && !isBlackoutDate(date)\n    }\n\n    const isAvailableWeekendDate = (date: Date) => {\n        const availableWeekendDates = [\"2022-12-10\", \"2022-12-11\", \"2022-12-17\", \"2022-12-18\"]\n        const year = date.getFullYear()\n        const month = String(date.getMonth() + 1).padStart(2, '0')\n        const day = String(date.getDate()).padStart(2, '0')\n        const formattedDate = [year, month, day].join('-')\n\n        return availableWeekendDates.includes(formattedDate)\n    }\n\n    const isAfterNextAvailable = (date: Date) => {\n        return date.getTime() > nextAvailableDate.getTime()\n    }\n\n    const isToday = (date: Date) => {\n        return date.getTime() === today.getTime()\n    }\n\n    const isWeekday = (date: Date) => {\n        const day = date.getDay()\n\n        return day !== 0 && day !== 6;\n    }\n\n    const isBlackoutDate = (date: Date) => {\n        const year = date.getFullYear()\n        const month = String(date.getMonth() + 1).padStart(2, '0')\n        const day = String(date.getDate()).padStart(2, '0')\n        const formattedDate = [year, month, day].join('-')\n\n        return blackoutDates.includes(formattedDate)\n    }\n\n    const endsAfterShipDate = (date: Date, item: { mustShipDate: string }) => {\n        let isAfter = false\n            const shipByDate = item.mustShipDate\n            const [day, month, year] = shipByDate.split('-')\n            const formattedDate = new Date([month, day, year].join('/'))\n\n            if (date.getTime() > formattedDate.getTime()) {\n                isAfter = true\n            }\n\n        return isAfter\n    }\n\n    const maxDate = () => {\n        const maxDate = new Date(todayReset)\n\n        maxDate.setDate(maxDate.getDate() + 15)\n\n        return maxDate\n    }\n\n    const fetchUPSEstimate = () => {\n\n        const year = shipDate.getFullYear()\n        const month = String(shipDate.getMonth() + 1).padStart(2, '0')\n        const date = String(shipDate.getDate()).padStart(2, '0')\n        const formattedDate = [year, month, date].join('')\n\n        const body = {\n            \"to\": {\n                \"city\": address.city,\n                \"state\": address.stateOrProvince,\n                \"postal_code\": address.postalCode,\n                \"country\": address.country\n            },\n            \"pickup_date\": formattedDate,\n            \"shipping_method\": selectedShippingOption.description\n        }\n        \n        const reqObj = {\n            method: 'POST',\n            headers: {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\",\n              \"x-access-key\": \"XM9xCpdv7TC1ZrzZ3ZeNYKUoCK1GHbZw\"\n            },\n            body: JSON.stringify(body)\n          }\n\n        fetch(`https://api.gbdev.cloud/v1/shipping/expected-date`, reqObj)\n        .then(resp => resp.json())\n        .then(estimate => {\n            const estimatedArrival = new Date(estimate.data.EstimatedArrival.Date.replaceAll('-', '/'))\n\n            setArrivalDate(estimatedArrival)\n        })\n        .catch(error => {\n            console.log('UPS ESTIMATED ARRIVAL ERROR =>', error)\n        })\n\n    }\n\n    const fetchBlackoutDates = () => {\n\n        const year = today.getFullYear()\n        const month = String(today.getMonth() + 1).padStart(2, '0')\n        const date = String(today.getDate()).padStart(2, '0')\n        const formattedDate = [date, month, year].join('-')\n\n        fetch(`https://api.gbdev.cloud/v1/ship-dates/blackout-dates?afterDate=${formattedDate}`, {\n            method: 'GET',\n            headers: {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\",\n              \"x-access-key\": \"XM9xCpdv7TC1ZrzZ3ZeNYKUoCK1GHbZw\"\n            }\n        })\n        .then(resp => resp.json())\n        .then(({results}) => {\n            const dates = results.map((result: any) => result.blackoutDate.split('-'))\n            const formattedDates = dates.map((date: string) => [date[2], date[1], date[0]].join('-'))\n\n            setBlackoutDates(formattedDates)\n        })\n        .catch(error => {\n            console.log('BLACKOUT DATES ERROR =>', error)\n        })\n    }\n\n    const fetchShipByDates = () => {\n\n        fetch(`https://api.gbdev.cloud/v1/ship-dates/must-ship-dates/`, {\n            method: 'GET',\n            headers: {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\",\n              \"x-access-key\": \"XM9xCpdv7TC1ZrzZ3ZeNYKUoCK1GHbZw\"\n            }\n        })\n        .then(resp => resp.json())\n        .then(({results}) => {\n            const productIds = []\n            const productSKUs = []\n            const promotionalItems = []\n\n            cart.lineItems.physicalItems.map((item: { productId: number, sku: string }) => {\n                productIds.push(item.productId.toString())\n                productSKUs.push(item.sku)\n            })\n            results.map((item: { productSKU: string, productName: string, mustShipDate: string }) => {\n                if (productIds.includes(item.productSKU) || productSKUs.includes(item.productSKU)) {\n                    promotionalItems.push(item)\n                }\n            } )\n            setPromotionalItems(promotionalItems)\n        })\n        .catch(error => {\n            console.log('SHIP BY DATES ERROR =>', error)\n        })\n    }\n\n    // const fetchInventoryData = () => {\n    //     const skus = []\n\n    //     cart.lineItems.physicalItems.map((item: {sku: string, quantity: string, name: string, options: Object}) => {\n    //         skus.push({\n    //             'sku': item.sku, \n    //             'quantity': item.quantity,\n    //             'name': item.name,\n    //             'options': item.options\n    //         })\n    //     })\n\n    //     const body = {\n    //         \"inventoryList\": skus\n    //     }\n\n    //     const reqObj = {\n    //         method: 'POST',\n    //         headers: {\n    //           \"Content-Type\": \"application/json\",\n    //           \"Accept\": \"application/json\",\n    //           \"x-access-key\": \"XM9xCpdv7TC1ZrzZ3ZeNYKUoCK1GHbZw\"\n    //         },\n    //         body: JSON.stringify(body)\n    //       }\n\n    //     fetch(`https://api.gbdev.cloud/v1/client/inventory/check-quantities`, reqObj)\n    //     .then(resp => resp.json())\n    //     .then(({data}) => {\n    //         data.map((item: {qty_available: number, status: string, variant_sku: string}) => {\n    //             skus.find(sku => {\n    //                 if (sku.sku === item.variant_sku) {\n    //                     sku.qty_available = item.qty_available\n    //                     sku.status = item.status\n    //                 }\n    //             })\n    //         })\n    //         setInventoryData(skus)\n    //     })\n    //     .catch(error => {\n    //         console.log('INVENTORY REQUEST ERROR =>', error)\n    //     })\n    // }\n    \n    const renderUnavailableToShipMessage = (type: string) => {\n        const products = []\n\n        itemsUnavailableToShip.map((item: { productName: string, mustShipDate: any }) => {\n            const shipByDate = item.mustShipDate\n            const [day, month, year] = shipByDate.split('-')\n            const formattedShipDate = new Date([month, day, year].join('/')).toLocaleDateString('en-us', { weekday:\"short\", month:\"short\", day:\"numeric\"})\n            const productDetails = { message: `${item.productName} must ship by ${formattedShipDate}` }\n\n            products.push(productDetails)\n        })\n\n        const message = [`Selected Cook and Ship date (${shipDate.toLocaleDateString('en-us', { weekday:\"short\", month:\"short\", day:\"numeric\"})}) is not available for ${products.length} ${products.length > 1 ? 'promotional or seasonal items in your cart.': 'promotional or seasonal item in your cart.' } Please select an earlier date or choose a different item.`]\n\n        return type === 'main'\n        ? message\n        : products\n    }\n\n    const highlightDates = () => {\n        if (!isMultiShippingMode) {\n            return [arrivalDate]\n        }\n        \n            return []\n        \n    }\n\n    return(\n        <Fieldset id='ship-date'>\n            <Legend testId=\"ship-date-form-heading\">Cooking and Shipping Date</Legend>\n                    <ShippingBanner\n                        className='advance-shipping-banner'\n                        mainMessage={advanceShippingMessage} \n                    />\n                <ShippingCalendar>\n                        <DatePicker \n                            calendarClassName=\"ship-date-calendar\"\n                            filterDate={filterDates}\n                            highlightDates={highlightDates()}\n                            inline\n                            maxDate={maxDate()}\n                            minDate={today}\n                            onChange={(date:Date) => setShipDate(date)}\n                            selected={shipDate} \n                        />\n                </ShippingCalendar>\n                    { itemsUnavailableToShip.length > 0 &&\n                        <ShippingBanner\n                            className='unavailable-date-alert-banner'\n                            listItems={renderUnavailableToShipMessage('second')}\n                            mainMessage={renderUnavailableToShipMessage('main')}/>\n                    }\n            { itemsUnavailableToShip.length === 0 &&\n                <ShippingInfo>\n                    <DatesSummary>\n                        <SelectedShipDate shipDate={shipDate} />\n                        { !isMultiShippingMode && <ArrivalDate arrivalDate={arrivalDate} /> }\n                    </DatesSummary>\n                        <ShippingInfoBanner\n                            mainMessage={shipDateMessage}\n                            secondMessage={ isMultiShippingMode ? arrivalDateMessageMulti : arrivalDateMessage}\n                        />\n                </ShippingInfo>\n            }\n        </Fieldset>\n    )\n}\n\nexport default ShipDate","import React from \"react\";\nimport { Fieldset, Legend } from \"../../../ui/form\";\nimport ShippingCalendar from \"./ShippingCalendar\";\nimport DatePicker from 'react-datepicker'\nimport ShippingBanner from \"./ShippingBanner\";\n\nconst ShipDateDisabled = () => {\n    const bannerMessage = 'Please enter a valid shipping address and phone number in order to select a ship date.'\n    return(\n        <Fieldset id='ship-date'>\n            <Legend testId=\"ship-date-form-heading\">Cooking and Shipping Date</Legend>\n                <ShippingBanner bannerMessage={bannerMessage} />\n                <ShippingCalendar disabled={true}>\n                        <DatePicker \n                            calendarClassName=\"ship-date-calendar\"\n                            onChange={() => alert(bannerMessage)}\n                            filterDate={() => false}\n                            minDate={new Date()}\n                            maxDate={new Date()}\n                            inline />\n                </ShippingCalendar>\n        </Fieldset>\n    )\n}\n\nexport default ShipDateDisabled","import { ShippingOption } from '@bigcommerce/checkout-sdk';\n\nexport default function getRecommendedShippingOption(\n    availableShippingOptions: ShippingOption[],\n): ShippingOption | undefined {\n    if (!availableShippingOptions) {\n        return;\n    }\n\n    return availableShippingOptions.find(\n        ({ isRecommended }: { isRecommended: any }) => isRecommended,\n    );\n}\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { EMPTY_ARRAY } from '../../common/utility';\nimport { Checklist, ChecklistItem } from '../../ui/form';\nimport { LoadingOverlay } from '../../ui/loading';\n\nimport StaticShippingOption from './StaticShippingOption';\n\ninterface ShippingOptionListItemProps {\n    consignmentId: string;\n    shippingOption: ShippingOption;\n}\n\nconst ShippingOptionListItem: FunctionComponent<ShippingOptionListItemProps> = ({\n    consignmentId,\n    shippingOption,\n}) => {\n    const renderLabel = useCallback(\n        () => (\n            <div className=\"shippingOptionLabel\">\n                <StaticShippingOption displayAdditionalInformation={true} method={shippingOption} />\n            </div>\n        ),\n        [shippingOption],\n    );\n\n    return (\n        <ChecklistItem\n            htmlId={`shippingOptionRadio-${consignmentId}-${shippingOption.id}`}\n            label={renderLabel}\n            value={shippingOption.id}\n        />\n    );\n};\n\nexport interface ShippingOptionListProps {\n    consignmentId: string;\n    inputName: string;\n    isLoading: boolean;\n    selectedShippingOptionId?: string;\n    shippingOptions?: ShippingOption[];\n    onSelectedOption(consignmentId: string, shippingOptionId: string): void;\n}\n\nconst ShippingOptionsList: FunctionComponent<ShippingOptionListProps> = ({\n    consignmentId,\n    inputName,\n    isLoading,\n    shippingOptions = EMPTY_ARRAY,\n    selectedShippingOptionId,\n    onSelectedOption,\n}) => {\n    const handleSelect = useCallback(\n        (value: string) => {\n            onSelectedOption(consignmentId, value);\n        },\n        [consignmentId, onSelectedOption],\n    );\n\n    if (!shippingOptions.length) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay isLoading={isLoading}>\n            <Checklist\n                aria-live=\"polite\"\n                defaultSelectedItemId={selectedShippingOptionId}\n                name={inputName}\n                onSelect={handleSelect}\n            >\n                {shippingOptions.map((shippingOption) => (\n                    <ShippingOptionListItem\n                        consignmentId={consignmentId}\n                        key={shippingOption.id}\n                        shippingOption={shippingOption}\n                    />\n                ))}\n            </Checklist>\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(ShippingOptionsList);\n","import { CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { AnalyticsContextProps } from '@bigcommerce/checkout/analytics';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { ChecklistSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { StaticAddress } from '../../address';\nimport { withAnalytics } from '../../analytics';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport StaticConsignmentItemList from '../StaticConsignmentItemList';\n\nimport { ShippingOptionsProps, WithCheckoutShippingOptionsProps } from './ShippingOptions';\nimport './ShippingOptionsForm.scss';\nimport ShippingOptionsList from './ShippingOptionsList';\n\nexport type ShippingOptionsFormProps = ShippingOptionsProps & WithCheckoutShippingOptionsProps & AnalyticsContextProps;\n\nclass ShippingOptionsForm extends PureComponent<\n    ShippingOptionsFormProps & FormikProps<ShippingOptionsFormValues>\n> {\n    private unsubscribe?: () => void;\n\n    componentDidMount(): void {\n        const { subscribeToConsignments } = this.props;\n\n        this.unsubscribe = subscribeToConsignments(this.selectDefaultShippingOptions);\n    }\n\n    componentDidUpdate(): void {\n        const {\n            analyticsTracker,\n            consignments,\n            shouldShowShippingOptions\n        } = this.props;\n\n        if (consignments?.length && shouldShowShippingOptions) {\n            analyticsTracker.showShippingMethods();\n        }\n    }\n\n    componentWillUnmount(): void {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n            this.unsubscribe = undefined;\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            consignments,\n            isMultiShippingMode,\n            selectShippingOption,\n            isLoading,\n            shouldShowShippingOptions,\n            invalidShippingMessage,\n            methodId\n        } = this.props;\n\n        if (!consignments?.length || !shouldShowShippingOptions) {\n            return (\n                <ChecklistSkeleton\n                    additionalClassName=\"shippingOptions-skeleton\"\n                    isLoading={isLoading()}\n                    rows={2}\n                >\n                    {this.renderNoShippingOptions(\n                        <TranslatedString\n                            id={\n                                methodId || isMultiShippingMode\n                                    ? 'shipping.select_shipping_address_text'\n                                    : 'shipping.enter_shipping_address_text'\n                            }\n                        />,\n                    )}\n                </ChecklistSkeleton>\n            );\n        }\n\n        return (\n            <>\n                {consignments.map((consignment) => (\n                    <div className=\"shippingOptions-container form-fieldset\" key={consignment.id}>\n                        {isMultiShippingMode && this.renderConsignment(consignment)}\n\n                        <ShippingOptionsList\n                            consignmentId={consignment.id}\n                            inputName={getRadioInputName(consignment.id)}\n                            isLoading={isLoading(consignment.id)}\n                            onSelectedOption={selectShippingOption}\n                            selectedShippingOptionId={\n                                consignment.selectedShippingOption &&\n                                consignment.selectedShippingOption.id\n                            }\n                            shippingOptions={consignment.availableShippingOptions}\n                        />\n\n                        {(!consignment.availableShippingOptions ||\n                            !consignment.availableShippingOptions.length) && (\n                            <ChecklistSkeleton\n                                additionalClassName=\"shippingOptions-skeleton\"\n                                isLoading={isLoading(consignment.id)}\n                                rows={2}\n                            >\n                                {this.renderNoShippingOptions(invalidShippingMessage)}\n                            </ChecklistSkeleton>\n                        )}\n                    </div>\n                ))}\n            </>\n        );\n    }\n\n    private selectDefaultShippingOptions: (state: CheckoutSelectors) => void = async ({ data }) => {\n        const { selectShippingOption, setFieldValue } = this.props;\n\n        const consignment = (data.getConsignments() || []).find(\n            ({ selectedShippingOption, availableShippingOptions: shippingOptions }) =>\n                !selectedShippingOption && shippingOptions,\n        );\n\n        if (!consignment || !consignment.availableShippingOptions) {\n            return;\n        }\n\n        const { availableShippingOptions, id } = consignment;\n        const recommendedOption = getRecommendedShippingOption(availableShippingOptions);\n        const singleShippingOption =\n            availableShippingOptions.length === 1 && availableShippingOptions[0];\n        const defaultShippingOption = recommendedOption || singleShippingOption;\n\n        if (!defaultShippingOption) {\n            return;\n        }\n\n        await selectShippingOption(id, defaultShippingOption.id);\n        setFieldValue(`shippingOptionIds.${id}`, defaultShippingOption.id);\n    };\n\n    private renderNoShippingOptions(message: ReactNode): ReactNode {\n        return (\n            <div className=\"shippingOptions-panel optimizedCheckout-overlay\">\n                <p\n                    aria-live=\"polite\"\n                    className=\"shippingOptions-panel-message optimizedCheckout-primaryContent\"\n                    role=\"alert\"\n                >\n                    {message}\n                </p>\n            </div>\n        );\n    }\n\n    private renderConsignment(consignment: Consignment): ReactNode {\n        const { cart } = this.props;\n\n        return (\n            <div className=\"staticConsignment\">\n                <strong>\n                    <TranslatedString id=\"shipping.shipping_address_heading\" />\n                </strong>\n\n                <StaticAddress address={consignment.shippingAddress} />\n\n                <StaticConsignmentItemList cart={cart} consignment={consignment} />\n            </div>\n        );\n    }\n}\n\nfunction getRadioInputName(consignmentId: string): string {\n    return `shippingOptionIds.${consignmentId}`;\n}\n\nexport interface ShippingOptionsFormValues {\n    shippingOptionIds: {\n        [shippingOptionIds: string]: string;\n    };\n}\n\nexport default withAnalytics(withFormik<ShippingOptionsFormProps, ShippingOptionsFormValues>({\n    handleSubmit: noop,\n    mapPropsToValues({ consignments }) {\n        const shippingOptionIds: { [id: string]: string } = {};\n\n        (consignments || []).forEach((consignment) => {\n            shippingOptionIds[consignment.id] = consignment.selectedShippingOption\n                ? consignment.selectedShippingOption.id\n                : '';\n        });\n\n        return { shippingOptionIds };\n    },\n})(ShippingOptionsForm));\n","import { Cart, CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { map, sortBy, uniq } from 'lodash';\nimport { createSelector } from 'reselect';\n\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\nimport getShippableLineItems from '../getShippableLineItems';\nimport getShippingMethodId from '../getShippingMethodId';\n\nimport ShippingOptionsForm from './ShippingOptionsForm';\n\nexport interface ShippingOptionsProps {\n    isMultiShippingMode: boolean;\n    isUpdatingAddress?: boolean;\n    shouldShowShippingOptions: boolean;\n}\n\nexport interface WithCheckoutShippingOptionsProps {\n    invalidShippingMessage: string;\n    methodId?: string;\n    consignments?: Consignment[];\n    cart: Cart;\n    isSelectingShippingOption(consignmentId?: string): boolean;\n    subscribeToConsignments(subscriber: (state: CheckoutSelectors) => void): () => void;\n    selectShippingOption(consignmentId: string, optionId: string): Promise<CheckoutSelectors>;\n    isLoading(consignmentId?: string): boolean;\n}\n\nconst subscribeToConsignmentsSelector = createSelector(\n    ({ checkoutService }: CheckoutContextProps) => checkoutService.subscribe,\n    (subscribe) => (subscriber: (state: CheckoutSelectors) => void) => {\n        return subscribe(subscriber, ({ data }) => data.getConsignments());\n    },\n);\n\nconst isLoadingSelector = createSelector(\n    (_: CheckoutSelectors, { isUpdatingAddress }: ShippingOptionsProps) => isUpdatingAddress,\n    ({ statuses }: CheckoutSelectors) => statuses.isLoadingShippingOptions,\n    ({ statuses }: CheckoutSelectors) => statuses.isSelectingShippingOption,\n    ({ statuses }: CheckoutSelectors) => statuses.isUpdatingConsignment,\n    ({ statuses }: CheckoutSelectors) => statuses.isCreatingConsignments,\n    (\n        isUpdatingAddress,\n        isLoadingShippingOptions,\n        isSelectingShippingOption,\n        isUpdatingConsignment,\n        isCreatingConsignments,\n    ) => {\n        return (consignmentId?: string) => {\n            return (\n                isUpdatingAddress ||\n                isLoadingShippingOptions() ||\n                isSelectingShippingOption(consignmentId) ||\n                isUpdatingConsignment(consignmentId) ||\n                isCreatingConsignments()\n            );\n        };\n    },\n);\n\nconst sortConsignments = (cart: Cart, unsortedConsignments: Consignment[]): Consignment[] => {\n    if (unsortedConsignments.length < 2) {\n        return unsortedConsignments;\n    }\n\n    const shippableItems = getShippableLineItems(cart, unsortedConsignments);\n    const consignmentsOrder = uniq(map(shippableItems, 'consignment.id'));\n\n    return sortBy(unsortedConsignments, (consignment) => consignmentsOrder.indexOf(consignment.id));\n};\n\nexport function mapToShippingOptions(\n    { checkoutService, checkoutState }: CheckoutContextProps,\n    props: ShippingOptionsProps,\n): WithCheckoutShippingOptionsProps | null {\n    const {\n        data: { getCart, getConsignments, getConfig, getCustomer, getCheckout },\n        statuses: { isSelectingShippingOption },\n    } = checkoutState;\n\n    const customer = getCustomer();\n    const cart = getCart();\n    const config = getConfig();\n    const checkout = getCheckout();\n\n    if (!config || !checkout || !customer || !cart) {\n        return null;\n    }\n\n    const consignments = sortConsignments(cart, getConsignments() || []);\n    const methodId = getShippingMethodId(checkout);\n    const { shippingQuoteFailedMessage } = config.checkoutSettings;\n\n    return {\n        cart,\n        consignments,\n        invalidShippingMessage: shippingQuoteFailedMessage,\n        isLoading: isLoadingSelector(checkoutState, props),\n        isSelectingShippingOption,\n        methodId,\n        selectShippingOption: checkoutService.selectConsignmentShippingOption,\n        subscribeToConsignments: subscribeToConsignmentsSelector({\n            checkoutService,\n            checkoutState,\n        }),\n    };\n}\n\nexport default withCheckout(mapToShippingOptions)(ShippingOptionsForm);\n","import { Cart, Consignment, ExtensionRegion } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useEffect, useState } from 'react';\n\nimport { ExtensionRegionContainer, useExtensions } from '@bigcommerce/checkout/checkout-extension';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { OrderComments } from '../orderComments';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Legend } from '../ui/form';\n\nimport GiftMessage from './customComponents/giftOptions/GiftMessage';\nimport GiftMessageDisabled from './customComponents/giftOptions/GiftMessageDisabled';\nimport GiftMessageMulti from './customComponents/giftOptions/GiftMessageMulti';\nimport ShipDate from './customComponents/shipDate/ShipDate';\nimport ShipDateDisabled from './customComponents/shipDate/ShipDateDisabled';\nimport ShippingBanner from './customComponents/shipDate/ShippingBanner';\nimport { ShippingOptions } from './shippingOption';\n// import ShippingAcknowledgment from './customComponents/shippingAcknowledgement/ShippingAcknowledgement';\n\nexport interface ShippingFormFooterProps {\n    readonly cart: Cart;\n    readonly cartHasChanged: boolean;\n    readonly isMultiShippingMode: boolean;\n    readonly shouldShowOrderComments: boolean;\n    readonly shouldShowShippingOptions?: boolean;\n    readonly shouldDisableSubmit: boolean;\n    readonly isLoading: boolean;\n    readonly shipDate: Date;\n    readonly setShipDate: Function;\n    readonly arrivalDate: Date;\n    readonly setArrivalDate: Function;\n    readonly giftMessage: string;\n    readonly setGiftMessage: Function;\n    readonly giftMessages: any[];\n    readonly setGiftMessages: Function;\n    readonly consignments: Consignment[];\n}\n\nconst ShippingFormFooter: FunctionComponent<ShippingFormFooterProps> = ({\n    cartHasChanged,\n    isMultiShippingMode,\n    shouldShowOrderComments,\n    shouldShowShippingOptions = true,\n    shouldDisableSubmit,\n    isLoading,\n    cart,\n    shipDate,\n    setShipDate,\n    arrivalDate,\n    setArrivalDate,\n    giftMessage,\n    setGiftMessage,\n    giftMessages,\n    setGiftMessages,\n    consignments,\n}) => {\n    const { extensionService, isExtensionEnabled } = useExtensions();\n    const isExtensionRegionEnabled = Boolean(\n        isExtensionEnabled() &&\n            extensionService.isRegionEnabled(ExtensionRegion.ShippingShippingAddressFormAfter),\n    );\n\n    const [unavailableItems, setUnavailableItems] = useState([]);\n    const [itemsUnavailableToShip, setItemsUnavailableToShip] = useState([]);\n    // const [shippingAcknowledged, setShippingAcknowledged] = useState(false);\n\n    // Code Prior to August 23 Merge\n\n    // interface ShippingFormFooterState {\n    //     unavailableItems: Array<any>;\n    //     itemsUnavailableToShip: Array<any>;\n    //     shippingAcknowledged: boolean;\n    // }\n\n    if (cart && consignments[0]) {\n        var isActiveCart\n        let savedCartID\n\n        // Development Custom Field\n        // savedCartID = consignments[0].shippingAddress.customFields.find((customField: { fieldId: string; }) => customField.fieldId === 'field_36')\n        // Production Custom Field\n        savedCartID = consignments[0].shippingAddress.customFields.find((customField: { fieldId: string; }) => customField.fieldId === 'field_49')\n        isActiveCart = cart.id === savedCartID?.fieldValue\n    }\n\n    useEffect(() => {\n        if (isExtensionRegionEnabled) {\n            void extensionService.renderExtension(\n                ExtensionRegionContainer.ShippingShippingAddressFormAfter,\n                ExtensionRegion.ShippingShippingAddressFormAfter,\n            );\n\n            return () => {\n                extensionService.removeListeners(ExtensionRegion.ShippingShippingAddressFormAfter);\n            };\n        }\n    }, [extensionService, isExtensionRegionEnabled]);\n\n    // const renderItemAvailabilityMessage = (type: string) => {\n    //     const message = ['no longer available. Please update your cart to complete checkout.']\n    //     const products = []\n\n    //     unavailableItems.map((item: { name: string, options: any }) => {\n    //         const options = []\n\n    //         if (item.options.length > 0) {\n    //             item.options.map((option: any) => options.push(option.value))\n    //         }\n\n    //         options.unshift(item.name)\n\n    //         const productDetails = { message: options.join(' - ') }\n\n    //         products.push(productDetails)\n    //     })\n    //     message.unshift(products.length > 1 ? ' products are ' : ' product is ')\n    //     message.unshift(products.length.toString())\n\n    //     return type === 'main'\n    //     ? message\n    //     : products\n    // }\n\n    // const includesFrangoItems = () => {\n    //     let includesFrangoItems = false\n\n    //     cart.lineItems.physicalItems.map(item => { if (item.categoryNames?.includes('Frango Chocolate')) includesFrangoItems = true })\n\n    //     return includesFrangoItems\n    // }\n\n    const shippingSurchargeMessage = 'UPS increased their shipping prices, resulting in a holiday surcharge per item.'\n    const surchargeIsActive = false\n        \n    // const shouldDisableContinue = () => {\n    //     // Disable shipping continue if there are unavailable items, items unavailable to ship, or Frango and fan hasn't acknowledged warm shipping.\n    //     return unavailableItems.length > 0 || itemsUnavailableToShip.length > 0 || ( includesFrangoItems() && shippingAcknowledged === false )\n    // };\n\n    const renderGiftMessageMulti = (consignment: Consignment, index: number) => {\n        if (cart && consignment) {\n            var isActiveCart\n            let savedCartID\n\n            // Development Custom Field\n            // savedCartID = consignment.shippingAddress.customFields.find((customField: { fieldId: string; }) => customField.fieldId === 'field_36')\n            // Production Custom Field\n            savedCartID = consignment.shippingAddress.customFields.find((customField: { fieldId: string; }) => customField.fieldId === 'field_49')\n            isActiveCart = cart.id === savedCartID?.fieldValue\n        }\n\n        return (\n            <GiftMessageMulti\n                consignment={ consignment }\n                giftMessages={ giftMessages }\n                isActiveCart={ isActiveCart }\n                key={index}\n                setGiftMessages={ setGiftMessages } />\n        )\n    }\n\n    return (\n        <>\n            {isExtensionRegionEnabled && (\n                <div id={ExtensionRegionContainer.ShippingShippingAddressFormAfter} />\n            )}\n            <Fieldset\n                id=\"checkout-shipping-options\"\n                legend={\n                    <>\n                        <Legend>\n                            <TranslatedString id=\"shipping.shipping_method_label\" />\n                        </Legend>\n\n                        {cartHasChanged && (\n                            <Alert type={AlertType.Error}>\n                                <strong>\n                                    <TranslatedString id=\"shipping.cart_change_error\" />\n                                </strong>\n                            </Alert>\n                        )}\n                    </>\n                }\n            >\n                { surchargeIsActive &&\n                    <ShippingBanner\n                        className='shipping-surcharge-banner'\n                        mainMessage='?'\n                        secondMessage={shippingSurchargeMessage}\n                    />\n                }\n                <ShippingOptions\n                    isMultiShippingMode={isMultiShippingMode}\n                    isUpdatingAddress={isLoading}\n                    shouldShowShippingOptions={shouldShowShippingOptions}\n                />\n                {/* Seasonal Frango Chocolate Shipping Acknowledgement */}\n                {/* { includesFrangoItems() && <ShippingAcknowledgment \n                                                setShippingAcknowledged={setShippingAcknowledged}\n                                                shippingAcknowledged={shippingAcknowledged} /> } */}\n                \n            </Fieldset>\n\n            { shouldShowShippingOptions\n            // { shouldShowShippingOptions && unavailableItems.length === 0\n            ?   <ShipDate\n                    arrivalDate={ arrivalDate }\n                    cart={ cart }\n                    consignments={ consignments }\n                    isActiveCart={ isActiveCart }\n                    isMultiShippingMode={ isMultiShippingMode }\n                    itemsUnavailableToShip={ itemsUnavailableToShip }\n                    setArrivalDate={ setArrivalDate }\n                    setItemsUnavailableToShip={ setItemsUnavailableToShip }\n                    setShipDate={ setShipDate }\n                    setUnavailableItems={ setUnavailableItems }\n                    shipDate={ shipDate }\n                    unavailableItems={ unavailableItems } /> \n            : <ShipDateDisabled /> }\n\n\n            {/* Optional Inventory Banner */}\n            {/* { unavailableItems.length > 0 &&\n                <ShippingBanner\n                    className='unavailable-items-alert-banner'\n                    listItems={renderItemAvailabilityMessage('second')}\n                    mainMessage={renderItemAvailabilityMessage('main')} />\n            } */}\n\n            { shouldShowShippingOptions \n            // && unavailableItems.length === 0\n            && itemsUnavailableToShip.length === 0\n            && !isMultiShippingMode\n            ?   <GiftMessage\n                    consignments={ consignments }\n                    giftMessage={ giftMessage }\n                    isActiveCart={ isActiveCart }\n                    setGiftMessage={ setGiftMessage } />\n            : ( isMultiShippingMode\n            ? <>\n                <Fieldset id='gift-message'>\n                    <Legend testId=\"gift-message-form-heading\"><span>Gift Options</span></Legend>\n                </Fieldset>\n                    {consignments.map((consignment, index) => renderGiftMessageMulti(consignment, index))}\n              </>\n            : <GiftMessageDisabled /> ) }\n\n            {shouldShowOrderComments && <OrderComments />}\n\n            <div className=\"form-actions\">\n                <Button\n                    // disabled={ shouldDisableSubmit || unavailableItems.length > 0 || itemsUnavailableToShip.length > 0 || shouldDisableContinue() }\n                    disabled={ shouldDisableSubmit || itemsUnavailableToShip.length > 0 }\n                    id=\"checkout-shipping-continue\"\n                    isLoading={isLoading}\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"common.continue_action\" />\n                </Button>\n            </div>\n        </>\n    );\n};\n\n// Code Prior to August 23 Merge\n\n// private renderGiftMessageMulti(consignment: Consignment, index: number): ReactNode {\n//     const { \n//         cart,\n//         giftMessages,\n//         setGiftMessages\n//     } = this.props;\n\n//     if (cart && consignment) {\n//         var isActiveCart\n//         var savedCartID\n//         savedCartID = consignment.shippingAddress.customFields.find((customField: { fieldId: string; }) => customField.fieldId === 'field_36')\n//         isActiveCart = cart.id === savedCartID?.fieldValue\n//     }\n\n//     return (\n//         <GiftMessageMulti\n//             key={index}\n//             consignment={ consignment }\n//             isActiveCart={ isActiveCart }\n//             giftMessages={ giftMessages }\n//             setGiftMessages={ setGiftMessages } />\n//     );\n// }\n\nexport default ShippingFormFooter;\n","import {\n    Address,\n    AddressRequestBody,\n    Cart,\n    CheckoutSelectors,\n    CheckoutStoreSelector,\n    Consignment,\n    ConsignmentAssignmentRequestBody,\n    Country,\n    CustomerAddress,\n    FormField,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { TranslatedLink, TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport {\n    AddressFormModal,\n    AddressFormValues,\n    isValidAddress,\n    mapAddressFromFormValues,\n} from '../address';\nimport { preventDefault } from '../common/dom';\nimport { ErrorModal } from '../common/error';\nimport { Form } from '../ui/form';\n\nimport { AssignItemFailedError, AssignItemInvalidAddressError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippableLineItems from './getShippableLineItems';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport hasUnassignedLineItems from './hasUnassignedLineItems';\nimport ItemAddressSelect from './ItemAddressSelect';\nimport ShippableItem from './ShippableItem';\nimport ShippingFormFooter from './ShippingFormFooter';\nimport updateShippableItems from './updateShippableItems';\n\nexport interface MultiShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    customerMessage: string;\n    isGuest: boolean;\n    isLoading: boolean;\n    shouldShowOrderComments: boolean;\n    defaultCountryCode?: string;\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    shouldShowAddAddressInCheckout: boolean;\n    isFloatingLabelEnabled?: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    onCreateAccount(): void;\n    createCustomerAddress(address: AddressRequestBody): void;\n    onSignIn(): void;\n    getFields(countryCode?: string): FormField[];\n    onSubmit(values: MultiShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n    shipDate: Date;\n    setShipDate: Function;\n    arrivalDate: Date;\n    setArrivalDate: Function;\n    giftMessages: Array<any>;\n    setGiftMessages: Function;\n    loadGiftMessages: Function;\n}\n\ninterface ShippableItemId {\n    key: string;\n    itemId: string;\n}\n\nexport interface MultiShippingFormState {\n    items: ShippableItem[];\n    itemAddingAddress?: ShippableItemId;\n    createCustomerAddressError?: Error;\n}\n\nclass MultiShippingForm extends PureComponent<\n    MultiShippingFormProps & WithLanguageProps & FormikProps<MultiShippingFormValues>,\n    MultiShippingFormState\n> {\n    static getDerivedStateFromProps(\n        { cart, consignments }: MultiShippingFormProps,\n        state: MultiShippingFormState,\n    ) {\n        if (!state || !state.items || getShippableItemsCount(cart) !== state.items.length) {\n            return { items: getShippableLineItems(cart, consignments) };\n        }\n\n        return null;\n    }\n\n    state: MultiShippingFormState = { items: [] };\n\n    render(): ReactNode {\n        const {\n            addresses,\n            consignments,\n            cart,\n            isGuest,\n            onSignIn,\n            onCreateAccount,\n            cartHasChanged,\n            shouldShowOrderComments,\n            isLoading,\n            getFields,\n            defaultCountryCode,\n            countries,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n            shipDate,\n            setShipDate,\n            arrivalDate,\n            setArrivalDate,\n            giftMessages,\n            setGiftMessages,\n            isFloatingLabelEnabled,\n        } = this.props;\n\n        const { items, itemAddingAddress, createCustomerAddressError } = this.state;\n\n        const giftMessage = ''\n\n        const setGiftMessage = (giftMessage: String) => {\n            console.log('Multiship - Gift Message Set =>', giftMessage)\n        }\n\n        if (isGuest) {\n            return (\n                <div className=\"checkout-step-info\">\n                    <TranslatedString id=\"shipping.multishipping_guest_intro\" />{' '}\n                    <a\n                        data-test=\"shipping-sign-in-link\"\n                        href=\"#\"\n                        onClick={preventDefault(onSignIn)}\n                    >\n                        <TranslatedString id=\"shipping.multishipping_guest_sign_in\" />\n                    </a>{' '}\n                    <TranslatedLink\n                        id=\"shipping.multishipping_guest_create\"\n                        onClick={onCreateAccount}\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <>\n                <ErrorModal\n                    error={createCustomerAddressError}\n                    message={\n                        <>\n                            <TranslatedString id=\"address.consignment_address_updated_text\" />{' '}\n                            <TranslatedString id=\"customer.create_address_error\" />\n                        </>\n                    }\n                    onClose={this.handleCloseErrorModal}\n                    shouldShowErrorCode={false}\n                />\n                <AddressFormModal\n                    countries={countries}\n                    countriesWithAutocomplete={countriesWithAutocomplete}\n                    defaultCountryCode={defaultCountryCode}\n                    getFields={getFields}\n                    googleMapsApiKey={googleMapsApiKey}\n                    isFloatingLabelEnabled={isFloatingLabelEnabled}\n                    isLoading={isLoading}\n                    isOpen={!!itemAddingAddress}\n                    onRequestClose={this.handleCloseAddAddressForm}\n                    onSaveAddress={this.handleSaveAddress}\n                />\n\n                <Form>\n                    <ul className=\"consignmentList\">\n                        {items.map((item) => (\n                            <li key={item.key}>\n                                <ItemAddressSelect\n                                    addresses={addresses}\n                                    item={item}\n                                    onSelectAddress={this.handleSelectAddress}\n                                    onUseNewAddress={this.handleUseNewAddress}\n                                />\n                            </li>\n                        ))}\n                    </ul>\n\n                    <ShippingFormFooter\n                        cart={ cart }\n                        cartHasChanged={cartHasChanged}\n                        isLoading={isLoading}\n                        isMultiShippingMode={true}\n                        shouldDisableSubmit={this.shouldDisableSubmit()}\n                        shouldShowOrderComments={shouldShowOrderComments}\n                        shouldShowShippingOptions={\n                            !hasUnassignedLineItems(consignments, cart.lineItems)\n                        }\n                        consignments={ consignments }\n                        shipDate={ shipDate }\n                        setShipDate={ setShipDate }\n                        arrivalDate={ arrivalDate }\n                        setArrivalDate={ setArrivalDate }\n                        giftMessage={ giftMessage }\n                        setGiftMessage={ setGiftMessage }\n                        giftMessages={ giftMessages }\n                        setGiftMessages={ setGiftMessages }\n                    />\n                </Form>\n            </>\n        );\n    }\n\n    private handleCloseErrorModal: () => void = () => {\n        this.setState({ createCustomerAddressError: undefined });\n    };\n\n    private handleSaveAddress: (address: AddressFormValues) => void = async (address) => {\n        const { createCustomerAddress } = this.props;\n        const { itemAddingAddress } = this.state;\n\n        if (!itemAddingAddress) {\n            return;\n        }\n\n        const shippingAddress = mapAddressFromFormValues(address);\n\n        await this.handleSelectAddress(\n            shippingAddress,\n            itemAddingAddress.itemId,\n            itemAddingAddress.key,\n        );\n\n        try {\n            await createCustomerAddress(shippingAddress);\n        } catch (error) {\n            if (error instanceof Error) {\n                this.setState({ createCustomerAddressError: error });\n            }\n        }\n\n        this.setState({\n            itemAddingAddress: undefined,\n        });\n    };\n\n    private handleUseNewAddress: (address: Address, itemId: string, itemKey: string) => void = (\n        address,\n        itemId,\n        itemKey,\n    ) => {\n        const { onUseNewAddress, shouldShowAddAddressInCheckout, loadGiftMessages } = this.props;\n\n        if (!shouldShowAddAddressInCheckout) {\n            onUseNewAddress(address, itemId);\n            loadGiftMessages()\n            return;\n        }\n\n        this.setState({\n            itemAddingAddress: {\n                key: itemKey,\n                itemId,\n            },\n        });\n    };\n\n    private handleCloseAddAddressForm: () => void = () => {\n        this.setState({\n            itemAddingAddress: undefined,\n        });\n    };\n\n    private handleSelectAddress: (\n        address: Address,\n        itemId: string,\n        itemKey: string,\n    ) => Promise<void> = async (address, itemId, itemKey) => {\n        const { assignItem, onUnhandledError, getFields, loadGiftMessages } = this.props;\n\n        if (!isValidAddress(address, getFields(address.countryCode))) {\n            return onUnhandledError(new AssignItemInvalidAddressError());\n        }\n\n        try {\n            const { data } = await assignItem({\n                address,\n                lineItems: [\n                    {\n                        itemId,\n                        quantity: 1,\n                    },\n                ],\n            });\n\n            this.syncItems(itemKey, address, data);\n            loadGiftMessages()\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(new AssignItemFailedError(error));\n            }\n        }\n    };\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments } = this.props;\n\n        return isLoading || !hasSelectedShippingOptions(consignments);\n    };\n\n    private syncItems: (key: string, address: Address, data: CheckoutStoreSelector) => void = (\n        key,\n        address,\n        data,\n    ) => {\n        const { items: currentItems } = this.state;\n        const items = updateShippableItems(\n            currentItems,\n            {\n                updatedItemIndex: currentItems.findIndex((item) => item.key === key),\n                address,\n            },\n            {\n                cart: data.getCart(),\n                consignments: data.getConsignments(),\n            },\n        );\n\n        if (items) {\n            this.setState({ items });\n        }\n    };\n}\n\nexport interface MultiShippingFormValues {\n    orderComment: string;\n}\n\nexport default withLanguage(\n    withFormik<MultiShippingFormProps & WithLanguageProps, MultiShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({ customerMessage }) => ({\n            orderComment: customerMessage,\n        }),\n        enableReinitialize: true,\n    })(MultiShippingForm),\n);\n","import { Address, Cart, Consignment } from '@bigcommerce/checkout-sdk';\n\nimport { isEqualAddress } from '../address';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport interface UpdateItemParams {\n    updatedItemIndex: number;\n    address: Address;\n}\n\nexport default function updateShippableItems(\n    items: ShippableItem[],\n    { updatedItemIndex, address }: UpdateItemParams,\n    { cart, consignments }: { cart?: Cart; consignments?: Consignment[] },\n): ShippableItem[] | undefined {\n    if (updatedItemIndex < 0 || updatedItemIndex >= items.length || !cart) {\n        return;\n    }\n\n    const cartItemIds = cart.lineItems.physicalItems.map(({ id }) => id);\n\n    const updatedConsignment = (consignments || []).find((consignment) =>\n        isEqualAddress(consignment.shippingAddress, address),\n    );\n\n    const newId = findNewItemId(items[updatedItemIndex], cart, updatedConsignment);\n\n    return items.map((item, i) => {\n        if ((newId && !cartItemIds.includes(item.id)) || i === updatedItemIndex) {\n            const itemId = newId ?? item.id;\n\n            return {\n                ...item,\n                id: itemId,\n                consignment: findConsignment(consignments || [], itemId as string),\n            };\n        }\n\n        return item;\n    });\n}\n\nfunction findNewItemId(\n    item: ShippableItem,\n    cart?: Cart,\n    consignment?: Consignment,\n): string | undefined {\n    if (!cart || !consignment) {\n        return;\n    }\n\n    const { physicalItems } = cart.lineItems;\n    const matchingCartItems = physicalItems.filter(\n        ({ productId, variantId }) => productId === item.productId && variantId === item.variantId,\n    );\n\n    const matchingCartItemIds = matchingCartItems.map(({ id }) => id);\n\n    return consignment.lineItemIds.find((id) => matchingCartItemIds.includes(id));\n}\n","import React, { FunctionComponent, memo, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { CheckboxFormField } from '../ui/form';\n\nexport interface BillingSameAsShippingFieldProps {\n    onChange?(isChecked: boolean): void;\n}\n\nconst BillingSameAsShippingField: FunctionComponent<BillingSameAsShippingFieldProps> = ({\n    onChange,\n}) => {\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"billing.use_shipping_address_label\" />,\n        [],\n    );\n\n    return (\n        <CheckboxFormField\n            id=\"sameAsBilling\"\n            labelContent={labelContent}\n            name=\"billingSameAsShipping\"\n            onChange={onChange}\n        />\n    );\n};\n\nexport default memo(BillingSameAsShippingField);\n","import {\n    Address,\n    Consignment,\n    Country,\n    CustomerAddress,\n    FormField,\n} from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { AddressForm, AddressSelect, isValidCustomerAddress } from '../address';\nimport { connectFormik, ConnectFormikProps } from '../common/form';\nimport { Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingAddressFormProps {\n    addresses: CustomerAddress[];\n    address?: Address;\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    formFields: FormField[];\n    shouldShowSaveAddress?: boolean;\n    isFloatingLabelEnabled?: boolean;\n    onUseNewAddress(): void;\n    onFieldChange(fieldName: string, value: string): void;\n    onAddressSelect(address: Address): void;\n}\n\nconst addressFieldName = 'shippingAddress';\n\nclass ShippingAddressForm extends Component<\n    ShippingAddressFormProps & ConnectFormikProps<SingleShippingFormValues>\n> {\n    render(): ReactNode {\n        const {\n            addresses,\n            address: shippingAddress,\n            onAddressSelect,\n            onUseNewAddress,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            formFields,\n            isLoading,\n            googleMapsApiKey,\n            isFloatingLabelEnabled,\n            formik: {\n                values: { shippingAddress: formAddress },\n            },\n        } = this.props;\n\n        const hasAddresses = addresses && addresses.length > 0;\n        const hasValidCustomerAddress = isValidCustomerAddress(\n            shippingAddress,\n            addresses,\n            formFields,\n        );\n\n        return (\n            <Fieldset id=\"checkoutShippingAddress\">\n                {hasAddresses && (\n                    <Fieldset id=\"shippingAddresses\">\n                        <LoadingOverlay isLoading={isLoading}>\n                            <AddressSelect\n                                addresses={addresses}\n                                onSelectAddress={onAddressSelect}\n                                onUseNewAddress={onUseNewAddress}\n                                selectedAddress={\n                                    hasValidCustomerAddress ? shippingAddress : undefined\n                                }\n                            />\n                        </LoadingOverlay>\n                    </Fieldset>\n                )}\n\n                {!hasValidCustomerAddress && (\n                    <LoadingOverlay isLoading={isLoading} unmountContentWhenLoading>\n                        <AddressForm\n                            countries={countries}\n                            countriesWithAutocomplete={countriesWithAutocomplete}\n                            countryCode={formAddress && formAddress.countryCode}\n                            fieldName={addressFieldName}\n                            formFields={formFields}\n                            googleMapsApiKey={googleMapsApiKey}\n                            isFloatingLabelEnabled={isFloatingLabelEnabled}\n                            onAutocompleteToggle={this.handleAutocompleteToggle}\n                            onChange={this.handleChange}\n                            setFieldValue={this.setFieldValue}\n                            shouldShowSaveAddress={shouldShowSaveAddress}\n                        />\n                    </LoadingOverlay>\n                )}\n            </Fieldset>\n        );\n    }\n\n    private setFieldValue: (fieldName: string, fieldValue: string) => void = (\n        fieldName,\n        fieldValue,\n    ) => {\n        const {\n            formik: { setFieldValue },\n            formFields,\n        } = this.props;\n\n        const customFormFieldNames = formFields\n            .filter((field) => field.custom)\n            .map((field) => field.name);\n\n        const formFieldName = customFormFieldNames.includes(fieldName)\n            ? `customFields.${fieldName}`\n            : fieldName;\n\n        setFieldValue(`${addressFieldName}.${formFieldName}`, fieldValue);\n    };\n\n    private handleChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        const { onFieldChange } = this.props;\n\n        onFieldChange(fieldName, value);\n    };\n\n    private handleAutocompleteToggle: (state: { inputValue: string; isOpen: boolean }) => void = ({\n        isOpen,\n        inputValue,\n    }) => {\n        const { onFieldChange } = this.props;\n\n        if (!isOpen) {\n            onFieldChange('address1', inputValue);\n        }\n    };\n}\n\nexport default connectFormik(ShippingAddressForm);\n","import {\n    Address,\n    CheckoutSelectors,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { StaticAddress } from '../address/';\nimport { preventDefault } from '../common/dom';\nimport { Button, ButtonSize, ButtonVariant } from '../ui/button';\nimport { DynamicFormField, Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport './StaticAddressEditable.scss';\n\nexport interface StaticAddressEditableProps {\n    address: Address;\n    buttonId: string;\n    formFields: FormField[];\n    isLoading: boolean;\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onFieldChange(fieldName: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n}\n\nclass StaticAddressEditable extends PureComponent<StaticAddressEditableProps> {\n    async componentDidMount(): Promise<void> {\n        const { initialize, methodId, onUnhandledError = noop } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const { deinitialize, methodId, onUnhandledError = noop } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const { address, buttonId, formFields, isLoading } = this.props;\n\n        const customFormFields = formFields.filter(({ custom }) => custom);\n        const shouldShowCustomFormFields = customFormFields.length > 0;\n\n        return (\n            <LoadingOverlay isLoading={isLoading}>\n                <div className=\"stepHeader\" style={{ padding: 0 }}>\n                    <div className=\"stepHeader-body subheader\">\n                        <StaticAddress address={address} />\n                    </div>\n\n                    <div className=\"stepHeader-actions subheader\">\n                        <Button\n                            id={buttonId}\n                            onClick={preventDefault()}\n                            size={ButtonSize.Tiny}\n                            testId=\"step-edit-button\"\n                            variant={ButtonVariant.Secondary}\n                        >\n                            <TranslatedString id=\"common.edit_action\" />\n                        </Button>\n                    </div>\n                </div>\n\n                {shouldShowCustomFormFields && (\n                    <Fieldset id=\"customFieldset\">\n                        {customFormFields.map((field) => (\n                            <DynamicFormField\n                                field={field}\n                                key={`${field.id}-${field.name}`}\n                                onChange={this.handleFieldValueChange(field.name)}\n                                parentFieldName=\"shippingAddress.customFields\"\n                            />\n                        ))}\n                    </Fieldset>\n                )}\n            </LoadingOverlay>\n        );\n    }\n\n    private handleFieldValueChange: (name: string) => (value: string) => void =\n        (name) => (value) => {\n            const { onFieldChange } = this.props;\n\n            onFieldChange(name, value);\n        };\n}\n\nexport default StaticAddressEditable;\n","import {\n    Address,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    CustomerAddress,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport React, { FunctionComponent, memo, useCallback, useContext } from 'react';\n\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport ShippingAddressForm from './ShippingAddressForm';\nimport StaticAddressEditable from './StaticAddressEditable';\n\nexport interface ShippingAddressProps {\n    addresses: CustomerAddress[];\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    formFields: FormField[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    hasRequestedShippingOptions: boolean;\n    isFloatingLabelEnabled?: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onFieldChange(name: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n    onUseNewAddress(): void;\n}\n\nconst ShippingAddress: FunctionComponent<ShippingAddressProps> = (props) => {\n    const {\n        methodId,\n        formFields,\n        countries,\n        countriesWithAutocomplete,\n        consignments,\n        googleMapsApiKey,\n        onAddressSelect,\n        onFieldChange,\n        onUseNewAddress,\n        initialize,\n        deinitialize,\n        isLoading,\n        shippingAddress,\n        hasRequestedShippingOptions,\n        addresses,\n        shouldShowSaveAddress,\n        isShippingStepPending,\n        isFloatingLabelEnabled,\n    } = props;\n\n    const { setSubmitted } = useContext(FormContext);\n\n    const initializeShipping = useCallback(\n        memoizeOne(\n            (defaultOptions: ShippingInitializeOptions) => (options?: ShippingInitializeOptions) =>\n                initialize({\n                    ...defaultOptions,\n                    ...options,\n                }),\n        ),\n        [],\n    );\n\n    const handleFieldChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        if (hasRequestedShippingOptions) {\n            setSubmitted(true);\n        }\n        onFieldChange(fieldName, value);\n    };\n\n    if (methodId) {\n        let options: ShippingInitializeOptions = {};\n\n        if (methodId === 'amazonpay' && shippingAddress) {\n            const editAddressButtonId = 'edit-ship-button';\n\n            options = {\n                amazonpay: {\n                    editAddressButtonId,\n                },\n            };\n\n            return (\n                <StaticAddressEditable\n                    address={shippingAddress}\n                    buttonId={editAddressButtonId}\n                    deinitialize={deinitialize}\n                    formFields={formFields}\n                    initialize={initializeShipping(options)}\n                    isLoading={isShippingStepPending}\n                    methodId={methodId}\n                    onFieldChange={onFieldChange}\n                />\n            );\n        }\n    }\n\n    return (\n        <ShippingAddressForm\n            address={shippingAddress}\n            addresses={addresses}\n            consignments={consignments}\n            countries={countries}\n            countriesWithAutocomplete={countriesWithAutocomplete}\n            formFields={formFields}\n            googleMapsApiKey={googleMapsApiKey}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\n            isLoading={isLoading}\n            onAddressSelect={onAddressSelect}\n            onFieldChange={handleFieldChange}\n            onUseNewAddress={onUseNewAddress}\n            shouldShowSaveAddress={shouldShowSaveAddress}\n        />\n    );\n};\n\nexport default memo(ShippingAddress);\n","export const SHIPPING_ADDRESS_FIELDS = [\n    'address1',\n    'postalCode',\n    'countryCode',\n    'city',\n    'stateOrProvince',\n    'stateOrProvinceCode',\n];\n","import React from \"react\";\nimport { CheckboxFormField } from \"../../../ui/form\";\n\nconst GiftOrderForm = (props: any) => {\n    const { setIsGiftOrder, additionalClassName } = props\n    const labelContent = 'This order is a gift.'\n    return(\n        <CheckboxFormField\n            id=\"isGiftOrder\"\n            additionalClassName={ additionalClassName }\n            labelContent={ labelContent }\n            name=\"isGiftOrder\"\n            onChange={ setIsGiftOrder } />\n    )\n}\n\nexport default GiftOrderForm","// @ts-nocheck\nimport {\n    Address,\n    Cart,\n    CheckoutParams,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    CustomerAddress,\n    CustomerRequestOptions,\n    FormField,\n    RequestOptions,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport { debounce, isEqual, noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport {\n    AddressFormValues,\n    getAddressFormFieldsValidationSchema,\n    getTranslateAddressError,\n    isEqualAddress,\n    mapAddressFromFormValues,\n    mapAddressToFormValues,\n} from '../address';\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\nimport { Fieldset, Form } from '../ui/form';\n\nimport BillingSameAsShippingField from './BillingSameAsShippingField';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport ShippingAddress from './ShippingAddress';\nimport { SHIPPING_ADDRESS_FIELDS } from './ShippingAddressFields';\nimport ShippingFormFooter from './ShippingFormFooter';\nimport GiftOrderForm from './customComponents/giftOptions/GiftOrderForm';\n\nexport interface SingleShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    isFloatingLabelEnabled?: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError?(error: Error): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(\n        address: Partial<Address>,\n        options?: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n    shipDate: Date;\n    setShipDate: Function;\n    arrivalDate: Date;\n    setArrivalDate: Function;\n    giftMessage: String;\n    setGiftMessage: Function;\n    giftMessages: Array<any>;\n    setGiftMessages: Function;\n    isGiftOrder: boolean;\n    setIsGiftOrder: Function;\n}\n\nexport interface SingleShippingFormValues {\n    billingSameAsShipping: boolean;\n    shippingAddress?: AddressFormValues;\n    orderComment: string;\n}\n\ninterface SingleShippingFormState {\n    isResettingAddress: boolean;\n    isUpdatingShippingData: boolean;\n    hasRequestedShippingOptions: boolean;\n}\n\nexport const SHIPPING_AUTOSAVE_DELAY = 1700;\n\nclass SingleShippingForm extends PureComponent<\n    SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>\n> {\n    static contextType = FormContext;\n\n    state: SingleShippingFormState = {\n        isResettingAddress: false,\n        isUpdatingShippingData: false,\n        hasRequestedShippingOptions: false,\n    };\n\n    private debouncedUpdateAddress: any;\n\n    constructor(\n        props: SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>,\n    ) {\n        super(props);\n\n        const { updateAddress } = this.props;\n\n        this.debouncedUpdateAddress = debounce(\n            async (address: Address, includeShippingOptions: boolean) => {\n                try {\n                    await updateAddress(address, {\n                        params: {\n                            include: {\n                                'consignments.availableShippingOptions': includeShippingOptions,\n                            },\n                        },\n                    });\n\n                    if (includeShippingOptions) {\n                        this.setState({ hasRequestedShippingOptions: true });\n                    }\n                } finally {\n                    this.setState({ isUpdatingShippingData: false });\n                }\n            },\n            SHIPPING_AUTOSAVE_DELAY,\n        );\n    }\n\n    render(): ReactNode {\n        const {\n            addresses,\n            cart,\n            cartHasChanged,\n            isLoading,\n            onUnhandledError,\n            methodId,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n            shippingAddress,\n            consignments,\n            shouldShowOrderComments,\n            initialize,\n            isValid,\n            deinitialize,\n            values: { shippingAddress: addressForm },\n            isShippingStepPending,\n            shipDate,\n            setShipDate,\n            arrivalDate,\n            setArrivalDate,\n            giftMessage,\n            setGiftMessage,\n            giftMessages,\n            setGiftMessages,\n            isGiftOrder,\n            setIsGiftOrder,\n            isFloatingLabelEnabled,\n        } = this.props;\n\n        const { isResettingAddress, isUpdatingShippingData, hasRequestedShippingOptions } =\n            this.state;\n\n        const PAYMENT_METHOD_VALID = ['amazonpay'];\n        const shouldShowBillingSameAsShipping = !PAYMENT_METHOD_VALID.some(\n            (method) => method === methodId,\n        );\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset>\n                    <ShippingAddress\n                        addresses={addresses}\n                        consignments={consignments}\n                        countries={countries}\n                        countriesWithAutocomplete={countriesWithAutocomplete}\n                        deinitialize={deinitialize}\n                        formFields={this.getFields(addressForm && addressForm.countryCode)}\n                        googleMapsApiKey={googleMapsApiKey}\n                        hasRequestedShippingOptions={hasRequestedShippingOptions}\n                        initialize={initialize}\n                        isFloatingLabelEnabled={isFloatingLabelEnabled}\n                        isLoading={isResettingAddress}\n                        isShippingStepPending={isShippingStepPending}\n                        methodId={methodId}\n                        onAddressSelect={this.handleAddressSelect}\n                        onFieldChange={this.handleFieldChange}\n                        onUnhandledError={onUnhandledError}\n                        onUseNewAddress={this.onUseNewAddress}\n                        shippingAddress={shippingAddress}\n                        shouldShowSaveAddress={shouldShowSaveAddress}\n                    />\n                    {shouldShowBillingSameAsShipping && (\n                        <div className=\"form-body\">\n                            <BillingSameAsShippingField />\n                        </div>\n                    )}\n\n                    <GiftOrderForm\n                        isGiftOrder={ isGiftOrder} \n                        setIsGiftOrder={ setIsGiftOrder }\n                        additionalClassName='form-isGiftOrder' />\n                </Fieldset>\n\n                <ShippingFormFooter\n                    cart={ cart }\n                    cartHasChanged={ cartHasChanged }\n                    isLoading={ isLoading || isUpdatingShippingData }\n                    isMultiShippingMode={ false }\n                    shouldDisableSubmit={ this.shouldDisableSubmit() }\n                    shouldShowOrderComments={ shouldShowOrderComments }\n                    shouldShowShippingOptions={ isValid }\n                    consignments={ consignments }\n                    shipDate={ shipDate }\n                    setShipDate={ setShipDate }\n                    arrivalDate={ arrivalDate }\n                    setArrivalDate={ setArrivalDate }\n                    giftMessage={ giftMessage }\n                    setGiftMessage={ setGiftMessage }\n                    giftMessages={ giftMessages }\n                    setGiftMessages={ setGiftMessages }\n                />\n\n            </Form>\n        );\n    }\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments, isValid } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        if (!isValid) {\n            return false;\n        }\n\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\n    };\n\n    private handleFieldChange: (name: string) => void = async (name) => {\n        const { setFieldValue } = this.props;\n\n        if (name === 'countryCode') {\n            setFieldValue('shippingAddress.stateOrProvince', '');\n            setFieldValue('shippingAddress.stateOrProvinceCode', '');\n        }\n\n        // Enqueue the following code to run after Formik has run validation\n        await new Promise((resolve) => setTimeout(resolve));\n\n        const isShippingField = SHIPPING_ADDRESS_FIELDS.includes(name);\n\n        const { hasRequestedShippingOptions } = this.state;\n\n        const { isValid } = this.props;\n\n        if (!isValid) {\n            return;\n        }\n\n        this.updateAddressWithFormData(isShippingField || !hasRequestedShippingOptions);\n    };\n\n    private updateAddressWithFormData(includeShippingOptions: boolean) {\n        const {\n            shippingAddress,\n            values: { shippingAddress: addressForm },\n        } = this.props;\n\n        const updatedShippingAddress = addressForm && mapAddressFromFormValues(addressForm);\n\n        if (Array.isArray(shippingAddress?.customFields)) {\n            includeShippingOptions = !isEqual(\n                shippingAddress?.customFields,\n                updatedShippingAddress?.customFields\n            ) || includeShippingOptions;\n        }\n\n        if (!updatedShippingAddress || isEqualAddress(updatedShippingAddress, shippingAddress)) {\n            return;\n        }\n\n        this.setState({ isUpdatingShippingData: true });\n        this.debouncedUpdateAddress(updatedShippingAddress, includeShippingOptions);\n    }\n\n    private handleAddressSelect: (address: Address) => void = async (address) => {\n        const { updateAddress, onUnhandledError = noop, values, setValues } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            await updateAddress(address);\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address.countryCode),\n                    address,\n                ),\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private onUseNewAddress: () => void = async () => {\n        const { deleteConsignments, onUnhandledError = noop, setValues, values } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            const address = await deleteConsignments();\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address && address.countryCode),\n                    address,\n                ),\n            });\n        } catch (e) {\n            onUnhandledError(e);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private getFields(countryCode: string | undefined): FormField[] {\n        const { getFields } = this.props;\n\n        return getFields(countryCode);\n    }\n}\n\nexport default withLanguage(\n    withFormik<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({\n            getFields,\n            shippingAddress,\n            isBillingSameAsShipping,\n            customerMessage,\n        }) => ({\n            billingSameAsShipping: isBillingSameAsShipping,\n            orderComment: customerMessage,\n            shippingAddress: mapAddressToFormValues(\n                getFields(shippingAddress && shippingAddress.countryCode),\n                shippingAddress,\n            ),\n        }),\n        isInitialValid: ({ shippingAddress, getFields, language }) =>\n            !!shippingAddress &&\n            getAddressFormFieldsValidationSchema({\n                language,\n                formFields: getFields(shippingAddress.countryCode),\n            }).isValidSync(shippingAddress),\n        validationSchema: ({\n            language,\n            getFields,\n            methodId,\n        }: SingleShippingFormProps & WithLanguageProps) =>\n            methodId\n                ? object({\n                      shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                          getCustomFormFieldsValidationSchema({\n                              translate: getTranslateAddressError(language),\n                              formFields: getFields(formValues && formValues.countryCode),\n                          }),\n                      ),\n                  })\n                : object({\n                      shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                          getAddressFormFieldsValidationSchema({\n                              language,\n                              formFields: getFields(formValues && formValues.countryCode),\n                          }),\n                      ),\n                  }),\n        enableReinitialize: false,\n    })(SingleShippingForm),\n);\n","import {\n    Address,\n    AddressRequestBody,\n    Cart,\n    CheckoutParams,\n    CheckoutSelectors,\n    Consignment,\n    ConsignmentAssignmentRequestBody,\n    Country,\n    CustomerAddress,\n    CustomerRequestOptions,\n    FormField,\n    RequestOptions,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React from 'react';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport { usePayPalConnectAddress } from '../address/PayPalAxo';\n\nimport MultiShippingForm, { MultiShippingFormValues } from './MultiShippingForm';\nimport SingleShippingForm, { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isBillingSameAsShipping: boolean;\n    isGuest: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    shouldShowAddAddressInCheckout: boolean;\n    isFloatingLabelEnabled?: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onCreateAccount(): void;\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n    onMultiShippingSubmit(values: MultiShippingFormValues): void;\n    onSignIn(): void;\n    onSingleShippingSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(\n        address: Partial<Address>,\n        options: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n    shipDate: Date;\n    setShipDate: Function;\n    arrivalDate: Date;\n    setArrivalDate: Function;\n    giftMessage: String;\n    setGiftMessage: Function;\n    giftMessages: Array<any>;\n    setGiftMessages: Function;\n    loadGiftMessages: Function;\n    isGiftOrder: boolean;\n    setIsGiftOrder: Function;\n}\n\nconst ShippingForm = ({\n    addresses,\n    assignItem,\n    cart,\n    cartHasChanged,\n    createCustomerAddress,\n    consignments,\n    countries,\n    countriesWithAutocomplete,\n    onCreateAccount,\n    customerMessage,\n    deinitialize,\n    deleteConsignments,\n    getFields,\n    googleMapsApiKey,\n    initialize,\n    isBillingSameAsShipping,\n    isGuest,\n    isLoading,\n    isMultiShippingMode,\n    methodId,\n    onMultiShippingSubmit,\n    onSignIn,\n    onSingleShippingSubmit,\n    onUnhandledError,\n    onUseNewAddress,\n    shippingAddress,\n    shouldShowOrderComments,\n    shouldShowSaveAddress,\n    shouldShowAddAddressInCheckout,\n    signOut,\n    updateAddress,\n    isShippingStepPending,\n    isFloatingLabelEnabled,\n    shipDate,\n    setShipDate,\n    arrivalDate,\n    setArrivalDate,\n    giftMessage,\n    setGiftMessage,\n    giftMessages,\n    setGiftMessages,\n    loadGiftMessages,\n    isGiftOrder,\n    setIsGiftOrder,\n}: ShippingFormProps & WithLanguageProps) => {\n    const { isPayPalAxoEnabled, mergedBcAndPayPalConnectAddresses } = usePayPalConnectAddress();\n    const shippingAddresses = isPayPalAxoEnabled ? mergedBcAndPayPalConnectAddresses : addresses;\n\n    return isMultiShippingMode ? (\n        <MultiShippingForm\n            addresses={shippingAddresses}\n            assignItem={assignItem}\n            cart={cart}\n            cartHasChanged={cartHasChanged}\n            consignments={consignments}\n            countries={countries}\n            countriesWithAutocomplete={countriesWithAutocomplete}\n            createCustomerAddress={createCustomerAddress}\n            customerMessage={customerMessage}\n            defaultCountryCode={shippingAddress?.countryCode}\n            getFields={getFields}\n            googleMapsApiKey={googleMapsApiKey}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\n            isGuest={isGuest}\n            isLoading={isLoading}\n            onCreateAccount={onCreateAccount}\n            onSignIn={onSignIn}\n            onSubmit={onMultiShippingSubmit}\n            onUnhandledError={onUnhandledError}\n            onUseNewAddress={onUseNewAddress}\n            shouldShowAddAddressInCheckout={shouldShowAddAddressInCheckout}\n            shouldShowOrderComments={shouldShowOrderComments}\n            shipDate={ shipDate }\n            setShipDate={ setShipDate }\n            arrivalDate={ arrivalDate }\n            setArrivalDate={ setArrivalDate }\n            giftMessages={ giftMessages }\n            setGiftMessages={ setGiftMessages }\n            loadGiftMessages={ loadGiftMessages }\n        />\n    ) : (\n        <SingleShippingForm\n            addresses={shippingAddresses}\n            cart={cart}\n            cartHasChanged={cartHasChanged}\n            consignments={consignments}\n            countries={countries}\n            countriesWithAutocomplete={countriesWithAutocomplete}\n            customerMessage={customerMessage}\n            deinitialize={deinitialize}\n            deleteConsignments={deleteConsignments}\n            getFields={getFields}\n            googleMapsApiKey={googleMapsApiKey}\n            initialize={initialize}\n            isBillingSameAsShipping={isBillingSameAsShipping}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\n            isLoading={isLoading}\n            isMultiShippingMode={isMultiShippingMode}\n            isShippingStepPending={isShippingStepPending}\n            methodId={methodId}\n            onSubmit={onSingleShippingSubmit}\n            onUnhandledError={onUnhandledError}\n            shippingAddress={shippingAddress}\n            shouldShowOrderComments={shouldShowOrderComments}\n            shouldShowSaveAddress={shouldShowSaveAddress}\n            signOut={signOut}\n            updateAddress={updateAddress}\n            shipDate={ shipDate }\n            setShipDate={ setShipDate }\n            arrivalDate={ arrivalDate }\n            setArrivalDate={ setArrivalDate }\n            giftMessage={ giftMessage }\n            setGiftMessage={ setGiftMessage }\n            isGiftOrder={ isGiftOrder }\n            setIsGiftOrder={ setIsGiftOrder }\n            giftMessages={ giftMessages }\n            setGiftMessages={ setGiftMessages }\n        />\n    );\n};\n\nexport default withLanguage(ShippingForm);","import { ExtensionRegion } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useEffect } from 'react';\n\nimport { ExtensionRegionContainer, useExtensions } from '@bigcommerce/checkout/checkout-extension';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { preventDefault } from '../common/dom';\nimport { Legend } from '../ui/form';\n\ninterface ShippingHeaderProps {\n    isMultiShippingMode: boolean;\n    isGuest: boolean;\n    shouldShowMultiShipping: boolean;\n    onMultiShippingChange(): void;\n}\n\nconst ShippingHeader: FunctionComponent<ShippingHeaderProps> = ({\n    isMultiShippingMode,\n    isGuest,\n    onMultiShippingChange,\n    shouldShowMultiShipping,\n}) => {\n    const { extensionService, isExtensionEnabled } = useExtensions();\n    const isExtensionRegionEnabled = Boolean(\n        isExtensionEnabled() &&\n            extensionService.isRegionEnabled(ExtensionRegion.ShippingShippingAddressFormBefore),\n    );\n\n    useEffect(() => {\n        if (isExtensionRegionEnabled) {\n            void extensionService.renderExtension(\n                ExtensionRegionContainer.ShippingShippingAddressFormBefore,\n                ExtensionRegion.ShippingShippingAddressFormBefore,\n            );\n\n            return () => {\n                extensionService.removeListeners(ExtensionRegion.ShippingShippingAddressFormBefore);\n            };\n        }\n    }, [extensionService, isExtensionRegionEnabled]);\n\n    return (\n        <>\n            {isExtensionRegionEnabled && (\n                <div id={ExtensionRegionContainer.ShippingShippingAddressFormBefore} />\n            )}\n            <div className=\"form-legend-container\">\n                <Legend testId=\"shipping-address-heading\">\n                    <TranslatedString\n                        id={\n                            isMultiShippingMode\n                                ? isGuest\n                                    ? 'shipping.multishipping_address_heading_guest'\n                                    : 'shipping.multishipping_address_heading'\n                                : 'shipping.shipping_address_heading'\n                        }\n                    />\n                </Legend>\n\n                {shouldShowMultiShipping && (\n                    <a\n                        data-test=\"shipping-mode-toggle\"\n                        href=\"#\"\n                        onClick={preventDefault(onMultiShippingChange)}\n                    >\n                        <TranslatedString\n                            id={isMultiShippingMode ? 'shipping.ship_to_single' : 'shipping.ship_to_multi'}\n                        />\n                    </a>\n                )}\n            </div>\n        </>\n    );\n}\n\nexport default memo(ShippingHeader);\n","import { CheckoutSelectors, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nexport interface StripeupeShippingAddressProps {\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\nclass StripeShippingAddressDisplay extends PureComponent<StripeupeShippingAddressProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n\n        return (\n            <>\n                <div className=\"stepHeader\" style={ { padding: 0 } }>\n                    <div id=\"StripeUpeShipping\" style={ { width: '100%' } } />\n                </div>\n                <br />\n            </>\n        );\n    }\n}\n\nexport default StripeShippingAddressDisplay;\n","interface StripeCountryMapping {\n    [key: string]: StripeStateMapping;\n}\n\ninterface StripeStateMapping {\n    [key: string]: string;\n}\n\nexport default function StripeStateMapper(country: string, state: string): string {\n\n    const countries: StripeCountryMapping = {\n        'MX': {\n            'Ags.': 'AGU',\n            'B.C.': 'BCN',\n            'B.C.S.': 'BCS',\n            'Camp.': 'CAM',\n            'Coah.': 'COA',\n            'Col.': 'COL',\n            'Chis.': 'CHP',\n            'Chih.': 'CHH',\n            'Dgo.': 'DUR',\n            'Gto.': 'GUA',\n            'Gro.': 'GRO',\n            'Hgo.': 'HID',\n            'Jal.': 'JAL',\n            'Méx.': 'MEX',\n            'CDMX': 'MEX',\n            'Mich.': 'MIC',\n            'Mor.': 'MOR',\n            'Nay.': 'NAY',\n            'N.L.': 'NLE',\n            'Oax.': 'OAX',\n            'Pue.': 'PUE',\n            'Qro.': 'QUE',\n            'Q.R.': 'ROO',\n            'S.L.P.': 'SLP',\n            'Sin.': 'SIN',\n            'Son.': 'SON',\n            'Tab.': 'TAB',\n            'Tamps.': 'TAM',\n            'Tlax.': 'TLA',\n            'Ver.': 'VER',\n            'Yuc.': 'YUC',\n            'Zac.': 'ZAC',\n        },\n        'AR': {\n            'Ciudad Autónoma de Buenos Aires': 'C',\n            'Buenos Aires': 'B',\n            'Catamarca': 'K',\n            'Chaco': 'H',\n            'Chubut': 'U',\n            'Córdoba': 'X',\n            'Corrientes': 'W',\n            'Entre Ríos': 'E',\n            'Formosa': 'P',\n            'Jujuy': 'Y',\n            'La Pampa': 'L',\n            'La Rioja': 'F',\n            'Mendoza': 'M',\n            'Misiones': 'N',\n            'Neuquén': 'Q',\n            'Salta': 'A',\n            'San Juan': 'J',\n            'San Luis': 'D',\n            'Santa Fe': 'S',\n            'Santiago del Estero': 'G',\n            'Tierra del Fuego': 'V',\n            'Tucumán': 'W',\n        },\n        'IN': {\n            'Andhra Pradesh': 'AP',\n            'Arunachal Pradesh': 'AR',\n            'Assam': 'AS',\n            'Bihar': 'BR',\n            'Chhattisgarh': 'CG',\n            'Goa': 'GA',\n            'Gujarat': 'GJ',\n            'Haryana': 'HR',\n            'Himachal Pradesh': 'HP',\n            'Jammu and Kashmir': 'JK',\n            'Jharkhand': 'JH',\n            'Karnataka': 'KA',\n            'Kerala': 'KL',\n            'Madhya Pradesh': 'MP',\n            'Maharashtra': 'MH',\n            'Manipur': 'MN',\n            'Meghalaya': 'ML',\n            'Mizoram': 'MZ',\n            'Nagaland': 'NL',\n            'Odisha': 'OR',\n            'Punjab': 'PB',\n            'Rajasthan': 'RJ',\n            'Sikkim': 'SK',\n            'Tamil Nadu': 'TN',\n            'Tripura': 'TR',\n            'Uttarakhand': 'UK',\n            'Uttar Pradesh': 'UP',\n            'West Bengal': 'WB',\n            'Andaman and Nicobar Islands': 'AN',\n            'Chandigarh': 'CH',\n            'Dadra and Nagar Haveli and Daman and Diu': 'DN',\n            'Lakshadweep': 'LD',\n            'Delhi': 'DL',\n            'Puducherry': 'PY',\n            'Telangana': 'TS',\n        },\n        'ID': {\n            'Bali': 'BA',\n            'Banten': 'BT',\n            'Bengkulu': 'BE',\n            'Aceh': 'DA',\n            'DKI Jakarta': 'JK',\n            'Sumatera Utara': 'SU',\n            'Sumatera Barat': 'SB',\n            'Riau': 'SI',\n            'Jambi': 'JA',\n            'Sumatera Selatan': 'SS',\n            'Lampung': 'LA',\n            'Jawa Barat': 'JB',\n            'Jawa Timur': 'JT',\n            'Daerah Istimewa Yogyakarta': 'DY',\n            'Kalimantan Barat': 'KB',\n            'Kalimantan Tengah': 'KT',\n            'Kalimantan Timur': 'KI',\n            'Kalimantan Selatan': 'KS',\n            'Nusa Tenggara Barat': 'NB',\n            'Nusa Tenggara Timur': 'NT',\n            'Sulawesi Selatan': 'SN',\n            'Sulawesi Tengah': 'ST',\n            'Sulawesi Utara': 'SA',\n            'Sulawesi Tenggara': 'SG',\n            'Maluku': 'MA',\n            'Maluku Utara': 'MU',\n            'Gorontalo': 'GO',\n        },\n        'MY': {\n            'Johor': 'JHR',\n            'Kedah': 'KDH',\n            'Kelantan': 'KTN',\n            'Melaka': 'MLK',\n            'Negeri Sembilan': 'NSN',\n            'Pahang': 'PHG',\n            'Pulau Pinang': 'PNG',\n            'Perak': 'PRK',\n            'Perlis': 'PLS',\n            'Selangor': 'SGR',\n            'Terengganu': 'TRG',\n            'Sabah': 'SBH',\n            'Sarawak': 'SRW',\n            'Kuala Lumpur': 'KUL',\n            'Labuan': 'LBN',\n            'Putrajaya': 'PJY',\n        },\n        'IE': {\n            'Carlow': 'CW',\n            'Cavan': 'CN',\n            'Clare': 'CE',\n            'Donegal': 'DL',\n            'Dublin': 'D',\n            'Galway': 'G',\n            'Kildare': 'KE',\n            'Kilkenny': 'KK',\n            'Laois': 'LS',\n            'Leitrim': 'LM',\n            'Longford': 'LD',\n            'Louth': 'LH',\n            'Mayo': 'MO',\n            'Meath': 'MH',\n            'Monaghan': 'MN',\n            'Offaly': 'OY',\n            'Roscommon': 'RN',\n            'Sligo': 'SO',\n            'Tipperary': 'TA',\n            'Waterford': 'WD',\n            'Westmeath': 'WH',\n            'Wexford': 'WX',\n            'Wicklow': 'WW',\n        },\n        'ES': {\n            'C': 'ACOR',\n            'VI': 'ALAV',\n            'AB': 'ALBA',\n            'A': 'ALIC',\n            'AL': 'ALME',\n            'O': 'ASTU',\n            'AV': 'AVIL',\n            'BA': 'BADA',\n            'PM': 'BALE',\n            'B': 'BARC',\n            'BU': 'BURG',\n            'CC': 'CACE',\n            'CA': 'CADI',\n            'S': 'CANT',\n            'CS': 'CAST',\n            'CE': 'CEUT',\n            'CR': 'CIUD',\n            'CO': 'CORD',\n            'CU': 'CUEN',\n            'GI': 'GIRO',\n            'GR': 'GRAN',\n            'GU': 'GUAD',\n            'SS': 'GUIP',\n            'H': 'HUEL',\n            'HU': 'HUES',\n            'J': 'JAEN',\n            'LO': 'LAR',\n            'GC': 'LAS',\n            'LE': 'LEON',\n            'L': 'LLEI',\n            'LU': 'LUGO',\n            'M': 'MADR',\n            'MA': 'MALA',\n            'ML': 'MELI',\n            'MU': 'MURC',\n            'NA': 'NAVA',\n            'OR': 'OURE',\n            'P': 'PALE',\n            'PO': 'PONT',\n            'SA': 'SALA',\n            'TF': 'SANT',\n            'SG': 'SEGO',\n            'SE': 'SEVI',\n            'SO': 'SORI',\n            'T': 'TARR',\n            'TE': 'TERU',\n            'TP': 'TOLE',\n            'V': 'VALE',\n            'VA': 'VALL',\n            'BI': 'VIZC',\n            'ZA': 'ZAMO',\n            'Z': 'ZARA',\n        }\n    };\n\n    if (countries[country]) {\n        return countries[country][state] ?? getStripeState(countries[country], state);\n    }\n\n    return state;\n}\n\nfunction getStripeState(stateList: StripeStateMapping, state: string) {\n    return Object.keys(stateList).find(key => stateList[key] === state) || state;\n}\n","import {\n    Address,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n    StripeShippingEvent\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport React, { FunctionComponent, memo, useCallback, useEffect, useState } from 'react';\n\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport { getAppliedStyles } from '../../common/dom';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport hasSelectedShippingOptions from '../hasSelectedShippingOptions';\nimport { SingleShippingFormValues } from '../SingleShippingForm';\n\nimport StripeShippingAddressDisplay from './StripeShippingAddressDisplay';\nimport StripeStateMapper from './StripeStateMapper';\n\nexport interface StripeShippingAddressProps {\n    consignments: Consignment[];\n    countries?: Country[];\n    shippingAddress?: Address;\n    step: CheckoutStepStatus;\n    isShippingMethodLoading: boolean;\n    shouldDisableSubmit: boolean;\n    isStripeLoading?(): void;\n    isStripeAutoStep?(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onSubmit(values: SingleShippingFormValues): void;\n}\n\nconst StripeShippingAddress: FunctionComponent<StripeShippingAddressProps> = (props) => {\n    const {\n        countries,\n        consignments,\n        onAddressSelect,\n        initialize,\n        deinitialize,\n        shouldDisableSubmit,\n        onSubmit,\n        step,\n        isStripeLoading,\n        isStripeAutoStep,\n        isShippingMethodLoading,\n        shippingAddress,\n    } = props;\n\n    const [isNewAddress, setIsNewAddress] = useState(true);\n    const [isFirstShippingRender, setIsFirstShippingRender] = useState(true);\n    const [stripeShippingAddress, setStripeShippingAddress] =  useState({\n        firstName: '',\n        lastName: '',\n        company: '',\n        address1: '',\n        address2: '',\n        city: '',\n        stateOrProvince: '',\n        stateOrProvinceCode: '',\n        shouldSaveAddress: true,\n        country: '',\n        countryCode: '',\n        postalCode: '',\n        phone: '',\n        customFields: [],\n    });\n\n    const handleLoading = useCallback(() => {\n        if (isStripeLoading) {\n            isStripeLoading();\n        }\n    }, [isStripeLoading]);\n\n    useEffect(() => {\n        if (consignments[0]) {\n            const {availableShippingOptions} = consignments[0];\n\n            if (availableShippingOptions && !getRecommendedShippingOption(availableShippingOptions)) {\n                handleLoading();\n            }\n        }\n    }, [consignments]);\n\n    useEffect(() => {\n        const hasStripeAddressAndHasShippingOptions = stripeShippingAddress.firstName && hasSelectedShippingOptions(consignments);\n        const afterReload = !isFirstShippingRender && !isNewAddress && !isShippingMethodLoading;\n        const isLoadingBeforeAutoStep =  isStripeLoading && isStripeAutoStep;\n\n        if (hasStripeAddressAndHasShippingOptions && afterReload && isLoadingBeforeAutoStep) {\n            isStripeLoading();\n            isStripeAutoStep();\n            onSubmit({billingSameAsShipping: true, shippingAddress: stripeShippingAddress, orderComment: ''});\n        }\n    }, [isFirstShippingRender, onSubmit, stripeShippingAddress, shouldDisableSubmit, isShippingMethodLoading, isNewAddress ,consignments]);\n\n    const availableShippingList = countries?.map(country => ({code: country.code, name: country.name}));\n    const allowedCountries = availableShippingList ? availableShippingList.map(country => country.code).join(', ') : '';\n    const shouldShowContent = (isNewAddress = true, phoneFieldRequired: boolean, phone: string) => {\n        const stepCompleted = step.isComplete;\n        const shippingPopulated = shippingAddress?.firstName && isNewAddress;\n        const PhoneRequiredAndNotFilled = phoneFieldRequired && !phone;\n\n        return stepCompleted || shippingPopulated || PhoneRequiredAndNotFilled;\n    };\n\n    const handleStripeShippingAddress = useCallback(async (shipping: StripeShippingEvent) => {\n        const {complete, phoneFieldRequired, value: { address = { country: '', state: '', line1: '', line2: '', city: '', postal_code: '' }\n            , name = '', firstName = '', lastName = '', phone = '' } } = shipping;\n\n        if (complete) {\n            if (shouldShowContent(shipping?.isNewAddress, phoneFieldRequired, phone)) {\n                handleLoading();\n            }\n\n            const names = name?.split(' ');\n\n            // @ts-ignore\n            const country = availableShippingList?.find(country => country.code === address.country).name;\n            const state = StripeStateMapper(address.country, address.state);\n            const shippingValue = {\n                firstName: firstName || names[0],\n                lastName: lastName || names[1],\n                company: '',\n                address1: address.line1,\n                address2: address.line2 || '',\n                city: address.city,\n                stateOrProvince: state,\n                stateOrProvinceCode: state,\n                shouldSaveAddress: true,\n                country: country || address.country,\n                countryCode: address.country,\n                postalCode: address.postal_code,\n                phone: phone || '',\n                customFields: [],\n            };\n\n            if (!step.isComplete) {\n                setIsFirstShippingRender(current => !current);\n            }\n\n            onAddressSelect(shippingValue);\n            setStripeShippingAddress(shippingValue);\n\n            if (shipping.isNewAddress !== isNewAddress) {\n                setIsNewAddress(current => !current);\n            }\n        } else {\n            handleLoading();\n        }\n\n    }, [availableShippingList, onAddressSelect]);\n\n    const initializeShipping = useCallback(\n        memoizeOne(\n            (defaultOptions: ShippingInitializeOptions) => (options?: ShippingInitializeOptions) =>\n                initialize({\n                    ...defaultOptions,\n                    ...options,\n                }),\n        ),\n        [],\n    );\n\n    const getStylesFromElement = (\n        id: string,\n        properties: string[]) => {\n        const parentContainer = document.getElementById(id);\n\n        if (parentContainer) {\n            return getAppliedStyles(parentContainer, properties);\n        }\n\n        return undefined;\n    };\n\n    const getStripeStyles: any = useCallback( () => {\n        const containerId = 'stripe-card-component-field';\n        const formInput = getStylesFromElement(`${containerId}--input`, ['color', 'background-color', 'border-color', 'box-shadow']);\n        const formLabel = getStylesFromElement(`${containerId}--label`, ['color']);\n        const formError = getStylesFromElement(`${containerId}--error`, ['color']);\n\n        return formLabel && formInput && formError ? {\n            labelText: formLabel.color,\n            fieldText: formInput.color,\n            fieldPlaceholderText: formInput.color,\n            fieldErrorText: formError.color,\n            fieldBackground: formInput['background-color'],\n            fieldInnerShadow: formInput['box-shadow'],\n            fieldBorder: formInput['border-color'],\n        } : undefined;\n    }, [])\n\n        const options: ShippingInitializeOptions = {\n            stripeupe: {\n                container: 'StripeUpeShipping',\n                onChangeShipping: handleStripeShippingAddress,\n                availableCountries: allowedCountries,\n                getStyles: getStripeStyles,\n                getStripeState: StripeStateMapper,\n                gatewayId: 'stripeupe',\n                methodId: 'card',\n            },\n        };\n\n        const renderCheckoutThemeStylesForStripeUPE = () => {\n            const containerId = 'stripe-card-component-field';\n\n            return (\n                <div\n                    className=\"optimizedCheckout-form-input\"\n                    id={ `${containerId}--input` }\n                    placeholder=\"1111\"\n                >\n                    <div\n                        className=\"form-field--error\"\n                    >\n                        <div\n                            className=\"optimizedCheckout-form-label\"\n                            id={ `${containerId}--error` }\n                        />\n                    </div>\n                    <div\n                        className=\"optimizedCheckout-form-label\"\n                        id={ `${containerId}--label` }\n                    />\n                </div>\n            );\n        };\n\n        return (\n            <>\n                <StripeShippingAddressDisplay\n                    deinitialize={ deinitialize }\n                    initialize={ initializeShipping(options) }\n                    methodId=\"stripeupe\"\n                />\n                { renderCheckoutThemeStylesForStripeUPE() }\n            </>\n        );\n};\n\nexport default memo(StripeShippingAddress);\n","// @ts-nocheck\nimport {\n    Cart,\n    Address,\n    CheckoutParams,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    FormField,\n    RequestOptions,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport {\n    AddressFormValues,\n    getAddressFormFieldsValidationSchema,\n    getTranslateAddressError,\n    mapAddressToFormValues,\n} from '../../address';\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport { getCustomFormFieldsValidationSchema } from '../../formFields';\nimport { Fieldset, Form } from '../../ui/form';\nimport BillingSameAsShippingField from '../BillingSameAsShippingField';\nimport hasSelectedShippingOptions from '../hasSelectedShippingOptions';\nimport ShippingFormFooter from '../ShippingFormFooter';\n\nimport StripeShippingAddress from './StripeShippingAddress';\n\nexport interface SingleShippingFormProps {\n    cart: Cart;\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    customerMessage: string;\n    isLoading: boolean;\n    isShippingMethodLoading: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowOrderComments: boolean;\n    step: CheckoutStepStatus;\n    isStripeLoading?(): void;\n    isStripeAutoStep?(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError?(error: Error): void;\n    updateAddress(\n        address: Partial<Address>,\n        options?: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n}\n\nexport interface SingleShippingFormValues {\n    billingSameAsShipping: boolean;\n    shippingAddress?: AddressFormValues;\n    orderComment: string;\n}\n\ninterface SingleShippingFormState {\n    isUpdatingShippingData: boolean;\n}\n\nclass StripeShippingForm extends PureComponent<\n    SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>\n    > {\n    static contextType = FormContext;\n\n    state: SingleShippingFormState = {\n        isUpdatingShippingData: false,\n    };\n\n    render(): ReactNode {\n        const {\n            cart,\n            cartHasChanged,\n            isLoading,\n            countries,\n            isStripeLoading,\n            shippingAddress,\n            consignments,\n            shouldShowOrderComments,\n            initialize,\n            isValid,\n            deinitialize,\n            onSubmit,\n            isStripeAutoStep,\n            step,\n            isShippingMethodLoading,\n        } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset>\n                    <StripeShippingAddress\n                        consignments={consignments}\n                        countries={countries}\n                        deinitialize={deinitialize}\n                        initialize={initialize}\n                        isShippingMethodLoading={isShippingMethodLoading}\n                        isStripeAutoStep={isStripeAutoStep}\n                        isStripeLoading={isStripeLoading}\n                        onAddressSelect={this.handleAddressSelect}\n                        onSubmit={onSubmit}\n                        shippingAddress={shippingAddress}\n                        shouldDisableSubmit={this.shouldDisableSubmit()}\n                        step={step}\n                    />\n                    <div className=\"form-body\">\n                        <BillingSameAsShippingField />\n                    </div>\n                </Fieldset>\n\n                <ShippingFormFooter\n                    cartHasChanged={cartHasChanged}\n                    isLoading={isLoading || isUpdatingShippingData}\n                    isMultiShippingMode={false}\n                    shouldDisableSubmit={this.shouldDisableSubmit()}\n                    shouldShowOrderComments={shouldShowOrderComments}\n                    shouldShowShippingOptions={isValid} \n                    cart={cart}\n                    consignments={[]} \n                    shipDate={new Date} \n                    setShipDate={Function} \n                    arrivalDate={new Date} \n                    setArrivalDate={Function} \n                    giftMessage={new String} \n                    setGiftMessage={Function} \n                    giftMessages={new Array} \n                    setGiftMessages={Function}                />\n            </Form>\n        );\n    }\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments, isValid } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        if (!isValid) {\n            return false;\n        }\n\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\n    };\n\n    private handleAddressSelect: (address: Address) => void = async (address) => {\n        const { updateAddress, onUnhandledError = noop, values, setValues } = this.props;\n\n        try {\n            await updateAddress(address);\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address.countryCode),\n                    address,\n                ),\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n\n    private getFields(countryCode: string | undefined): FormField[] {\n        const { getFields } = this.props;\n\n        return getFields(countryCode);\n    }\n}\n\nexport default withLanguage(\n    withFormik<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({\n                               getFields,\n                               shippingAddress,\n                               isBillingSameAsShipping,\n                               customerMessage,\n                           }) => ({\n            billingSameAsShipping: isBillingSameAsShipping,\n            orderComment: customerMessage,\n            shippingAddress: mapAddressToFormValues(\n                getFields(shippingAddress && shippingAddress.countryCode),\n                shippingAddress,\n            ),\n        }),\n        isInitialValid: ({ shippingAddress, getFields, language }) =>\n            !!shippingAddress &&\n            getAddressFormFieldsValidationSchema({\n                language,\n                formFields: getFields(shippingAddress.countryCode),\n            }).isValidSync(shippingAddress),\n        validationSchema: ({\n                               language,\n                               getFields,\n                               methodId,\n                           }: SingleShippingFormProps & WithLanguageProps) =>\n            methodId\n                ? object({\n                    shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                        getCustomFormFieldsValidationSchema({\n                            translate: getTranslateAddressError(language),\n                            formFields: getFields(formValues && formValues.countryCode),\n                        }),\n                    ),\n                })\n                : object({\n                    shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                        getAddressFormFieldsValidationSchema({\n                            language,\n                            formFields: getFields(formValues && formValues.countryCode),\n                        }),\n                    ),\n                }),\n        enableReinitialize: false,\n    })(StripeShippingForm),\n);\n","import { Address, Cart, CheckoutSelectors, Consignment, Country, Customer, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\n\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport ShippingHeader from '../ShippingHeader';\n\nimport StripeShippingForm, { SingleShippingFormValues } from './StripeShippingForm';\n\nexport interface StripeShippingProps {\n    cart: Cart;\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    step: CheckoutStepStatus;\n    consignments: Consignment[];\n    countries: Country[];\n    customer: Customer;\n    customerMessage: string;\n    isGuest: boolean;\n    isInitializing: boolean;\n    isLoading: boolean;\n    isShippingMethodLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowAddAddressInCheckout: boolean;\n    shouldShowMultiShipping: boolean;\n    shouldShowOrderComments: boolean;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onSubmit(values: SingleShippingFormValues): void;\n    onMultiShippingChange(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\n    loadShippingOptions(): Promise<CheckoutSelectors>;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    getFields(countryCode?: string): FormField[];\n}\n\ninterface StripeShippingState {\n    isStripeLoading: boolean;\n    isStripeAutoStep: boolean;\n}\n\nclass StripeShipping extends Component<StripeShippingProps, StripeShippingState> {\n    constructor(props: StripeShippingProps) {\n        super(props);\n\n        this.state = {\n            isStripeLoading: true,\n            isStripeAutoStep: false,\n        };\n    }\n\n    render(): ReactNode {\n        const {\n            cart,\n            isBillingSameAsShipping,\n            isGuest,\n            shouldShowMultiShipping,\n            customer,\n            updateAddress,\n            initialize,\n            deinitialize,\n            isMultiShippingMode,\n            step,\n            onSubmit,\n            onMultiShippingChange,\n            isLoading,\n            isShippingMethodLoading,\n            ...shippingFormProps\n        } = this.props;\n\n        const {\n            isStripeLoading,\n            isStripeAutoStep,\n        } = this.state;\n\n        return <>\n            <AddressFormSkeleton isLoading={isStripeAutoStep || isStripeLoading}/>\n            <div className=\"checkout-form\" style={{display: isStripeAutoStep || isStripeLoading ? 'none' : undefined}}>\n                <ShippingHeader\n                    isGuest={isGuest}\n                    isMultiShippingMode={isMultiShippingMode}\n                    onMultiShippingChange={onMultiShippingChange}\n                    shouldShowMultiShipping={shouldShowMultiShipping}\n                />\n                <StripeShippingForm\n                    cart={cart}\n                    {...shippingFormProps}\n                    deinitialize={deinitialize}\n                    initialize={initialize}\n                    isBillingSameAsShipping={isBillingSameAsShipping}\n                    isLoading={isLoading}\n                    isMultiShippingMode={isMultiShippingMode}\n                    isShippingMethodLoading={isShippingMethodLoading}\n                    isStripeAutoStep={this.handleIsAutoStep}\n                    isStripeLoading={this.stripeLoadedCallback}\n                    onSubmit={onSubmit}\n                    step={step}\n                    updateAddress={updateAddress}\n                />\n            </div>\n        </>;\n    }\n\n    private stripeLoadedCallback: () => void = () => {\n        this.setState({ isStripeLoading: false });\n    }\n\n    private handleIsAutoStep: () => void = () => {\n        this.setState({ isStripeAutoStep: true });\n    }\n}\n\nexport default StripeShipping;\n","import { \n    Address, \n    AddressRequestBody, \n    Cart, \n    CheckoutRequestBody, \n    CheckoutSelectors, \n    Consignment, \n    ConsignmentAssignmentRequestBody, \n    ConsignmentUpdateRequestBody, \n    Country, \n    Customer, \n    CustomerRequestOptions, \n    FormField, \n    ShippingInitializeOptions, \n    ShippingRequestOptions \n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { createSelector } from 'reselect';\n\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { withCheckout } from '../checkout';\nimport CheckoutStepStatus from '../checkout/CheckoutStepStatus';\nimport { EMPTY_ARRAY, isFloatingLabelEnabled } from '../common/utility';\nimport { PaymentMethodId } from '../payment/paymentMethod';\n\nimport { UnassignItemError } from './errors';\nimport findLineItems from './findLineItems';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippingMethodId from './getShippingMethodId';\nimport { MultiShippingFormValues } from './MultiShippingForm';\nimport ShippingForm from './ShippingForm';\nimport ShippingHeader from './ShippingHeader';\nimport { SingleShippingFormValues } from './SingleShippingForm';\nimport ShippingBanner from './customComponents/shipDate/ShippingBanner';\nimport StripeShipping from './stripeUPE/StripeShipping';\n\nexport interface ShippingProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    step: CheckoutStepStatus;\n    onCreateAccount(): void;\n    onToggleMultiShipping(): void;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onSignIn(): void;\n    navigateNextStep(isBillingSameAsShipping: boolean): void;\n    shipDate: Date;\n    setShipDate: Function;\n    arrivalDate: Date;\n    setArrivalDate: Function;\n    giftMessage: String;\n    setGiftMessage: Function;\n}\n\nexport interface WithCheckoutShippingProps {\n    billingAddress?: Address;\n    cart: Cart;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isGuest: boolean;\n    isInitializing: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowAddAddressInCheckout: boolean;\n    shouldShowMultiShipping: boolean;\n    shouldShowOrderComments: boolean;\n    providerWithCustomCheckout?: string;\n    isFloatingLabelEnabled?: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitializeShippingMethod(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initializeShippingMethod(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\n    loadShippingOptions(): Promise<CheckoutSelectors>;\n    signOut(options?: CustomerRequestOptions): void;\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n    unassignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    updateBillingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n    updateShippingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateConsignment(consignment: ConsignmentUpdateRequestBody): Promise<CheckoutSelectors>;\n    loadPaymentMethods(): Promise<CheckoutSelectors>;\n}\n\ninterface ShippingState {\n    isInitializing: boolean;\n    isGiftOrder: boolean;\n    giftMessages: Array<any>;\n}\n\nclass Shipping extends Component<ShippingProps & WithCheckoutShippingProps, ShippingState> {\n    constructor(props: ShippingProps & WithCheckoutShippingProps) {\n        super(props);\n\n        this.state = {\n            isInitializing: true,\n            isGiftOrder: false,\n            giftMessages: new Array\n        };\n    }\n\n    async componentDidMount(): Promise<void> {\n        const {\n            loadShippingAddressFields,\n            loadShippingOptions,\n            onReady = noop,\n            onUnhandledError = noop,\n        } = this.props;\n\n        var toggleMulti = false\n        this.loadGiftMessages(toggleMulti)\n\n        try {\n            await Promise.all([loadShippingAddressFields(), loadShippingOptions()]);\n\n            onReady();\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isInitializing: false });\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            isBillingSameAsShipping,\n            isGuest,\n            shouldShowMultiShipping,\n            customer,\n            unassignItem,\n            updateShippingAddress,\n            updateConsignment,\n            initializeShippingMethod,\n            deinitializeShippingMethod,\n            isMultiShippingMode,\n            onToggleMultiShipping,\n            shipDate,\n            setShipDate,\n            arrivalDate,\n            setArrivalDate,\n            giftMessage,\n            setGiftMessage,\n            // isStripeLinkEnabled,\n            providerWithCustomCheckout,\n            step,\n            isFloatingLabelEnabled,\n            ...shippingFormProps\n        } = this.props;\n\n        const {\n            isInitializing,\n            isGiftOrder,\n            giftMessages\n        } = this.state;\n\n        if (providerWithCustomCheckout === PaymentMethodId.StripeUPE && !customer.email && this.props.countries.length > 0) {\n            return <StripeShipping\n                { ...shippingFormProps }\n                customer={ customer }\n                deinitialize={deinitializeShippingMethod}\n                initialize={initializeShippingMethod}\n                isBillingSameAsShipping={isBillingSameAsShipping}\n                isGuest={ isGuest }\n                isLoading={ isInitializing }\n                isMultiShippingMode={isMultiShippingMode}\n                isShippingMethodLoading={ this.props.isLoading }\n                onMultiShippingChange={ this.handleMultiShippingModeSwitch }\n                onSubmit={this.handleSingleShippingSubmit}\n                shouldShowMultiShipping={ shouldShowMultiShipping }\n                step={step}\n                updateAddress={updateShippingAddress}\n            />;\n        }\n\n        const setIsGiftOrder = (isGiftOrder: boolean) => {\n            this.setState({isGiftOrder: isGiftOrder})\n        }\n\n        const setGiftMessages = (giftMessage: any) => {\n            var updatedGiftMessages = giftMessages\n            updatedGiftMessages.map(item => {\n                if (item.consignmentId === giftMessage.consignmentId) {\n                    item.giftMessage = giftMessage.giftMessage\n                }\n            })\n            this.setState({ giftMessages: updatedGiftMessages })\n        }\n\n        return (\n            <AddressFormSkeleton isLoading={isInitializing}>\n                <div className=\"checkout-form\">\n                    { isMultiShippingMode && !isGuest &&\n                        <ShippingBanner\n                            className='multi-ship-alert-banner'\n                            mainMessage={'You may experience increased screen loading times for orders with multiple destinations.'}\n                        />\n                    }\n                    <ShippingHeader\n                        isGuest={isGuest}\n                        isMultiShippingMode={isMultiShippingMode}\n                        onMultiShippingChange={this.handleMultiShippingModeSwitch}\n                        shouldShowMultiShipping={shouldShowMultiShipping}\n                    />\n                    <ShippingForm\n                        {...shippingFormProps}\n                        addresses={customer.addresses}\n                        deinitialize={deinitializeShippingMethod}\n                        initialize={initializeShippingMethod}\n                        isBillingSameAsShipping={isBillingSameAsShipping}\n                        isFloatingLabelEnabled={isFloatingLabelEnabled}\n                        isGuest={isGuest}\n                        isMultiShippingMode={isMultiShippingMode}\n                        onMultiShippingSubmit={this.handleMultiShippingSubmit}\n                        onSingleShippingSubmit={this.handleSingleShippingSubmit}\n                        onUseNewAddress={this.handleUseNewAddress}\n                        shouldShowSaveAddress={!isGuest}\n                        updateAddress={updateShippingAddress}\n                        shipDate={ shipDate }\n                        setShipDate={ setShipDate }\n                        arrivalDate={ arrivalDate }\n                        setArrivalDate={ setArrivalDate }\n                        giftMessage={ giftMessage }\n                        setGiftMessage={ setGiftMessage }\n                        isGiftOrder={ isGiftOrder }\n                        setIsGiftOrder={ setIsGiftOrder }\n                        giftMessages={ giftMessages }\n                        setGiftMessages={ setGiftMessages }\n                        loadGiftMessages={ this.loadGiftMessages }\n                    />\n                </div>\n            </AddressFormSkeleton>\n        );\n    }\n\n    private loadGiftMessages: (toggleMulti: boolean) => void = async (toggleMulti: boolean) => {\n        const {\n            consignments,\n            isMultiShippingMode\n        } = this.props\n\n        var giftMessages = new Array\n\n        if (isMultiShippingMode || toggleMulti) {\n            consignments.map((consignment: Consignment) => {\n                var giftMessage\n                var consignmentId\n                // Development Custom Field\n                // giftMessage = consignment.shippingAddress.customFields.find(customField => customField.fieldId === 'field_32')\n                // Production Custom Field\n                giftMessage = consignment.shippingAddress.customFields.find(customField => customField.fieldId === 'field_45')\n                consignmentId = consignment.id\n                if (consignmentId) {\n                    giftMessages.push({\n                        consignmentId: consignmentId,\n                        giftMessage: giftMessage && giftMessage.fieldValue || ''\n                    })\n                }\n            })\n    \n            this.setState({ giftMessages: giftMessages })\n        }\n    }\n\n    private handleMultiShippingModeSwitch: () => void = async () => {\n        const {\n            consignments,\n            isMultiShippingMode,\n            onToggleMultiShipping = noop,\n            onUnhandledError = noop,\n            updateShippingAddress,\n        } = this.props;\n\n        if (isMultiShippingMode && consignments.length > 1) {\n            this.setState({ isInitializing: true });\n\n            try {\n                // Collapse all consignments into one\n                await updateShippingAddress(consignments[0].shippingAddress);\n            } catch (error) {\n                onUnhandledError(error);\n            } finally {\n                this.setState({ isInitializing: false });\n            }\n        }\n        \n        var toggleMulti = true\n        this.loadGiftMessages(toggleMulti)\n        onToggleMultiShipping();\n    };\n\n    private handleSingleShippingSubmit: (values: SingleShippingFormValues) => void = async ({\n        billingSameAsShipping,\n        shippingAddress: addressValues,\n        orderComment,\n    }) => {\n        const {\n            cart,\n            customerMessage,\n            updateCheckout,\n            updateShippingAddress,\n            updateBillingAddress,\n            navigateNextStep,\n            onUnhandledError,\n            shippingAddress,\n            billingAddress,\n            methodId,\n            shipDate,\n            arrivalDate,\n            giftMessage,\n        } = this.props;\n\n        const { isGiftOrder } = this.state;\n\n        // CHECKOUT CUSTOM FIELDS\n        // Update Ship Date, Arrival Date, Gift Message, Gift Order custom fields when shipping step is completed.\n\n        if (addressValues) {\n            const shipDateValue = shipDate.toLocaleDateString('en-US')\n            const arrivalDateValue = arrivalDate.toLocaleDateString('en-US')\n            const giftMessageValue = giftMessage.toString()\n            const cartID = cart.id\n            // Development Custom Fields\n            // addressValues.customFields.field_30 = shipDateValue\n            // addressValues.customFields.field_38 = arrivalDateValue\n            // addressValues.customFields.field_32 = giftMessageValue\n            // isGiftOrder ? addressValues.customFields.field_34 = ['0'] : addressValues.customFields.field_34 = []\n            // addressValues.customFields.field_36 = cartID\n            // Production Custom Fields\n            addressValues.customFields.field_43 = shipDateValue\n            addressValues.customFields.field_47 = arrivalDateValue\n            addressValues.customFields.field_45 = giftMessageValue\n            isGiftOrder ? addressValues.customFields.field_51 = ['0'] : addressValues.customFields.field_51 = []\n            addressValues.customFields.field_49 = cartID\n        }\n\n        const updatedShippingAddress = addressValues && mapAddressFromFormValues(addressValues);\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n        const hasRemoteBilling = this.hasRemoteBilling(methodId);\n\n        if (!isEqualAddress(updatedShippingAddress, shippingAddress) || shippingAddress?.shouldSaveAddress !== updatedShippingAddress?.shouldSaveAddress) {\n            promises.push(updateShippingAddress(updatedShippingAddress || {}));\n        }\n\n        if (\n            billingSameAsShipping &&\n            updatedShippingAddress &&\n            !isEqualAddress(updatedShippingAddress, billingAddress) &&\n            !hasRemoteBilling\n        ) {\n            promises.push(updateBillingAddress(updatedShippingAddress));\n        }\n\n        if (customerMessage !== orderComment) {\n            promises.push(updateCheckout({ customerMessage: orderComment }));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            navigateNextStep(billingSameAsShipping);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    private hasRemoteBilling: (methodId?: string) => boolean = (methodId) => {\n        const PAYMENT_METHOD_VALID = ['amazonpay'];\n\n        return PAYMENT_METHOD_VALID.some((method) => method === methodId);\n    };\n\n    private handleUseNewAddress: (address: Address, itemId: string) => void = async (\n        address,\n        itemId,\n    ) => {\n        const { unassignItem, onUnhandledError, isMultiShippingMode } = this.props;\n\n        try {\n            await unassignItem({\n                address,\n                lineItems: [\n                    {\n                        quantity: 1,\n                        itemId,\n                    },\n                ],\n            });\n\n            location.href = '/account.php?action=add_shipping_address&from=checkout';\n        } catch (error) {\n            if (error instanceof UnassignItemError) {\n                onUnhandledError(new UnassignItemError(error));\n            }\n        }\n\n        this.loadGiftMessages(isMultiShippingMode)\n    };\n\n    private handleMultiShippingSubmit: (values: MultiShippingFormValues) => void = async ({\n        orderComment,\n    }) => {\n        const {\n            customerMessage,\n            updateCheckout,\n            updateConsignment,\n            navigateNextStep,\n            onUnhandledError,\n            consignments,\n            shipDate,\n            cart,\n            isMultiShippingMode\n        } = this.props;\n\n        const { giftMessages } = this.state;\n\n        interface ConsignmentUpdateRequestBody {\n            id: string;\n            shippingAddress?: AddressRequestBody;\n            lineItems?: Array<any>;\n        }\n\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n\n        // CHECKOUT CUSTOM FIELDS\n        // Update Ship Date, Arrival Date, Gift Message, Gift Order custom fields when shipping step is completed.\n        \n        const updateConsignmentCustomFields = async (consignment: Consignment) => {\n\n            if (giftMessages.length > 0) {\n                var giftMessage\n                giftMessage = giftMessages.find(item => item.consignmentId === consignment.id).giftMessage\n            }\n            const shipDateValue = shipDate.toLocaleDateString('en-US')\n            const cartID = cart.id.toString()\n\n            // Development Custom Fields\n            // var customFields = [\n            //     { fieldId: \"field_30\", fieldValue: shipDateValue },\n            //     { fieldId: \"field_36\", fieldValue: cartID },\n            //     { fieldId: \"field_32\", fieldValue: giftMessage && giftMessage || '' }\n            // ]\n\n            // Production Custom Fields\n            var customFields = [\n                { fieldId: \"field_43\", fieldValue: shipDateValue },\n                { fieldId: \"field_49\", fieldValue: cartID },\n                { fieldId: \"field_45\", fieldValue: giftMessage && giftMessage || '' }\n            ]\n\n            consignment.shippingAddress.customFields = customFields\n            var consignmentLineItems: { itemId: string | number; quantity: number; }[] = []\n            const lineItems = findLineItems(cart, consignment)\n            lineItems.map(lineItem => consignmentLineItems.push({ itemId: lineItem.id, quantity: lineItem.quantity}))\n\n            const payload: ConsignmentUpdateRequestBody = {\n                id: consignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: consignmentLineItems\n            };\n\n            await promises.push(updateConsignment(payload || {}))\n        }\n\n        if (isMultiShippingMode || consignments.length > 1) {\n            consignments.map((consignment) => {\n                updateConsignmentCustomFields(consignment)\n            })\n        }\n\n        try {\n            await Promise.all(promises);\n\n            if (customerMessage !== orderComment) {\n                await updateCheckout({ customerMessage: orderComment });\n            }\n\n            navigateNextStep(false);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n}\n\nconst deleteConsignmentsSelector = createSelector(\n    ({ checkoutService: { deleteConsignment } }: CheckoutContextProps) => deleteConsignment,\n    ({ checkoutState: { data } }: CheckoutContextProps) => data.getConsignments(),\n    (deleteConsignment, consignments) => async () => {\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        const [{ data }] = await Promise.all(consignments.map(({ id }) => deleteConsignment(id)));\n\n        return data.getShippingAddress();\n    },\n);\n\n// tslint:disable-next-line:cyclomatic-complexity\nexport function mapToShippingProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutShippingProps | null {\n    const {\n        data: {\n            getCart,\n            getCheckout,\n            getConfig,\n            getCustomer,\n            getConsignments,\n            getShippingAddress,\n            getBillingAddress,\n            getShippingAddressFields,\n            getShippingCountries,\n        },\n        statuses: {\n            isShippingStepPending,\n            isSelectingShippingOption,\n            isLoadingShippingOptions,\n            isUpdatingConsignment,\n            isCreatingConsignments,\n            isCreatingCustomerAddress,\n            isLoadingShippingCountries,\n            isUpdatingBillingAddress,\n            isUpdatingCheckout,\n        },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const config = getConfig();\n    const consignments = getConsignments() || [];\n    const customer = getCustomer();\n    const cart = getCart();\n\n    if (!checkout || !config || !customer || !cart) {\n        return null;\n    }\n\n    const {\n        checkoutSettings: {\n            enableOrderComments,\n            features,\n            hasMultiShippingEnabled,\n            googleMapsApiKey,\n        },\n    } = config;\n\n    const methodId = getShippingMethodId(checkout);\n    const shippableItemsCount = getShippableItemsCount(cart);\n    const isLoading =\n        isLoadingShippingOptions() ||\n        isSelectingShippingOption() ||\n        isUpdatingConsignment() ||\n        isCreatingConsignments() ||\n        isUpdatingBillingAddress() ||\n        isUpdatingCheckout() ||\n        isCreatingCustomerAddress();\n    const shouldShowMultiShipping =\n        hasMultiShippingEnabled && !methodId && shippableItemsCount > 1 && shippableItemsCount < 50;\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ'];\n\n    if (features['CHECKOUT-4183.checkout_google_address_autocomplete_uk']) {\n        countriesWithAutocomplete.push('GB');\n    }\n\n    const shippingAddress =\n        !shouldShowMultiShipping && consignments.length > 1 ? undefined : getShippingAddress();\n\n    return {\n        assignItem: checkoutService.assignItemsToAddress,\n        billingAddress: getBillingAddress(),\n        cart,\n        consignments,\n        countries: getShippingCountries() || EMPTY_ARRAY,\n        countriesWithAutocomplete,\n        customer,\n        customerMessage: checkout.customerMessage,\n        createCustomerAddress: checkoutService.createCustomerAddress,\n        deinitializeShippingMethod: checkoutService.deinitializeShipping,\n        deleteConsignments: deleteConsignmentsSelector({ checkoutService, checkoutState }),\n        getFields: getShippingAddressFields,\n        googleMapsApiKey,\n        initializeShippingMethod: checkoutService.initializeShipping,\n        isGuest: customer.isGuest,\n        isInitializing: isLoadingShippingCountries() || isLoadingShippingOptions(),\n        isLoading,\n        isShippingStepPending: isShippingStepPending(),\n        loadShippingAddressFields: checkoutService.loadShippingAddressFields,\n        loadShippingOptions: checkoutService.loadShippingOptions,\n        methodId,\n        providerWithCustomCheckout: config.checkoutSettings.providerWithCustomCheckout || undefined,\n        shippingAddress,\n        shouldShowMultiShipping,\n        shouldShowAddAddressInCheckout:\n            features['CHECKOUT-4726.add_address_in_multishipping_checkout'],\n        shouldShowOrderComments: enableOrderComments,\n        signOut: checkoutService.signOutCustomer,\n        unassignItem: checkoutService.unassignItemsToAddress,\n        updateBillingAddress: checkoutService.updateBillingAddress,\n        updateCheckout: checkoutService.updateCheckout,\n        updateShippingAddress: checkoutService.updateShippingAddress,\n        updateConsignment: checkoutService.updateConsignment,\n        // isStripeLinkEnabled: stripeUpeLinkEnabled,\n        loadPaymentMethods: checkoutService.loadPaymentMethods,\n        isFloatingLabelEnabled: isFloatingLabelEnabled(config.checkoutSettings),\n    };\n}\n\nexport default withCheckout(mapToShippingProps)(Shipping);\n","import { noop } from 'lodash';\nimport { createContext } from 'react';\n\nexport interface AccordionContextProps {\n    selectedItemId?: string;\n    onToggle(id: string): void;\n}\n\nconst AccordionContext = createContext<AccordionContextProps>({ onToggle: noop });\n\nexport default AccordionContext;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionProps {\n    children: ReactNode;\n    className?: string;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    onSelect?(id: string): void;\n}\n\nexport interface AccordionState {\n    selectedItemId?: string;\n}\n\nexport default class Accordion extends Component<AccordionProps, AccordionState> {\n    state: AccordionState = {};\n\n    private getContextValue = memoizeOne((selectedItemId) => {\n        return {\n            onToggle: this.handleToggleItem,\n            selectedItemId,\n        };\n    });\n\n    render(): ReactNode {\n        const { children, className = 'accordion', defaultSelectedItemId } = this.props;\n\n        const { selectedItemId = defaultSelectedItemId } = this.state;\n\n        return (\n            <AccordionContext.Provider value={this.getContextValue(selectedItemId)}>\n                <ul className={className}>{children}</ul>\n            </AccordionContext.Provider>\n        );\n    }\n\n    private handleToggleItem: (id: string) => void = (id) => {\n        const { isDisabled, onSelect = noop } = this.props;\n\n        if (isDisabled) {\n            return;\n        }\n\n        this.setState({ selectedItemId: id });\n        onSelect(id);\n    };\n}\n","import { noop } from 'lodash';\nimport React, {\n    createContext,\n    FunctionComponent,\n    memo,\n    ReactNode,\n    useCallback,\n    useMemo,\n} from 'react';\n\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { Accordion } from '../accordion';\n\nexport interface ChecklistProps {\n    children: ReactNode;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    name: string;\n    onSelect?(value: string): void;\n}\n\nexport interface ChecklistContextProps {\n    name: string;\n}\n\nexport const ChecklistContext = createContext<ChecklistContextProps | undefined>(undefined);\n\nconst Checklist: FunctionComponent<\n    ChecklistProps & ConnectFormikProps<{ [key: string]: string }>\n> = ({ formik: { setFieldValue }, name, onSelect = noop, ...props }) => {\n    const handleSelect = useCallback(\n        (value: string) => {\n            setFieldValue(name, value);\n            onSelect(value);\n        },\n        [name, onSelect, setFieldValue],\n    );\n\n    const contextValue = useMemo(() => ({ name }), [name]);\n\n    return (\n        <ChecklistContext.Provider value={contextValue}>\n            <Accordion\n                {...props}\n                className=\"form-checklist optimizedCheckout-form-checklist\"\n                onSelect={handleSelect}\n            />\n        </ChecklistContext.Provider>\n    );\n};\n\nexport default connectFormik(memo(Checklist));\n","import classNames from 'classnames';\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useContext } from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionItemProps {\n    bodyClassName?: string;\n    children?: ReactNode;\n    className?: string;\n    classNameSelected?: string;\n    headerClassName?: string;\n    headerClassNameSelected?: string;\n    itemId: string;\n    headerContent(props: AccordionItemHeaderProps): ReactNode;\n}\n\nexport interface AccordionItemHeaderProps {\n    isSelected: boolean;\n    onToggle(id: string): void;\n}\n\nconst AccordionItem: FunctionComponent<AccordionItemProps> = ({\n    bodyClassName = 'accordion-item-body',\n    children,\n    className = 'accordion-item',\n    classNameSelected = 'accordion-item--selected',\n    headerClassName = 'accordion-item-header',\n    headerClassNameSelected = 'accordion-item-header--selected',\n    headerContent,\n    itemId,\n}) => {\n    const { onToggle, selectedItemId } = useContext(AccordionContext);\n    const isSelected = selectedItemId === itemId;\n\n    const transitionEndListener = useCallback((node, done) => {\n        node.addEventListener('transitionend', ({ target }: Event) => {\n            if (target === node) {\n                done();\n            }\n        });\n    }, []);\n\n    return (\n        <li\n            className={classNames(className, { [classNameSelected]: isSelected })}\n        >\n            <div className={classNames(headerClassName, { [headerClassNameSelected]: isSelected })}>\n                {headerContent({ isSelected, onToggle })}\n            </div>\n\n            {children && (\n                <CSSTransition\n                    addEndListener={transitionEndListener}\n                    classNames={bodyClassName}\n                    in={isSelected}\n                    mountOnEnter\n                    timeout={{}}\n                    unmountOnExit\n                >\n                    <div className={bodyClassName}>{children}</div>\n                </CSSTransition>\n            )}\n        </li>\n    );\n};\n\nexport default memo(AccordionItem);\n","import React, { FunctionComponent, InputHTMLAttributes } from 'react';\n\nimport Input from './Input';\nimport Label from './Label';\n\nexport interface ChecklistItemInputProps extends InputHTMLAttributes<HTMLInputElement> {\n    isSelected: boolean;\n}\n\nconst ChecklistItemInput: FunctionComponent<ChecklistItemInputProps> = ({\n    id,\n    isSelected,\n    children,\n    ...props\n}) => (\n    <>\n        <Input\n            {...props}\n            checked={isSelected}\n            className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\n            id={id}\n            type=\"radio\"\n        />\n\n        <Label htmlFor={id}>{children}</Label>\n    </>\n);\n\nexport default ChecklistItemInput;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useContext } from 'react';\n\nimport { AccordionItem, AccordionItemHeaderProps } from '../accordion';\n\nimport BasicFormField from './BasicFormField';\nimport { ChecklistContext } from './Checklist';\nimport ChecklistItemInput from './ChecklistItemInput';\n\nexport interface ChecklistItemProps {\n    content?: ReactNode;\n    htmlId?: string;\n    isDisabled?: boolean;\n    label: ReactNode | ((isSelected: boolean) => ReactNode);\n    value: string;\n}\n\nconst ChecklistItem: FunctionComponent<ChecklistItemProps> = ({\n    isDisabled,\n    value,\n    content,\n    htmlId = kebabCase(value),\n    label,\n    ...rest\n}) => {\n    const { name = '' } = useContext(ChecklistContext) || {};\n\n    const renderInput = useCallback(\n        memoizeOne((isSelected: boolean) => ({ field }: FieldProps) => (\n            <ChecklistItemInput\n                {...field}\n                disabled={isDisabled}\n                id={htmlId}\n                isSelected={field.value === value}\n                value={value}\n            >\n                {label instanceof Function ? label(isSelected) : label}\n            </ChecklistItemInput>\n        )),\n        [htmlId, isDisabled, label, value],\n    );\n\n    const handleChange = useCallback(\n        memoizeOne((onToggle: (id: string) => void) => (selectedValue: string) => {\n            if (value === selectedValue) {\n                onToggle(value);\n            }\n        }),\n        [],\n    );\n\n    const renderHeaderContent = useCallback(\n        ({ isSelected, onToggle }: AccordionItemHeaderProps) => (\n            <BasicFormField\n                className=\"form-checklist-option\"\n                name={name}\n                onChange={handleChange(onToggle)}\n                render={renderInput(isSelected)}\n            />\n        ),\n        [handleChange, name, renderInput],\n    );\n\n    return (\n        <AccordionItem\n            {...rest}\n            bodyClassName=\"form-checklist-body\"\n            className=\"form-checklist-item optimizedCheckout-form-checklist-item\"\n            classNameSelected=\"form-checklist-item--selected optimizedCheckout-form-checklist-item--selected\"\n            headerClassName=\"form-checklist-header\"\n            headerClassNameSelected=\"form-checklist-header--selected\"\n            headerContent={renderHeaderContent}\n            itemId={value}\n        >\n            {content}\n        </AccordionItem>\n    );\n};\n\nexport default memo(ChecklistItem);\n"],"names":["connectFormik","OriginalComponent","InnerComponent","memo","props","prevFormik","prevProps","nextFormik","nextProps","DecoratedComponent","connect","displayName","name","data","message","getLanguageService","translate","UnassignItemError","prototype","CustomError","getShippingMethodId","checkout","preselectedPayment","getPreselectedPayment","indexOf","providerId","undefined","SaveAddressForm","withLanguage","withFormik","handleSubmit","values","onSaveAddress","mapPropsToValues","defaultCountryCode","firstName","lastName","address1","address2","customFields","country","countryCode","stateOrProvince","stateOrProvinceCode","postalCode","phone","city","company","shouldSaveAddress","validationSchema","language","getFields","getAddressFormFieldsValidationSchema","formFields","googleMapsApiKey","countriesWithAutocomplete","countries","setFieldValue","isLoading","onRequestClose","isFloatingLabelEnabled","Form","autoComplete","LoadingOverlay","AddressForm","shouldShowSaveAddress","className","href","onClick","preventDefault","TranslatedString","id","Button","disabled","type","variant","Primary","isOpen","onAfterOpen","addressFormProps","Modal","additionalModalClassName","header","ModalHeader","shouldShowCloseButton","title","AssignItemInvalidAddressError","AssignItemFailedError","findConsignment","consignments","itemId","find","consignment","includes","lineItemIds","getShippableLineItems","cart","reduce","lineItems","physicalItems","result","item","i","addedByPromotion","isNil","parentId","concat","lineItemIndex","splitItems","quantity","key","variantId","productId","splitItem","imageUrl","options","addresses","onSelectAddress","onUseNewAddress","handleUseNewAddress","useCallback","address","handleSelectAddress","alt","src","map","optionName","value","nameId","AddressSelect","selectedAddress","shippingAddress","ExtensionRegionContainer","useExtensions","extensionContext","useContext","ExtensionContext","Error","children","giftMessageLength","IconContainer","imageSource","ExpandCircleDownRounded","clearGiftMessage","DeleteForeverRounded","giftMessageToggle","toggleGiftMessage","useState","String","setClassName","useEffect","giftMessage","setGiftMessage","maxLength","rows","placeholder","onChange","event","target","defaultValue","length","renderGiftMessage","isActiveCart","setGiftMessageToggle","savedGiftMessage","customField","fieldId","fieldValue","Fieldset","Legend","testId","renderRecipient","renderRecipientCompany","renderShippingAddress","giftMessages","setGiftMessages","consignmentId","mainMessage","mainMessageIcon","secondMessage","secondMessageIcon","listItems","renderIcon","source","CustomIcon","ListItem","index","isMultiShippingMode","shipDate","setShipDate","arrivalDate","setArrivalDate","itemsUnavailableToShip","setItemsUnavailableToShip","today","Date","todayReset","setHours","Object","setAddress","selectedShippingOption","setSelectedShippingOption","availableDates","setAvailableDates","blackoutDates","setBlackoutDates","promotionalItems","setPromotionalItems","nextAvailableDate","setNextAvailableDate","fetchBlackoutDates","fetchShipByDates","keys","fetchUPSEstimate","getAvailableDates","maxDate","savedShipDate","currentShipDate","isAfterNextAvailable","filterDates","endsAfterShipDate","push","window","scroll","calendarDays","document","querySelectorAll","NodeList","forEach","day","removeAttribute","start","end","dates","date","setDate","getDate","isToday","isWeekday","isBlackoutDate","isAvailableWeekendDate","formattedDate","getFullYear","getMonth","padStart","join","getTime","getDay","isAfter","mustShipDate","split","month","year","body","description","reqObj","method","headers","JSON","stringify","fetch","then","resp","json","estimate","estimatedArrival","EstimatedArrival","replaceAll","catch","error","console","log","formattedDates","blackoutDate","results","productIds","productSKUs","toString","sku","productSKU","renderUnavailableToShipMessage","products","formattedShipDate","toLocaleDateString","weekday","productDetails","productName","calendarClassName","filterDate","highlightDates","inline","minDate","selected","SelectedShipDate","ArrivalDate","bannerMessage","alert","getRecommendedShippingOption","availableShippingOptions","ShippingOptionListItem","shippingOption","renderLabel","StaticShippingOption","displayAdditionalInformation","ChecklistItem","htmlId","label","inputName","shippingOptions","selectedShippingOptionId","onSelectedOption","handleSelect","Checklist","defaultSelectedItemId","onSelect","selectDefaultShippingOptions","this","selectShippingOption","getConsignments","recommendedOption","singleShippingOption","defaultShippingOption","componentDidMount","subscribeToConsignments","unsubscribe","componentDidUpdate","analyticsTracker","shouldShowShippingOptions","showShippingMethods","componentWillUnmount","render","invalidShippingMessage","methodId","renderConsignment","ChecklistSkeleton","additionalClassName","renderNoShippingOptions","role","StaticAddress","StaticConsignmentItemList","PureComponent","withAnalytics","noop","shippingOptionIds","ShippingOptionsForm","subscribeToConsignmentsSelector","createSelector","subscribe","subscriber","isLoadingSelector","_","isLoadingShippingOptions","isSelectingShippingOption","isUpdatingConsignment","isCreatingConsignments","isUpdatingAddress","withCheckout","checkoutService","checkoutState","getCart","getConfig","getCustomer","getCheckout","customer","config","unsortedConsignments","shippableItems","consignmentsOrder","uniq","sortBy","sortConsignments","checkoutSettings","selectConsignmentShippingOption","cartHasChanged","shouldShowOrderComments","shouldDisableSubmit","extensionService","isExtensionEnabled","isExtensionRegionEnabled","Boolean","isRegionEnabled","unavailableItems","setUnavailableItems","savedCartID","renderExtension","ShippingShippingAddressFormAfter","removeListeners","legend","Alert","ShippingOptions","renderGiftMessageMulti","OrderComments","state","items","handleCloseErrorModal","setState","createCustomerAddressError","handleSaveAddress","createCustomerAddress","itemAddingAddress","mapAddressFromFormValues","itemKey","shouldShowAddAddressInCheckout","loadGiftMessages","handleCloseAddAddressForm","assignItem","onUnhandledError","isValidAddress","syncItems","hasSelectedShippingOptions","currentItems","updatedItemIndex","cartItemIds","updatedConsignment","isEqualAddress","newId","matchingCartItems","filter","matchingCartItemIds","findNewItemId","updateShippableItems","findIndex","getDerivedStateFromProps","getShippableItemsCount","isGuest","onSignIn","onCreateAccount","TranslatedLink","ErrorModal","onClose","shouldShowErrorCode","hasUnassignedLineItems","onSubmit","orderComment","enableReinitialize","MultiShippingForm","labelContent","useMemo","CheckboxFormField","addressFieldName","fieldName","formFieldName","field","custom","handleChange","onFieldChange","handleAutocompleteToggle","inputValue","onAddressSelect","formAddress","hasAddresses","hasValidCustomerAddress","isValidCustomerAddress","unmountContentWhenLoading","onAutocompleteToggle","Component","ShippingAddressForm","handleFieldValueChange","initialize","deinitialize","buttonId","customFormFields","shouldShowCustomFormFields","style","padding","size","Tiny","Secondary","DynamicFormField","parentFieldName","hasRequestedShippingOptions","isShippingStepPending","setSubmitted","FormContext","initializeShipping","memoizeOne","defaultOptions","editAddressButtonId","amazonpay","SHIPPING_ADDRESS_FIELDS","setIsGiftOrder","isResettingAddress","isUpdatingShippingData","isValid","handleFieldChange","Promise","resolve","setTimeout","isShippingField","updateAddressWithFormData","handleAddressSelect","updateAddress","setValues","mapAddressToFormValues","deleteConsignments","debouncedUpdateAddress","debounce","includeShippingOptions","params","include","addressForm","isGiftOrder","shouldShowBillingSameAsShipping","some","updatedShippingAddress","Array","isArray","isEqual","contextType","billingSameAsShipping","isInitialValid","isValidSync","formValues","getCustomFormFieldsValidationSchema","SingleShippingForm","customerMessage","isBillingSameAsShipping","onMultiShippingSubmit","onSingleShippingSubmit","signOut","usePayPalConnectAddress","isPayPalAxoEnabled","mergedBcAndPayPalConnectAddresses","shippingAddresses","onMultiShippingChange","shouldShowMultiShipping","ShippingShippingAddressFormBefore","width","StripeStateMapper","stateList","getStripeState","step","isStripeLoading","isStripeAutoStep","isShippingMethodLoading","isNewAddress","setIsNewAddress","isFirstShippingRender","setIsFirstShippingRender","stripeShippingAddress","setStripeShippingAddress","handleLoading","containerId","availableShippingList","code","allowedCountries","handleStripeShippingAddress","shipping","complete","phoneFieldRequired","line1","line2","postal_code","stepCompleted","isComplete","shippingPopulated","shouldShowContent","names","shippingValue","current","getStylesFromElement","properties","parentContainer","getElementById","getAppliedStyles","getStripeStyles","formInput","formLabel","formError","labelText","color","fieldText","fieldPlaceholderText","fieldErrorText","fieldBackground","fieldInnerShadow","fieldBorder","stripeupe","container","onChangeShipping","availableCountries","getStyles","gatewayId","Function","StripeShippingForm","stripeLoadedCallback","handleIsAutoStep","shippingFormProps","AddressFormSkeleton","display","toggleMulti","handleMultiShippingModeSwitch","onToggleMultiShipping","updateShippingAddress","isInitializing","handleSingleShippingSubmit","addressValues","updateCheckout","updateBillingAddress","navigateNextStep","billingAddress","shipDateValue","arrivalDateValue","giftMessageValue","cartID","field_43","field_47","field_45","field_51","field_49","promises","hasRemoteBilling","all","unassignItem","location","handleMultiShippingSubmit","updateConsignment","updateConsignmentCustomFields","consignmentLineItems","findLineItems","lineItem","payload","loadShippingAddressFields","loadShippingOptions","onReady","initializeShippingMethod","deinitializeShippingMethod","providerWithCustomCheckout","PaymentMethodId","StripeUPE","email","updatedGiftMessages","deleteConsignmentsSelector","deleteConsignment","getShippingAddress","mapToShippingProps","getBillingAddress","getShippingAddressFields","getShippingCountries","isCreatingCustomerAddress","isLoadingShippingCountries","isUpdatingBillingAddress","isUpdatingCheckout","enableOrderComments","features","hasMultiShippingEnabled","shippableItemsCount","assignItemsToAddress","deinitializeShipping","signOutCustomer","unassignItemsToAddress","loadPaymentMethods","Shipping","createContext","onToggle","getContextValue","selectedItemId","handleToggleItem","isDisabled","AccordionContext","Provider","ChecklistContext","contextValue","bodyClassName","classNameSelected","headerClassName","headerClassNameSelected","headerContent","isSelected","transitionEndListener","node","done","addEventListener","CSSTransition","addEndListener","classNames","in","mountOnEnter","timeout","unmountOnExit","Input","checked","Label","htmlFor","content","kebabCase","rest","renderInput","selectedValue","renderHeaderContent","BasicFormField"],"sourceRoot":""}